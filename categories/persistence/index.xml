<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Persistence on Room362</title>
    <link>//room362.com/categories/persistence/</link>
    <description>Recent content in Persistence on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Tue, 09 Sep 2014 15:25:27 -0400</lastBuildDate>
    <atom:link href="//room362.com/categories/persistence/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OSX Persistence via PHP Webshell</title>
      <link>//room362.com/post/2014/2014-09-09-osx-persistence-via-php-webshell/</link>
      <pubDate>Tue, 09 Sep 2014 15:25:27 -0400</pubDate>
      
      <guid>//room362.com/post/2014/2014-09-09-osx-persistence-via-php-webshell/</guid>
      <description>&lt;p&gt;As I learn more and more about OSX I find things that surprise me. For instance, in this post I will be showing you how to, &lt;strong&gt;with root or sudo priviledge&lt;/strong&gt;, enable the &lt;strong&gt;built-in&lt;/strong&gt; apache server on OSX and it&amp;rsquo;s &lt;strong&gt;PHP&lt;/strong&gt; module&amp;hellip;.&lt;/p&gt;

&lt;p&gt;I am working with OSX Mavericks so your locations may vary based on the version of OSX your target it.&lt;/p&gt;

&lt;p&gt;First things first is to enable the PHP module for the Apache server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano -w /etc/apache2/httpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(vi or emacs to your heart&amp;rsquo;s content)&lt;/em&gt;. But what we are looking for is to uncomment the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#LoadModule php5_module libexec/apache2/libphp5.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you do that, start up Apache. This can be done temporarily (won&amp;rsquo;t survive a reboot) with the &lt;code&gt;apachectl&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apachectl start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can make it more permanent with &lt;code&gt;launchctl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And undoing the damage with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/osx_apache.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After that, just drop your favorite PHP shell into the &lt;code&gt;/Library/WebServer/Documents/&lt;/code&gt; directory and you&amp;rsquo;re done. (My favorites are &lt;a href=&#34;https://github.com/b374k/b374k&#34;&gt;b374k&lt;/a&gt; and PHP Meterpreter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/osx_php_shell.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>fxsst.dll persistence: the evil fax machine</title>
      <link>//room362.com/post/2011/2011-06-27-fxsstdll-persistence-the-evil-fax-machine/</link>
      <pubDate>Mon, 27 Jun 2011 14:32:16 +0000</pubDate>
      
      <guid>//room362.com/post/2011/2011-06-27-fxsstdll-persistence-the-evil-fax-machine/</guid>
      <description>&lt;p&gt;Nick Harbour wrote a &lt;a href=&#34;https://blog.mandiant.com/archives/1786&#34;&gt;post on Mandiants blog&lt;/a&gt; about some Malware that was using a dll called &amp;lsquo;fxsst.dll&amp;rsquo; to hide and stay persistent on a system. The DLL is used by Windows when it is acting as a Fax server (anyone still do that?). He mentions some very interesting points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The DLL gets loaded at login by Explorer&lt;/li&gt;
&lt;li&gt;The DLL exists in System32 but is looked for in Windows first&lt;/li&gt;
&lt;li&gt;Explorer doesn&amp;rsquo;t try to use anything inside of it via exports unless the system is acting as a fax server (aka safe to put a pretty bland DLL there)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I thought&amp;hellip; no it couldn&amp;rsquo;t be that simple&amp;hellip; lets see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201106_fxsst_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have our victim in a session and are going to make a DLL that points back to our reverse_https multi handler over port 443&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201106_fxsst_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, we&amp;rsquo;ve got our super evil fxsst.dll now lets put it in place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201106_fxsst_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lets test it out just to make sure it works. I will use the PID of explorer.exe (cause thats where it&amp;rsquo;s going to be normally) and I&amp;rsquo;m going to use the method I talked about in the &lt;a href=&#34;//room362.com/blog/2011/5/30/remote-dll-injection-with-meterpreter&#34;&gt;Remote DLL Injection post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201106_fxsst_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Woot! Ok, so the DLL works, but does it load when a user logs in&amp;hellip; (drop out of our 2 sessions first)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//room362.com/images/postimages/201106_fxsst_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats me logging in 2 times because I couldn&amp;rsquo;t believe that it worked. System was fine, and I had a shell. These tests were performed on XP. On Win7 x64 it make the systems freeze up. Right now the DLL payload generation in Metasploit for 64bit systems isn&amp;rsquo;t setup. So, stay away from doing this on x64 bit systems at least with the Metasploit DLL, since it&amp;rsquo;s run at login so you&amp;rsquo;ll have to use psexec or another session to actually remove the file while everyone is logged out. TEST PRIOR TO USE as always.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>