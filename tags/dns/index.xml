<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>dns - Tag - Malicious Link - Blog by mubix - Rob Fuller</title>
        <link>https://malicious.link/tags/dns/</link>
        <description>dns - Tag - Malicious Link - Blog by mubix - Rob Fuller</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>mubix@hak5.org (Rob Fuller)</managingEditor>
            <webMaster>mubix@hak5.org (Rob Fuller)</webMaster><lastBuildDate>Sun, 25 Jun 2017 07:35:28 -0500</lastBuildDate><atom:link href="https://malicious.link/tags/dns/" rel="self" type="application/rss+xml" /><item>
    <title>Dynamic DNS Update Module</title>
    <link>https://malicious.link/posts/2017/dynamic-dns-update-module/</link>
    <pubDate>Sun, 25 Jun 2017 07:35:28 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2017/dynamic-dns-update-module/</guid>
    <description><![CDATA[&ldquo;Secure&rdquo; DNS updates is the default in Windows, but there is an option to allow &ldquo;Nonsecure&rdquo; updates. I have seen this changed when non-Windows DHCP servers are used (eg Access Points), this opens a network up to some pretty nifty attacks that a Metasploit module just hit the ground for.
![](/images/2017/nonsecure_dns_updates.png)The module was originally written by King Sabri, with many touch ups and the spoofing capability by busterbcook
You can read up on the pull request in pr/#8599]]></description>
</item>
<item>
    <title>Buying Internal Domain Access</title>
    <link>https://malicious.link/posts/2016/buying-internal-domain-access/</link>
    <pubDate>Thu, 29 Dec 2016 07:35:28 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2016/buying-internal-domain-access/</guid>
    <description><![CDATA[NOTE: I DID NOT ATTEMPT ANYTHING MORE THAN LOGGING AGAINST ANY OF THE DOMAINS I REGISTERED FOR THIS RESEARCH
For anyone who knows me, they know that I&rsquo;ve been obsessed with DNS for a long time. However, in this post I will show results of something I can&rsquo;t quite explain. It all started with the following hypothesis:
Windows systems make DNS/NetBIOS/LLMNR requests to find the domain controllers they logged into even when they are no longer attached to the domain.]]></description>
</item>
<item>
    <title>Linkedin NXDOMAINs - Purchased Pwnage</title>
    <link>https://malicious.link/posts/2016/linkedin-nxdomains/</link>
    <pubDate>Fri, 17 Jun 2016 07:35:28 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2016/linkedin-nxdomains/</guid>
    <description><![CDATA[I recently asked a friend if I could have just a list of the domains in the LinkedIn dump, no passwords, not full emails, just domains. I run a program that I lovingly call &ldquo;DeepMagic&rdquo; and I feed it domains whenever I can. Well, this time when I tossed the list of domains into the engine it started spitting out tons of errors. There was a total of 9,436,804 unique domains names in the list, and for anyone who works with DNS that isn&rsquo;t a very big number, so I didn&rsquo;t think very much of it and didn&rsquo;t know why it would choke on a list that small.]]></description>
</item>
<item>
    <title>WPAD Persistence</title>
    <link>https://malicious.link/posts/2016/wpad-persistence/</link>
    <pubDate>Sun, 22 May 2016 21:55:12 -0400</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2016/wpad-persistence/</guid>
    <description><![CDATA[Mostly just writing this so I can keep notes.
Today I came up with the idea to forcibly put the WPAD entry into a Windows Domain&rsquo;s DNS. For those who don&rsquo;t know what this would do there is an entire Wikipedia article on the subject: https://en.wikipedia.org/wiki/Web_Proxy_Autodiscovery_Protocol
I did this via PowerShell pretty easily on one of the domain controllers like so:
1 PS C:\&gt; Add-DnsServerResourceRecordA -Name wpad -ZoneName sittingduck.info -IPv4Address 107.]]></description>
</item>
<item>
    <title>AD Zone Transfers as a user</title>
    <link>https://malicious.link/posts/2013/ad-zone-transfers-as-a-user/</link>
    <pubDate>Fri, 04 Oct 2013 11:30:44 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2013/ad-zone-transfers-as-a-user/</guid>
    <description><![CDATA[cross posted from: http://carnal0wnage.attackresearch.com/2013/10/ad-zone-transfers-as-user.html
The tired and true method for Zone Transfers are using either nslookup:
1 2 nslookup ls -d domain.com.local Or dig:
1 dig -t AXFR domain.com.local @ns1.domain.com.local In the Windows Enterprise world there are a few more options. If you are a DNS Admin you can use the &lsquo;dnscmd&rsquo; command like so:
1 2 dnscmd /EnumZones dnscmd /ZonePrint domain.com.local Which is handy if you can pop the DNS server (usually the Domain Controller so you usually have better things to do at that point).]]></description>
</item>
</channel>
</rss>
