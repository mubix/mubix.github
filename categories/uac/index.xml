<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uac on Room362</title>
    <link>https://room362.com/categories/uac/</link>
    <description>Recent content in Uac on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Tue, 30 Oct 2012 20:05:21 +0000</lastBuildDate>
    <atom:link href="https://room362.com/categories/uac/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>BypassUAC got a facelift</title>
      <link>https://room362.com/post/2012/2012-10-30-bypassuac-got-a-facelift/</link>
      <pubDate>Tue, 30 Oct 2012 20:05:21 +0000</pubDate>
      
      <guid>https://room362.com/post/2012/2012-10-30-bypassuac-got-a-facelift/</guid>
      <description>&lt;p&gt;Dave Kennedy and Kevin Mitnick submitted the &amp;ldquo;bypassuac&amp;rdquo; post module to Metasploit a while back (last DerbyCon?). Which is awesome and they did some fantastic work, but I had a few complaints as probably anyone did who used the module on a somewhat modern network.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Old&amp;rdquo; module &lt;code&gt;post/windows/escalate/bypassuac&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_bypassuac_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to give it a bit of a face lift:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;New&amp;rdquo; local exploit module &lt;code&gt;exploit/windows/local/bypassuac&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_bypassuac_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All of the credit for the availability of this module goes to &lt;a href=&#34;https://twitter.com/egyp7&#34;&gt;@egyp7&lt;/a&gt; though, without his epic addition of local exploits to Metasploit the majority of the updates to this module wouldn&amp;rsquo;t be possible.&lt;/p&gt;

&lt;p&gt;Anywho, on to the new features:&lt;/p&gt;

&lt;p&gt;1) You can set any windows payload you want to use now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_bypassuac_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and yes it supports EXE::Custom.&lt;/p&gt;

&lt;p&gt;2) It lets you know if it will be able to bypass the current setting of UAC or not:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_bypassuac_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Even when you&amp;rsquo;re going overkill with it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_bypassuac_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(ASK module if UAC is disabled will just elevate without any kind of user prompt)&lt;/p&gt;

&lt;p&gt;And of course it works as expected if UAC needs bypassing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_bypassuac_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One thing I have yet to update is a simple check to make sure you are an admin that can actually bypass UAC. If you aren&amp;rsquo;t, then you&amp;rsquo;ll be leaving this lovely calling card behind for the user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_bypassuac_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UAC AlwaysNotify Bypass-ish</title>
      <link>https://room362.com/post/2012/2012-10-16-uac-alwaysnotify-bypass-ish/</link>
      <pubDate>Tue, 16 Oct 2012 03:15:19 +0000</pubDate>
      
      <guid>https://room362.com/post/2012/2012-10-16-uac-alwaysnotify-bypass-ish/</guid>
      <description>&lt;p&gt;&lt;strong&gt;UPDATE: THIS IS ONLY WORKS WITH THE LOCAL ADMIN (ID 500) ACCOUNT AND PASSWORD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(MY MISTAKE FOR NOT TESTING MORE)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the &amp;ldquo;-ish&amp;rdquo; is you need to have the username and pass of &lt;del&gt;another account that has administrator rights&lt;/del&gt; the local administrator account on that box. But other than that, the following image should speak for itself. (no UAC prompt occurred during the following actions)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_uacish_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I plan on writing a Metasploit module to do this as all it really does is starts a process as a different user and that process executes ShellExecute&amp;rsquo;s &amp;lsquo;RunAs&amp;rsquo; verb. But until then, get CPAU here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joeware.net/freetools/tools/cpau/&#34;&gt;http://www.joeware.net/freetools/tools/cpau/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and Elevate here: &lt;a href=&#34;http://jpassing.com/2007/12/08/launch-elevated-processes-from-the-command-line/&#34;&gt;http://jpassing.com/2007/12/08/launch-elevated-processes-from-the-command-line/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and doing it manually with built in Windows Kung-Fu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://room362.com/images/postimages/201210_uacish_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Â &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(UAC) User Assisted Compromise</title>
      <link>https://room362.com/post/2012/2012-01-03-uac-user-assisted-compromise/</link>
      <pubDate>Tue, 03 Jan 2012 06:56:22 +0000</pubDate>
      
      <guid>https://room362.com/post/2012/2012-01-03-uac-user-assisted-compromise/</guid>
      <description>&lt;p&gt;A number of times during tests I&amp;rsquo;ve actually run into those mythical creatures called &amp;ldquo;patched windows machines&amp;rdquo;. At &lt;a href=&#34;http://www.derbycon.com&#34;&gt;DerbyCon&lt;/a&gt; &lt;a href=&#34;http://twitter.com/carnal0wnage&#34;&gt;Chris Gates&lt;/a&gt; and I released the &amp;ldquo;Ask&amp;rdquo; post module (which I had failed to publish). This module very simply uses the &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb762153(v=vs.85&#34;&gt;ShellExecute windows function&lt;/a&gt;.aspx&amp;rdquo;) via &lt;a href=&#34;http://dev.metasploit.com/redmine/projects/framework/wiki/RailgunUsage&#34;&gt;Railgun&lt;/a&gt; with the undocumented (but very well known) operator of &amp;lsquo;runas&amp;rsquo;. These two lines accomplished that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client.railgun.add_function( &#39;shell32&#39;, &#39;ShellExecuteA&#39;, &#39;DWORD&#39;,[[&amp;quot;DWORD&amp;quot;,&amp;quot;hwnd&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpOperation&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpFile&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpParameters&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpDirectory&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;DWORD&amp;quot;,&amp;quot;nShowCmd&amp;quot;,&amp;quot;in&amp;quot;],])
client.railgun.shell32.ShellExecuteA(nil,&amp;quot;runas&amp;quot;,&amp;quot;evil.exe&amp;quot;,nil,nil,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would quite simply prompt the user with that annoying UAC prompt asking the user to run &amp;lsquo;evil.exe&amp;rsquo; with Administrative privs. If they are not &amp;ldquo;Admins&amp;rdquo; themselves then it would prompt them for the user name and password (normally the case in systems attached to domains). Something to be aware of: If your evil.exe is not code-signed the UAC box will be orange instead of blue. You can get around this a bit by using rundll32.exe (which is signed ;-) ) as is svchost.exe. (You may also want to not name it evil.exe)&lt;/p&gt;

&lt;p&gt;The downfall here is that 1. You have to drop a binary (boooo) 2. You are prompting the user for UAC control when they didn&amp;rsquo;t do anything to cause it. Users are generally as smart as bait, but it&amp;rsquo;s good practice to assume to the contrary. If for nothing else other than to challenge yourself to up your game.&lt;/p&gt;

&lt;p&gt;Number 1 I&amp;rsquo;ll leave to another post, so lets solve #2.&lt;/p&gt;

&lt;p&gt;When a &amp;ldquo;runas&amp;rdquo; ShellExecute (which UAC runs natively #hint#hint) a few registry locations are checked. One I&amp;rsquo;d like to point out is the HKLM\Software\Classes\exefile key. The &amp;lsquo;exefile&amp;rsquo; as should be obvious is the registry settings for executables, and as such tells Windows how to interact with them. In HKLM (which is only writable by Administrators) the &amp;ldquo;shell\open&amp;rdquo;, &amp;ldquo;shell\runas&amp;rdquo; and &amp;ldquo;shell\runasuser&amp;rdquo; subkeys exist (the structure looks oddly familiar to anyone who visited the ShellExecute page more than once). Inside &amp;ldquo;shellopencommand&amp;rdquo; the default string has &amp;ldquo;%1&amp;rdquo; %*  - this basically means execute the binary %1 and hand the arguments given directly to it %*. Awesome! From here you can alter how every EXE runs on the system (don&amp;rsquo;t do it, Windows doesn&amp;rsquo;t like you afterwards, trust me, and remember to snapshot if you don&amp;rsquo;t).&lt;/p&gt;

&lt;p&gt;Great, but how does this help us, we aren&amp;rsquo;t admins. HKCU is writable by the &amp;lsquo;Current User&amp;rsquo; hence the name, and it so happens to have a very similar registry path: HKCU\Software\Classes. Depending on your system, it may or may not have a &amp;ldquo;exefile&amp;rdquo; subkey. If it doesn&amp;rsquo;t it&amp;rsquo;s pretty easy to create. Lets make it match the &amp;ldquo;runas&amp;rdquo; one in HKLM&lt;/p&gt;

&lt;p&gt;The tree should look something like this when you are done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HKLM

&lt;ul&gt;
&lt;li&gt;Software

&lt;ul&gt;
&lt;li&gt;Classes

&lt;ul&gt;
&lt;li&gt;exefile

&lt;ul&gt;
&lt;li&gt;shell

&lt;ul&gt;
&lt;li&gt;runas

&lt;ul&gt;
&lt;li&gt;command&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Under command change the default value to &amp;ldquo;%1&amp;rdquo; %* just as it is in HKLM, and add a new String value called &amp;lsquo;IsolatedCommand&amp;rsquo; with the same value as default. With these settings, very little has changed on the system or its operation. However, if we change the &amp;lsquo;IsolatedCommand&amp;rsquo; String to &amp;lsquo;notepad.exe&amp;rsquo; and attempt to &amp;lsquo;Run As Administrator&amp;rsquo; on that system using any binary guess what happens? Notepad! (as Admin). w00t. Now we can swap in our evil.exe and bob wins right? Sorta. We still have that horrible problem of stealth. Whatever the user was trying to UAC up won&amp;rsquo;t work, and they&amp;rsquo;ll try it again, and start investigating the problem, which we don&amp;rsquo;t want them to do.&lt;/p&gt;

&lt;p&gt;Enter &amp;lsquo;runyou.exe&amp;rsquo;, it&amp;rsquo;s some very simple C++ that weighs in at a whopping 8k when compiled (probably could loose some weight by those who know better compiler options):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;windows.h&amp;quot;
#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;tchar.h&amp;quot;

int _tmain(int argc, _TCHAR* argv[])
{
    if (argv[1])
    {
        ShellExecuteW(NULL,NULL,argv[1],NULL,NULL,SW_SHOW);
        if (argv[2])
        {
            ShellExecuteW(NULL,NULL,argv[2],NULL,NULL,SW_HIDE);
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code executes the first program visibly and then the second hidden. You probably see where this is going, but we change our IsolatedCommand String to runyou.exe %1 evil.exe and now we give them exactly what they want in an elevated state, but also get our evil binary there too ;-)&lt;/p&gt;

&lt;p&gt;The very real down side to this is you have to wait for the user to use UAC (this does not work if someone else does, it&amp;rsquo;s only for the current user HKCU). But, as a side benefit, it&amp;rsquo;s a very real form of sneaky persistence as well, as it will execute our evil binary every single time they use UAC.&lt;/p&gt;

&lt;p&gt;Game Over&amp;hellip; ;-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>