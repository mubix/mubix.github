<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>proxychains on malicious.link</title>
    <link>/categories/proxychains/</link>
    <description>Recent content in proxychains on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Sep 2013 13:16:39 -0500</lastBuildDate>
    
        <atom:link href="/categories/proxychains/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Changing proxychains hardcoded DNS server</title>
      <link>/post/2013/2013-09-10-changing-proxychains-hardcoded-dns-server/</link>
      <pubDate>Tue, 10 Sep 2013 13:16:39 -0500</pubDate>
      
      <guid>/post/2013/2013-09-10-changing-proxychains-hardcoded-dns-server/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve ever used proxychains to push things through Meterpreter, one of the most annoying things is its &amp;ldquo;hardcoded&amp;rdquo; DNS setting for 4.2.2.2, if the org that you are going after doesn&amp;rsquo;t allow this out of their network, or if you are trying to resolve an internal asset, you&amp;rsquo;re SOL. After a ton of googling and annoyed head slams into walls every time I forget where this is I&amp;rsquo;ve finally decided to make a note of it.&lt;/p&gt;

&lt;p&gt;There isn&amp;rsquo;t much magic here other than knowing that this file exists, but /bin/proxyresolv is a bash script that calls &amp;ldquo;dig&amp;rdquo; using TCP and the DNS server specified so it goes through the proxychains. Here is what it looks like:
(on Kali linux its found here: /usr/lib/proxychains3/proxyresolv)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
# This script is called by proxychains to resolve DNS names
# DNS server used to resolve names
DNS_SERVER=4.2.2.2

if [ $# = 0 ] ; then
echo &amp;quot; usage:&amp;quot;
echo &amp;quot; proxyresolv &amp;lt;hostname&amp;gt; &amp;quot;
exit
fi

export LD_PRELOAD=libproxychains.so.3
dig $1 @$DNS_SERVER +tcp | awk &#39;/A.+[0-9]+\.[0-9]+\.[0-9]/{print $5;}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you could just make the dig request yourself through proxychains then throw whatever you originally attended directly at an IP, or you can make the DNS_SERVER change and hardcode your engagement&amp;rsquo;s internal IP, up to you, but now its documented and I&amp;rsquo;ll never have to go searching like crazy again&amp;hellip; as long as I remember that its on someone else&amp;rsquo;s blog.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
