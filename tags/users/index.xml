<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>users on malicious.link</title>
    <link>https://malicious.link/tags/users/</link>
    <description>Recent content in users on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2019 08:30:44 -0500</lastBuildDate>
    
        <atom:link href="https://malicious.link/tags/users/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>User Based IR - SSH Alerting</title>
      <link>https://malicious.link/post/2019/user-based-ir-ssh-alerting/</link>
      <pubDate>Thu, 27 Jun 2019 08:30:44 -0500</pubDate>
      
      <guid>https://malicious.link/post/2019/user-based-ir-ssh-alerting/</guid>
      <description>

&lt;h2 id=&#34;what-is-user-based-incident-response&#34;&gt;What is User-Based Incident Response?&lt;/h2&gt;

&lt;p&gt;I believe that user based IR is a fundamental to getting security correct in an organization. What does that mean? Empowering users to be your threat intelligence feeds. This comes in many forms, such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Utilizing &lt;a href=&#34;https://www.youtube.com/watch?time_continue=171&amp;amp;v=VdTqLjPg2gA&#34;&gt;incentive based user awareness training (Video)&lt;/a&gt; or PDF on the same topic by a different author - &lt;a href=&#34;https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493221150.pdf&#34;&gt;Using Gamification to Transform Security Awareness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Asking the user if they performed an action. This already happens in many websites like Google, Facebook and is core to 2FA solutions. However, this is usually relegated to logins, and only

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/ryanhuber&#34;&gt;Ryan Huber&lt;/a&gt; posted in 2016 in his &amp;ldquo;&lt;a href=&#34;https://slack.engineering/distributed-security-alerting-c89414c992d6&#34;&gt;Distributed Security Alerting&lt;/a&gt;&amp;rdquo; medium post that this type of alerting and verification should be extended to actions as well, in particular administrative actions.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this blog post we&amp;rsquo;ll walk down the track of enabling #2 for your fleet of Linux boxes. I hope to turn this into a series where I walk through enabling first login alerting for Linux, Windows, and Mac systems, but also alerting for administrative actions like Ryan suggests.&lt;/p&gt;

&lt;h2 id=&#34;ssh-login-push-notifications&#34;&gt;SSH Login Push Notifications&lt;/h2&gt;

&lt;p&gt;Most logins on Linux machines happen over SSH, so lets start there.&lt;/p&gt;

&lt;h3 id=&#34;first-create-the-alert&#34;&gt;First, create the alert&lt;/h3&gt;

&lt;p&gt;First things first, we have to create an alert. I&amp;rsquo;m not worried about alerting every time there is a failed attempt to log in, that doesn&amp;rsquo;t tell me much and depending on where this is deployed that can be an insane amount of alerts, but successful logins, that&amp;rsquo;s important.&lt;/p&gt;

&lt;p&gt;I found this Ask Ubuntu question when googling around for the answer: &lt;a href=&#34;https://askubuntu.com/questions/179889/how-do-i-set-up-an-email-alert-when-a-ssh-login-is-successful&#34;&gt;How do I set up an email alert when a ssh login is successful&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which provides this script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

# Change these two lines:
sender=&amp;quot;sender-address@example.com&amp;quot;
recipient=&amp;quot;notify-address@example.org&amp;quot;

if [ &amp;quot;$PAM_TYPE&amp;quot; != &amp;quot;close_session&amp;quot; ]; then
    host=&amp;quot;`hostname`&amp;quot;
    subject=&amp;quot;SSH Login: $PAM_USER from $PAM_RHOST on $host&amp;quot;
    # Message to send, e.g. the current environment variables.
    message=&amp;quot;`env`&amp;quot;
    echo &amp;quot;$message&amp;quot; | mailx -r &amp;quot;$sender&amp;quot; -s &amp;quot;$subject&amp;quot; &amp;quot;$recipient&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you put the file somewhere, mark it as executable and add the following to the &lt;code&gt;/etc/pam.d/sshd&lt;/code&gt; config file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;session optional pam_exec.so seteuid /path/to/login-notify.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is all fine and dandy if you want all of the alerts going to a single email address (or group email) and for it to go completely ignored due to crazy amounts of emails.&lt;/p&gt;

&lt;p&gt;I modified the script slightly to use a webhook instead&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

if [ &amp;quot;$PAM_TYPE&amp;quot; != &amp;quot;close_session&amp;quot; ]; then
        host=&amp;quot;`hostname`&amp;quot;
        info=&amp;quot;$PAM_USER-$PAM_RHOST-$host&amp;quot;
        test=&amp;quot;`echo $info | base64`&amp;quot;
        curl https://www.webhook.site/9b064a79-37a5-49f5-b80b-c9ed120fc280/?$test
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import os
import json
import socket
import urllib3

# Get Primary IP Address
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect((&amp;quot;8.8.8.8&amp;quot;, 80))
ip = s.getsockname()[0]
s.close()

user = os.environ[&#39;PAM_USER&#39;]
rhost = os.environ[&#39;PAM_RHOST&#39;]
hostname = socket.gethostname()

data = { &#39;user&#39;: user, &#39;rhost&#39;:rhost, &#39;lhost&#39;:ip, &#39;lhostname&#39;:hostname }
jsondata = json.dumps(data)
url = &#39;https://www.webhook.site/9b064a79-37a5-49f5-b80b-c9ed120fc280&#39;
http = urllib3.PoolManager()

test = http.request(&#39;POST&#39;, 
	url, 
	headers={&#39;Content-Type&#39;: &#39;application/json&#39;},
	body=jsondata )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
