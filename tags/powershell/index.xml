<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>powershell - Tag - Malicious Link - Blog by mubix - Rob Fuller</title>
        <link>https://malicious.link/tags/powershell/</link>
        <description>powershell - Tag - Malicious Link - Blog by mubix - Rob Fuller</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>mubix@hak5.org (Rob Fuller)</managingEditor>
            <webMaster>mubix@hak5.org (Rob Fuller)</webMaster><lastBuildDate>Thu, 20 Feb 2020 09:30:44 -0500</lastBuildDate><atom:link href="https://malicious.link/tags/powershell/" rel="self" type="application/rss+xml" /><item>
    <title>Run All Rules for Hashcat</title>
    <link>https://malicious.link/posts/2020/run-all-rules-hashcat/</link>
    <pubDate>Thu, 20 Feb 2020 09:30:44 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2020/run-all-rules-hashcat/</guid>
    <description><![CDATA[This is just a quick script to demonstrate using PowerShell to run all the rules against a specific hash (or hash file), starting from the smallest file (usually the simplest rules)
1 2 3 4 5 6 Set-Location -Path &#39;C:\Program Files\hashcat\&#39; Get-ChildItem .\rules\ | where { $_.extension -eq &#34;.rule&#34; } | Sort-Object -Property Length | % { .\hashcat64.exe -m1000 20F91778B033F841702E014D3B79148C .\rockyou.txt --loopback --rules $_.FullName } I&rsquo;m sure there is a better way to do this.]]></description>
</item>
<item>
    <title>Kerberoasting - Part 2</title>
    <link>https://malicious.link/posts/2016/kerberoast-pt2/</link>
    <pubDate>Sat, 21 May 2016 07:35:28 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2016/kerberoast-pt2/</guid>
    <description><![CDATA[Previous works: There has been a number of different blog posts, presentations and projects that have happened before this post and I will reference a number of them during the post and at the end have a link to all that I know about. If you know of any works on this subject that I am missing please submit a comment below and I&rsquo;ll will be sure to reference it.]]></description>
</item>
<item>
    <title>Kerberoasting - Part 1</title>
    <link>https://malicious.link/posts/2016/kerberoast-pt1/</link>
    <pubDate>Fri, 20 May 2016 07:35:28 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2016/kerberoast-pt1/</guid>
    <description><![CDATA[Previous works: There has been a number of differnet blog posts, presentations and projects that have happened before this post and I will reference a number of them during the post and at the end have a link to all that I know about. If you know of any works on this subject that I am missing please submit a comment below and I&rsquo;ll will be sure to reference it.]]></description>
</item>
<item>
    <title>Get PasswordLastSet Time For Domain Controller Accounts</title>
    <link>https://malicious.link/posts/2015/get-passwordlastset-time-for-domain-controller-accounts/</link>
    <pubDate>Wed, 16 Sep 2015 07:35:28 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2015/get-passwordlastset-time-for-domain-controller-accounts/</guid>
    <description><![CDATA[AKA - ROB WRITES POWERSHELL!!
Yesterday I posted a way to dump hashes using a Domain Controller account. But how do you know which account to use? And when was it&rsquo;s password last set? net user unfortunately won&rsquo;t do computer accounts.
So I decided to write a PowerShell script to find out. Unfortunately Windows 7 doesn&rsquo;t come with the ActiveDirectory PowerShell module (I&rsquo;m sure there is another way to do this but here is how I did it.]]></description>
</item>
<item>
    <title>Powershell Popups &#43; Capture</title>
    <link>https://malicious.link/posts/2015/powershell-popups-and-capture/</link>
    <pubDate>Mon, 12 Jan 2015 17:52:10 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2015/powershell-popups-and-capture/</guid>
    <description><![CDATA[Metasploit Minute has entered into it&rsquo;s 3rd &ldquo;season&rdquo;. And we kick it off with using the Metasploit capture modules to capture creds from this powershell popup. The cool thing about this is you can leave it to execute on a system without any other code on disk and get creds constantly as any level of user. No admin, no UAC bypass needed. Just a bunch of creds for free.. over SSL.]]></description>
</item>
<item>
    <title>AD Zone Transfers as a user</title>
    <link>https://malicious.link/posts/2013/ad-zone-transfers-as-a-user/</link>
    <pubDate>Fri, 04 Oct 2013 11:30:44 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2013/ad-zone-transfers-as-a-user/</guid>
    <description><![CDATA[cross posted from: http://carnal0wnage.attackresearch.com/2013/10/ad-zone-transfers-as-user.html
The tired and true method for Zone Transfers are using either nslookup:
1 2 nslookup ls -d domain.com.local Or dig:
1 dig -t AXFR domain.com.local @ns1.domain.com.local In the Windows Enterprise world there are a few more options. If you are a DNS Admin you can use the &lsquo;dnscmd&rsquo; command like so:
1 2 dnscmd /EnumZones dnscmd /ZonePrint domain.com.local Which is handy if you can pop the DNS server (usually the Domain Controller so you usually have better things to do at that point).]]></description>
</item>
</channel>
</rss>
