<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>metasploit - Category - Malicious Link - Blog by mubix - Rob Fuller</title>
        <link>https://malicious.link/categories/metasploit/</link>
        <description>metasploit - Category - Malicious Link - Blog by mubix - Rob Fuller</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>mubix@hak5.org (Rob Fuller)</managingEditor>
            <webMaster>mubix@hak5.org (Rob Fuller)</webMaster><lastBuildDate>Mon, 13 Jan 2014 14:32:04 -0500</lastBuildDate><atom:link href="https://malicious.link/categories/metasploit/" rel="self" type="application/rss+xml" /><item>
    <title>Installing Metasploit Community Edition on Windows 8</title>
    <link>https://malicious.link/posts/2014/2014-01-13-installing-metasploit-community-edition-on-windows-8/</link>
    <pubDate>Mon, 13 Jan 2014 14:32:04 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2014/2014-01-13-installing-metasploit-community-edition-on-windows-8/</guid>
    <description><![CDATA[Show URL: Hak5
Youtube URL: YouTube
Show RSS feed: RSS]]></description>
</item>
<item>
    <title>Metasploit Minute - Mondays with Mubix - Episode 1</title>
    <link>https://malicious.link/posts/2014/2014-01-06-metasploit-minute-mondays-with-mubix/</link>
    <pubDate>Mon, 06 Jan 2014 14:30:08 -0500</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2014/2014-01-06-metasploit-minute-mondays-with-mubix/</guid>
    <description><![CDATA[Show URL: Hak5
Youtube URL: YouTube
Show RSS feed: RSS]]></description>
</item>
<item>
    <title>Using Mimikatz Alpha or Getting Clear Text Passwords with a Microsoft Tool</title>
    <link>https://malicious.link/posts/2013/2013-06-07-using-mimikatz-alpha-or-getting-clear-text-passwords-with-a/</link>
    <pubDate>Fri, 07 Jun 2013 15:00:08 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2013/2013-06-07-using-mimikatz-alpha-or-getting-clear-text-passwords-with-a/</guid>
    <description><![CDATA[Mimikatz is now built into Metasploit&rsquo;s meterpreter, you can do load mimikatz from the meterpreter prompt, but if you don&rsquo;t want to go through the hassle of dealing with AV, reverse or bind payloads, meterpreter binaries, and you have clear text credentials for an admin, you can just use Mimikatz&rsquo;s alpha release that allows you to run Mimikatz on your machine against a process memory dump of LSASS. The great thing about this technique is that the only thing on disk is a Microsoft tool.]]></description>
</item>
<item>
    <title>Sessiondump Meterpreter Extension</title>
    <link>https://malicious.link/posts/2013/2013-04-08-sessiondump-meterpreter-extension/</link>
    <pubDate>Mon, 08 Apr 2013 09:58:20 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2013/2013-04-08-sessiondump-meterpreter-extension/</guid>
    <description><![CDATA[Mimikatz is awesome right, so is WCE. But both have one fatal flaw, even though you can execute them in memory {link} - you still have to have the binaries, remember the command to execute it in memory, and ultimately transfer the entire binary over so that metasploit can do its thing.
Then along came SessionDump. I only noticed this because someone was tweeting congratulations to someone on writing it:]]></description>
</item>
<item>
    <title>Metasploit Mastery @BlackHatEvents USA 2013</title>
    <link>https://malicious.link/posts/2013/2013-03-19-metasploit-mastery-blackhatevents-usa-2013/</link>
    <pubDate>Tue, 19 Mar 2013 14:38:36 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2013/2013-03-19-metasploit-mastery-blackhatevents-usa-2013/</guid>
    <description><![CDATA[Just a quick post to say that egypt and I will be giving Metasploit Mastery twice (2 x 2 day sessions) at BlackHat USA 2013. Come out and get your Metasploit on in Vegas w/ us
Linky: http://www.blackhat.com/us-13/training/metasploit-mastery.html
Current fill rate of July 27-28 session: Current fill rate of July 29-30 session: EOM]]></description>
</item>
<item>
    <title>Metasploit Mastery meets CanSecWest</title>
    <link>https://malicious.link/posts/2013/2013-01-25-metasploit-mastery-meets-cansecwest/</link>
    <pubDate>Fri, 25 Jan 2013 16:12:20 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2013/2013-01-25-metasploit-mastery-meets-cansecwest/</guid>
    <description><![CDATA[In 2012 @egypt and I taught Metasploit Mastery for a day and a half @DerbyCon . This was a lot of fun but we had to cram a TON of slides into that short period of time. PLUS we had a CTF at the end where people had to break into a corporate network (virtualized) and sell their shells, data, passwords, or flags to us (egypt and I were acting as opposing countries).]]></description>
</item>
<item>
    <title>EXE::Custom in Metasploit&#39;s Java Exploits</title>
    <link>https://malicious.link/posts/2012/2012-11-19-execustom-in-metasploits-java-exploits/</link>
    <pubDate>Mon, 19 Nov 2012 05:59:10 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-11-19-execustom-in-metasploits-java-exploits/</guid>
    <description><![CDATA[Let me say first off that this isn&rsquo;t the most elegant of ways to accomplish it. It is in the &ldquo;it works for me&rdquo; stage.
A quick primer on EXE::Custom: This is a setting just like RHOST in Metasploit wherever an EXE is built for Windows payloads. Such as PSEXEC, BypassUAC, etc. It tells Metasploit to ignore all of your payload settings and just use the EXE you have specified. Now this does come at a bit of a cost.]]></description>
</item>
<item>
    <title>Finding Admin Access</title>
    <link>https://malicious.link/posts/2012/2012-10-31-finding-admin-access/</link>
    <pubDate>Wed, 31 Oct 2012 01:28:22 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-10-31-finding-admin-access/</guid>
    <description><![CDATA[You&rsquo;ve got shell, and a set of credentials but you&rsquo;re coming up empty on what you can do with those credentials. This is especially problematic when you can&rsquo;t get past UAC as you are either in a AlwaysNotify situation or not a local admin.
(I&rsquo;m not trying to pull some some &ldquo;insert magic here&rdquo; on the assumption of credentials just at the time of this writing I have only just started working (created a blank file) on a post module to do this as your current user, so until then, you need credentials)]]></description>
</item>
<item>
    <title>BypassUAC got a facelift</title>
    <link>https://malicious.link/posts/2012/2012-10-30-bypassuac-got-a-facelift/</link>
    <pubDate>Tue, 30 Oct 2012 20:05:21 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-10-30-bypassuac-got-a-facelift/</guid>
    <description><![CDATA[Dave Kennedy and Kevin Mitnick submitted the &ldquo;bypassuac&rdquo; post module to Metasploit a while back (last DerbyCon?). Which is awesome and they did some fantastic work, but I had a few complaints as probably anyone did who used the module on a somewhat modern network.
&ldquo;Old&rdquo; module post/windows/escalate/bypassuac:
I decided to give it a bit of a face lift:
&ldquo;New&rdquo; local exploit module exploit/windows/local/bypassuac:
All of the credit for the availability of this module goes to @egyp7 though, without his epic addition of local exploits to Metasploit the majority of the updates to this module wouldn&rsquo;t be possible.]]></description>
</item>
<item>
    <title>Setting SYSTEM&#39;s proxy settings with Metasploit</title>
    <link>https://malicious.link/posts/2012/2012-10-21-setting-systems-proxy-settings-with-metasploit/</link>
    <pubDate>Sun, 21 Oct 2012 07:40:11 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-10-21-setting-systems-proxy-settings-with-metasploit/</guid>
    <description><![CDATA[One of the great things about the reverse_http(s) payloads is that it is proxy aware. However one of the pitfalls to this is that SYSTEM doesn&rsquo;t have proxy settings, nor do users who have never logged into a system (unless profile loading is triggered). The problem here arrises when you are trying to do anything as SYSTEM, also the PSEXEC only has the option of getting you a SYSTEM shell (so you&rsquo;re done for right out of the door)]]></description>
</item>
<item>
    <title>Mounting SMB shares over Meterpreter</title>
    <link>https://malicious.link/posts/2012/2012-10-17-mounting-smb-shares-over-meterpreter/</link>
    <pubDate>Wed, 17 Oct 2012 17:52:30 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-10-17-mounting-smb-shares-over-meterpreter/</guid>
    <description><![CDATA[Ok, this is pretty straight forward no magic:
Got a shell, doesn&rsquo;t have to be SYSTEM
Add a route to the internal range or directly to the host you want over the session you want
Mosy on over to the Socks4a module. And in another terminal we need to make sure our proxychains.conf file in /etc/ or where ever you store your conf is correct. It defaults to 9050 on 127.]]></description>
</item>
<item>
    <title>Meet “q” – Free Metasploit Exploit Pack</title>
    <link>https://malicious.link/posts/2012/2012-10-04-meet-q-free-metasploit-exploit-pack-html/</link>
    <pubDate>Thu, 04 Oct 2012 09:07:57 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-10-04-meet-q-free-metasploit-exploit-pack-html/</guid>
    <description><![CDATA[Once you’re done staring at the Star Trek deity above (it’s a staring contest you will loose since you a such a simplistic race). I pull your attention to: https://github.com/mubix/q
This repository / exploit pack was created for the sole purpose to house modules, scripts and resource files that would otherwise not be accepted into the Metasploit trunk. It will always be free and anyone is free to submit pulls of modules, scripts or resource files that they created or just found and were not accepted to the trunk because it was just a script, it violates TOS of a service, they did not author it, or any other possible reason.]]></description>
</item>
<item>
    <title>Completely In-memory Mimikatz with Metasploit</title>
    <link>https://malicious.link/posts/2012/2012-09-06-completely-in-memory-mimikatz-with-metasploit/</link>
    <pubDate>Thu, 06 Sep 2012 03:16:47 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-09-06-completely-in-memory-mimikatz-with-metasploit/</guid>
    <description><![CDATA[Executing WCE.exe in memory as demoed by Egypt here: https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram has two issues with it. 1, you leave a file on disk with your hashes and clear text passwords. That just won&rsquo;t do. 2. There is this DLL called WCEAUX.dll that gets written for the briefest second to disk:
(yes I realize I&rsquo;m running this on disk &lsquo;wce32.exe&rsquo;, but it exhibits the same DLL drop when doing in-memory)
Now, don&rsquo;t get me wrong, I love WCE, and Hernan Ochoa does an amazing job with it, but when it comes down to it, it&rsquo;s the best tool for the job.]]></description>
</item>
<item>
    <title>Free Shells with Plink and Pageant</title>
    <link>https://malicious.link/posts/2012/2012-08-28-free-shells-with-plink-and-pageant/</link>
    <pubDate>Tue, 28 Aug 2012 15:42:03 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-08-28-free-shells-with-plink-and-pageant/</guid>
    <description><![CDATA[Watching Egypt’s talk at DEFCON 20 he mentioned the ability to jump on on a system when pageant (puTTY’s ssh-agent equivalent) is running. So I wanted to figure out the best way to get this going. Here is what I came up with:
1 2 3 4 5 6 7 8 9 10 meterpreter &gt; run enum_putty [*] Putty Installed for [[&#34;Administrator&#34;]] [*] Saved SSH Server Public Keys: [*] rsa2@22:172.16.10.150 [*] Session corp_webserver: [*] Protocol: SSH [*] Hostname: 172.]]></description>
</item>
<item>
    <title>Raising Zombies in Windows: Part 1 - Passwords</title>
    <link>https://malicious.link/posts/2012/2012-07-31-raising-zombies-in-windows-part-1-passwords/</link>
    <pubDate>Tue, 31 Jul 2012 20:20:15 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-07-31-raising-zombies-in-windows-part-1-passwords/</guid>
    <description><![CDATA[With the use of Mimikatz and WCE, clear text passwords are much more common. What isn&rsquo;t always there is the user. They take lunches, go home at a reasonable time and generally aren&rsquo;t really appreciative of our (pentester/red teamer)&rsquo;s schedule.
A straight forward way, and provided by Microsoft to create a process as a user (whereby having their token readily available is using &lsquo;runas.exe&rsquo;:
w00t, we the user is present, we can migrate our meterepreter session into that notepad and we&rsquo;re good right?]]></description>
</item>
<item>
    <title>Cross-Protocol Chained Pass the Hash for Metasploit</title>
    <link>https://malicious.link/posts/2012/2012-07-10-cross-protocol-chained-pass-the-hash-for-metasploit/</link>
    <pubDate>Tue, 10 Jul 2012 06:02:40 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-07-10-cross-protocol-chained-pass-the-hash-for-metasploit/</guid>
    <description><![CDATA[Every so often someone writes a Metasploit Module that is pretty epic. Today is one such day:
Twitter Link: https://twitter.com/webstersprodigy/status/222529916783169536
Which has a link to here: https://github.com/rapid7/metasploit-framework/pull/589
Demo / Example resource files: https://skydrive.live.com/?cid=19794fac33285fd5&amp;resid=19794FAC33285FD5!170&amp;id=19794FAC33285FD5%21170
You can pull the fork w/ branch from here: https://github.com/webstersprodigy/metasploit-framework/tree/module-http-ntlmrelay
And as soon as you do you can start doing this (using the example resource file to put a file, cat it out, enum shares available, list files on a share, then psexec all from a single URL being loaded):]]></description>
</item>
<item>
    <title>Bypassing Trend Micro&#39;s Service Protection</title>
    <link>https://malicious.link/posts/2012/2012-07-05-bypassing-trend-micros-service-protection/</link>
    <pubDate>Thu, 05 Jul 2012 03:44:59 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-07-05-bypassing-trend-micros-service-protection/</guid>
    <description><![CDATA[@jabjorkhaug posed the following question on Twitter today:
I figured I could solve this and it would be an interesting challenge. Here is what it gets detected as:
The service binary that is used as part of PSEXEC is located here:
MSF Directory/data/templates/src/pe/exe/service/service.c
The important part to look at starts at line 57:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #define WIN32_LEAN_AND_MEAN #include &lt;windows.]]></description>
</item>
<item>
    <title>Netstat Post Module for Meterpreter</title>
    <link>https://malicious.link/posts/2012/2012-06-28-netstat-post-module-for-meterpreter/</link>
    <pubDate>Thu, 28 Jun 2012 13:18:52 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-06-28-netstat-post-module-for-meterpreter/</guid>
    <description><![CDATA[Submitted it to MSF via pull request here: https://github.com/rapid7/metasploit-framework/pull/538
Added to trunk: https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/tcpnetstat.rb
I promised this one a while ago, sorry for the delay. This only does TCP, it&rsquo;d be trivial to do UDP as well but never really found anything interesting and actively going on on the UDP side. It&rsquo;s real simple, first we&rsquo;ve gotta add the GetTcpTable function to railgun:
1 2 3 4 5 session.railgun.add_function(&#39;iphlpapi&#39;, &#39;GetTcpTable&#39;, &#39;DWORD&#39;, [ [&#39;PBLOB&#39;, &#39;pTcpTable&#39;, &#39;out&#39;], [&#39;PDWORD&#39;, &#39;pdwSize&#39;, &#39;inout&#39;], [&#39;BOOL&#39;, &#39;bOrder&#39;, &#39;in&#39;] ]) Then gauge the size of the table:]]></description>
</item>
<item>
    <title>Integration of Mimikatz into Metasploit Stage1</title>
    <link>https://malicious.link/posts/2012/2012-06-15-integration-of-mimikatz-into-metasploit-stage1/</link>
    <pubDate>Fri, 15 Jun 2012 14:55:55 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-06-15-integration-of-mimikatz-into-metasploit-stage1/</guid>
    <description><![CDATA[One of the powers of Metasploit is it&rsquo;s ability to stay memory resident. Through the use of reflective DLL injection even keeping new functionality the attack loads from ever touching disk. Well, the first thing I wanted to do with Mimikatz is get to that same level.
Here is my first step to that end; a railgun based Meterpreter script. Now before going all reflective with it I needed to understand how the DLL worked.]]></description>
</item>
<item>
    <title>Developing the LNK Metasploit post module with Mona</title>
    <link>https://malicious.link/posts/2012/2012-02-19-developing-the-lnk-metasploit-post-module-with-mona/</link>
    <pubDate>Sun, 19 Feb 2012 05:57:02 &#43;0000</pubDate>
    <author>mubix</author>
    <guid>https://malicious.link/posts/2012/2012-02-19-developing-the-lnk-metasploit-post-module-with-mona/</guid>
    <description><![CDATA[I have been using the LNK trick I talked about in my last post for a while, but always needing a Windows machine to create the LNK file. When I decided to write a post about it, I wanted to put the stipulation for myself that I would finally develop a way to get it done with out having to lug around a VM or spin one up every time I needed to change it&rsquo;s target.]]></description>
</item>
</channel>
</rss>
