<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>impacket - Category - Malicious Link - Blog by mubix - Rob Fuller</title>
        <link>https://malicious.link/categories/impacket/</link>
        <description>impacket - Category - Malicious Link - Blog by mubix - Rob Fuller</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>mubix@hak5.org (Rob Fuller)</managingEditor>
            <webMaster>mubix@hak5.org (Rob Fuller)</webMaster><lastBuildDate>Sat, 19 Apr 2014 21:36:21 -0400</lastBuildDate><atom:link href="https://malicious.link/categories/impacket/" rel="self" type="application/rss+xml" /><item>
    <title>Executing code via SMB / DCOM without PSEXEC</title>
    <link>https://malicious.link/posts/2014/2014-04-19-executing-code-via-smb-without-psexec/</link>
    <pubDate>Sat, 19 Apr 2014 21:36:21 -0400</pubDate>
    <author>Rob Fuller</author>
    <guid>https://malicious.link/posts/2014/2014-04-19-executing-code-via-smb-without-psexec/</guid>
    <description><![CDATA[PSEXEC has been a staple for Windows post exploitation pivoting and system administration for a long while. The basic premise of how all &ldquo;psexec&rdquo; tools work is:
(Optional) Upload a service executable (PSEXECSVC.EXE in the case of SysInternal&rsquo;s tool) to the ADMIN$ share Connect to the service manager on the remote host, and create a service based on either a local (to the remote system) executable or the uploaded one. Run the service Stop and delete the service and uploaded file pulling down the resulting output if any from the execution.]]></description>
</item>
</channel>
</rss>
