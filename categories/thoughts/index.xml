<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thoughts on Malicious Link</title>
    <link>https://malicious.link/categories/thoughts/</link>
    <description>Recent content in Thoughts on Malicious Link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 07 Jan 2009 19:30:52 +0000</lastBuildDate>
    
	<atom:link href="https://malicious.link/categories/thoughts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Random Thoughts - Web App Hacking</title>
      <link>https://malicious.link/post/2009/2009-01-07-random-thoughts-web-app-hacking/</link>
      <pubDate>Wed, 07 Jan 2009 19:30:52 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-01-07-random-thoughts-web-app-hacking/</guid>
      <description> SQLi through meta refreshes using cookies or useragents. Making SQLi a client-side attack. How much do you want to bet that the person that visits the site the most is the administrator :)
 Javascript adding hidden files upload form fields that are auto populated with C:\Windows\System32\config\SAM or C:\Windows\Repair .. yadada. You get the idea.
  </description>
    </item>
    
    <item>
      <title>Using SAMBA to crack Unix passwords</title>
      <link>https://malicious.link/post/2008/2008-12-25-using-samba-to-crack-unix-passwords/</link>
      <pubDate>Thu, 25 Dec 2008 17:47:30 +0000</pubDate>
      
      <guid>https://malicious.link/post/2008/2008-12-25-using-samba-to-crack-unix-passwords/</guid>
      <description>This is an untested theory, but I don’t see why it wouldn’t work. Anyone who wants to prove it either way is very welcome to comment on the matter below.
Ok. Say you have the following exerpt from an /etc/shadow file:
root:awac7eQv2CT0g:12685:0:10000:::: billybob:$7$b1XHzqR5$RJxOyHRAix2rVmtXyHkLikmnod.z94P6vSL1h8ZeUdY/urvOvkvJjg2hn/J0r90YAdAA8HedGIPR2D7.zIzJS0:14438:0:99999:7:::  Both passwords in clear text are “uncrackable”. Here is where the trick comes into it. We use the weakness in LM hashes to crack the password (as long as it’s under 15 characters of course).</description>
    </item>
    
  </channel>
</rss>